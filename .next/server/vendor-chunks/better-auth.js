"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/better-auth";
exports.ids = ["vendor-chunks/better-auth"];
exports.modules = {

/***/ "(ssr)/./node_modules/better-auth/dist/client/react/index.mjs":
/*!**************************************************************!*\
  !*** ./node_modules/better-auth/dist/client/react/index.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   capitalizeFirstLetter: () => (/* binding */ capitalizeFirstLetter),\n/* harmony export */   createAuthClient: () => (/* binding */ createAuthClient),\n/* harmony export */   useStore: () => (/* binding */ useStore)\n/* harmony export */ });\n/* harmony import */ var _shared_better_auth_DLt6eN7D_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../shared/better-auth.DLt6eN7D.mjs */ \"(ssr)/./node_modules/better-auth/dist/shared/better-auth.DLt6eN7D.mjs\");\n/* harmony import */ var nanostores__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! nanostores */ \"(ssr)/./node_modules/nanostores/listen-keys/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _better_fetch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @better-fetch/fetch */ \"(ssr)/./node_modules/@better-fetch/fetch/dist/index.js\");\n/* harmony import */ var _shared_better_auth_BRFtaovt_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../shared/better-auth.BRFtaovt.mjs */ \"(ssr)/./node_modules/better-auth/dist/shared/better-auth.BRFtaovt.mjs\");\n/* harmony import */ var _shared_better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../shared/better-auth.CiuwFiHM.mjs */ \"(ssr)/./node_modules/better-auth/dist/shared/better-auth.CiuwFiHM.mjs\");\n/* harmony import */ var _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../shared/better-auth.DdzSJf-n.mjs */ \"(ssr)/./node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs\");\n/* harmony import */ var _shared_better_auth_BYWGbmZ5_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../shared/better-auth.BYWGbmZ5.mjs */ \"(ssr)/./node_modules/better-auth/dist/shared/better-auth.BYWGbmZ5.mjs\");\n/* harmony import */ var _shared_better_auth_msGOU0m9_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../shared/better-auth.msGOU0m9.mjs */ \"(ssr)/./node_modules/better-auth/dist/shared/better-auth.msGOU0m9.mjs\");\n\n\n\n\n\n\n\n\n\n\nfunction useStore(store, options = {}) {\n  let snapshotRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(store.get());\n  const { keys, deps = [store, keys] } = options;\n  let subscribe = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((onChange) => {\n    const emitChange = (value) => {\n      if (snapshotRef.current === value) return;\n      snapshotRef.current = value;\n      onChange();\n    };\n    emitChange(store.value);\n    if (keys?.length) {\n      return (0,nanostores__WEBPACK_IMPORTED_MODULE_8__.listenKeys)(store, keys, emitChange);\n    }\n    return store.listen(emitChange);\n  }, deps);\n  let get = () => snapshotRef.current;\n  return (0,react__WEBPACK_IMPORTED_MODULE_1__.useSyncExternalStore)(subscribe, get, get);\n}\n\nfunction getAtomKey(str) {\n  return `use${capitalizeFirstLetter(str)}`;\n}\nfunction capitalizeFirstLetter(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\nfunction createAuthClient(options) {\n  const {\n    pluginPathMethods,\n    pluginsActions,\n    pluginsAtoms,\n    $fetch,\n    $store,\n    atomListeners\n  } = (0,_shared_better_auth_DLt6eN7D_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(options);\n  let resolvedHooks = {};\n  for (const [key, value] of Object.entries(pluginsAtoms)) {\n    resolvedHooks[getAtomKey(key)] = () => useStore(value);\n  }\n  const routes = {\n    ...pluginsActions,\n    ...resolvedHooks,\n    $fetch,\n    $store\n  };\n  const proxy = (0,_shared_better_auth_DLt6eN7D_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(\n    routes,\n    $fetch,\n    pluginPathMethods,\n    pluginsAtoms,\n    atomListeners\n  );\n  return proxy;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9jbGllbnQvcmVhY3QvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUEwRztBQUNsRTtBQUMwQjtBQUNyQztBQUNrQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUUvQyxxQ0FBcUM7QUFDckMsb0JBQW9CLDZDQUFNO0FBQzFCLFVBQVUsNkJBQTZCO0FBQ3ZDLGtCQUFrQixrREFBVztBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsc0RBQVU7QUFDdkI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLFNBQVMsMkRBQW9CO0FBQzdCOztBQUVBO0FBQ0EsZUFBZSwyQkFBMkI7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxFQUFFLG1FQUFlO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLG1FQUFzQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUU2RCIsInNvdXJjZXMiOlsid2VicGFjazovL2F1dG9wbGFuY2FtLy4vbm9kZV9tb2R1bGVzL2JldHRlci1hdXRoL2Rpc3QvY2xpZW50L3JlYWN0L2luZGV4Lm1qcz9mZjBiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGcgYXMgZ2V0Q2xpZW50Q29uZmlnLCBjIGFzIGNyZWF0ZUR5bmFtaWNQYXRoUHJveHkgfSBmcm9tICcuLi8uLi9zaGFyZWQvYmV0dGVyLWF1dGguREx0NmVON0QubWpzJztcbmltcG9ydCB7IGxpc3RlbktleXMgfSBmcm9tICduYW5vc3RvcmVzJztcbmltcG9ydCB7IHVzZVJlZiwgdXNlQ2FsbGJhY2ssIHVzZVN5bmNFeHRlcm5hbFN0b3JlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0ICdAYmV0dGVyLWZldGNoL2ZldGNoJztcbmltcG9ydCAnLi4vLi4vc2hhcmVkL2JldHRlci1hdXRoLkJSRnRhb3Z0Lm1qcyc7XG5pbXBvcnQgJy4uLy4uL3NoYXJlZC9iZXR0ZXItYXV0aC5DaXV3RmlITS5tanMnO1xuaW1wb3J0ICcuLi8uLi9zaGFyZWQvYmV0dGVyLWF1dGguRGR6U0pmLW4ubWpzJztcbmltcG9ydCAnLi4vLi4vc2hhcmVkL2JldHRlci1hdXRoLkJZV0dibVo1Lm1qcyc7XG5pbXBvcnQgJy4uLy4uL3NoYXJlZC9iZXR0ZXItYXV0aC5tc0dPVTBtOS5tanMnO1xuXG5mdW5jdGlvbiB1c2VTdG9yZShzdG9yZSwgb3B0aW9ucyA9IHt9KSB7XG4gIGxldCBzbmFwc2hvdFJlZiA9IHVzZVJlZihzdG9yZS5nZXQoKSk7XG4gIGNvbnN0IHsga2V5cywgZGVwcyA9IFtzdG9yZSwga2V5c10gfSA9IG9wdGlvbnM7XG4gIGxldCBzdWJzY3JpYmUgPSB1c2VDYWxsYmFjaygob25DaGFuZ2UpID0+IHtcbiAgICBjb25zdCBlbWl0Q2hhbmdlID0gKHZhbHVlKSA9PiB7XG4gICAgICBpZiAoc25hcHNob3RSZWYuY3VycmVudCA9PT0gdmFsdWUpIHJldHVybjtcbiAgICAgIHNuYXBzaG90UmVmLmN1cnJlbnQgPSB2YWx1ZTtcbiAgICAgIG9uQ2hhbmdlKCk7XG4gICAgfTtcbiAgICBlbWl0Q2hhbmdlKHN0b3JlLnZhbHVlKTtcbiAgICBpZiAoa2V5cz8ubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gbGlzdGVuS2V5cyhzdG9yZSwga2V5cywgZW1pdENoYW5nZSk7XG4gICAgfVxuICAgIHJldHVybiBzdG9yZS5saXN0ZW4oZW1pdENoYW5nZSk7XG4gIH0sIGRlcHMpO1xuICBsZXQgZ2V0ID0gKCkgPT4gc25hcHNob3RSZWYuY3VycmVudDtcbiAgcmV0dXJuIHVzZVN5bmNFeHRlcm5hbFN0b3JlKHN1YnNjcmliZSwgZ2V0LCBnZXQpO1xufVxuXG5mdW5jdGlvbiBnZXRBdG9tS2V5KHN0cikge1xuICByZXR1cm4gYHVzZSR7Y2FwaXRhbGl6ZUZpcnN0TGV0dGVyKHN0cil9YDtcbn1cbmZ1bmN0aW9uIGNhcGl0YWxpemVGaXJzdExldHRlcihzdHIpIHtcbiAgcmV0dXJuIHN0ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUF1dGhDbGllbnQob3B0aW9ucykge1xuICBjb25zdCB7XG4gICAgcGx1Z2luUGF0aE1ldGhvZHMsXG4gICAgcGx1Z2luc0FjdGlvbnMsXG4gICAgcGx1Z2luc0F0b21zLFxuICAgICRmZXRjaCxcbiAgICAkc3RvcmUsXG4gICAgYXRvbUxpc3RlbmVyc1xuICB9ID0gZ2V0Q2xpZW50Q29uZmlnKG9wdGlvbnMpO1xuICBsZXQgcmVzb2x2ZWRIb29rcyA9IHt9O1xuICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhwbHVnaW5zQXRvbXMpKSB7XG4gICAgcmVzb2x2ZWRIb29rc1tnZXRBdG9tS2V5KGtleSldID0gKCkgPT4gdXNlU3RvcmUodmFsdWUpO1xuICB9XG4gIGNvbnN0IHJvdXRlcyA9IHtcbiAgICAuLi5wbHVnaW5zQWN0aW9ucyxcbiAgICAuLi5yZXNvbHZlZEhvb2tzLFxuICAgICRmZXRjaCxcbiAgICAkc3RvcmVcbiAgfTtcbiAgY29uc3QgcHJveHkgPSBjcmVhdGVEeW5hbWljUGF0aFByb3h5KFxuICAgIHJvdXRlcyxcbiAgICAkZmV0Y2gsXG4gICAgcGx1Z2luUGF0aE1ldGhvZHMsXG4gICAgcGx1Z2luc0F0b21zLFxuICAgIGF0b21MaXN0ZW5lcnNcbiAgKTtcbiAgcmV0dXJuIHByb3h5O1xufVxuXG5leHBvcnQgeyBjYXBpdGFsaXplRmlyc3RMZXR0ZXIsIGNyZWF0ZUF1dGhDbGllbnQsIHVzZVN0b3JlIH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/better-auth/dist/client/react/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/better-auth/dist/shared/better-auth.BRFtaovt.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.BRFtaovt.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ getBaseURL),\n/* harmony export */   b: () => (/* binding */ getHost),\n/* harmony export */   c: () => (/* binding */ getProtocol),\n/* harmony export */   g: () => (/* binding */ getOrigin)\n/* harmony export */ });\n/* harmony import */ var _better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./better-auth.CiuwFiHM.mjs */ \"(ssr)/./node_modules/better-auth/dist/shared/better-auth.CiuwFiHM.mjs\");\n/* harmony import */ var _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./better-auth.DdzSJf-n.mjs */ \"(ssr)/./node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs\");\n\n\n\nfunction checkHasPath(url) {\n  try {\n    const parsedUrl = new URL(url);\n    const pathname = parsedUrl.pathname.replace(/\\/+$/, \"\") || \"/\";\n    return pathname !== \"/\";\n  } catch (error) {\n    throw new _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_1__.B(\n      `Invalid base URL: ${url}. Please provide a valid base URL.`\n    );\n  }\n}\nfunction withPath(url, path = \"/api/auth\") {\n  const hasPath = checkHasPath(url);\n  if (hasPath) {\n    return url;\n  }\n  const trimmedUrl = url.replace(/\\/+$/, \"\");\n  if (!path || path === \"/\") {\n    return trimmedUrl;\n  }\n  path = path.startsWith(\"/\") ? path : `/${path}`;\n  return `${trimmedUrl}${path}`;\n}\nfunction getBaseURL(url, path, request, loadEnv) {\n  if (url) {\n    return withPath(url, path);\n  }\n  if (loadEnv !== false) {\n    const fromEnv = _better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_0__.e.BETTER_AUTH_URL || _better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_0__.e.NEXT_PUBLIC_BETTER_AUTH_URL || _better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_0__.e.PUBLIC_BETTER_AUTH_URL || _better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_0__.e.NUXT_PUBLIC_BETTER_AUTH_URL || _better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_0__.e.NUXT_PUBLIC_AUTH_URL || (_better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_0__.e.BASE_URL !== \"/\" ? _better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_0__.e.BASE_URL : void 0);\n    if (fromEnv) {\n      return withPath(fromEnv, path);\n    }\n  }\n  const fromRequest = request?.headers.get(\"x-forwarded-host\");\n  const fromRequestProto = request?.headers.get(\"x-forwarded-proto\");\n  if (fromRequest && fromRequestProto) {\n    return withPath(`${fromRequestProto}://${fromRequest}`, path);\n  }\n  if (request) {\n    const url2 = getOrigin(request.url);\n    if (!url2) {\n      throw new _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_1__.B(\n        \"Could not get origin from request. Please provide a valid base URL.\"\n      );\n    }\n    return withPath(url2, path);\n  }\n  if (typeof window !== \"undefined\" && window.location) {\n    return withPath(window.location.origin, path);\n  }\n  return void 0;\n}\nfunction getOrigin(url) {\n  try {\n    const parsedUrl = new URL(url);\n    return parsedUrl.origin;\n  } catch (error) {\n    return null;\n  }\n}\nfunction getProtocol(url) {\n  try {\n    const parsedUrl = new URL(url);\n    return parsedUrl.protocol;\n  } catch (error) {\n    return null;\n  }\n}\nfunction getHost(url) {\n  try {\n    const parsedUrl = new URL(url);\n    return parsedUrl.host;\n  } catch (error) {\n    return url;\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguQlJGdGFvdnQubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFzRDtBQUNZOztBQUVsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLGNBQWMsd0RBQWU7QUFDN0IsMkJBQTJCLElBQUk7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLEtBQUs7QUFDaEQsWUFBWSxXQUFXLEVBQUUsS0FBSztBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0Isd0RBQUcsb0JBQW9CLHdEQUFHLGdDQUFnQyx3REFBRywyQkFBMkIsd0RBQUcsZ0NBQWdDLHdEQUFHLDBCQUEwQix3REFBRyxvQkFBb0Isd0RBQUc7QUFDdE07QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsaUJBQWlCLEtBQUssWUFBWTtBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQix3REFBZTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFMkUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hdXRvcGxhbmNhbS8uL25vZGVfbW9kdWxlcy9iZXR0ZXItYXV0aC9kaXN0L3NoYXJlZC9iZXR0ZXItYXV0aC5CUkZ0YW92dC5tanM/NGE5YyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBlIGFzIGVudiB9IGZyb20gJy4vYmV0dGVyLWF1dGguQ2l1d0ZpSE0ubWpzJztcbmltcG9ydCB7IEIgYXMgQmV0dGVyQXV0aEVycm9yIH0gZnJvbSAnLi9iZXR0ZXItYXV0aC5EZHpTSmYtbi5tanMnO1xuXG5mdW5jdGlvbiBjaGVja0hhc1BhdGgodXJsKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgcGFyc2VkVXJsID0gbmV3IFVSTCh1cmwpO1xuICAgIGNvbnN0IHBhdGhuYW1lID0gcGFyc2VkVXJsLnBhdGhuYW1lLnJlcGxhY2UoL1xcLyskLywgXCJcIikgfHwgXCIvXCI7XG4gICAgcmV0dXJuIHBhdGhuYW1lICE9PSBcIi9cIjtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICB0aHJvdyBuZXcgQmV0dGVyQXV0aEVycm9yKFxuICAgICAgYEludmFsaWQgYmFzZSBVUkw6ICR7dXJsfS4gUGxlYXNlIHByb3ZpZGUgYSB2YWxpZCBiYXNlIFVSTC5gXG4gICAgKTtcbiAgfVxufVxuZnVuY3Rpb24gd2l0aFBhdGgodXJsLCBwYXRoID0gXCIvYXBpL2F1dGhcIikge1xuICBjb25zdCBoYXNQYXRoID0gY2hlY2tIYXNQYXRoKHVybCk7XG4gIGlmIChoYXNQYXRoKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuICBjb25zdCB0cmltbWVkVXJsID0gdXJsLnJlcGxhY2UoL1xcLyskLywgXCJcIik7XG4gIGlmICghcGF0aCB8fCBwYXRoID09PSBcIi9cIikge1xuICAgIHJldHVybiB0cmltbWVkVXJsO1xuICB9XG4gIHBhdGggPSBwYXRoLnN0YXJ0c1dpdGgoXCIvXCIpID8gcGF0aCA6IGAvJHtwYXRofWA7XG4gIHJldHVybiBgJHt0cmltbWVkVXJsfSR7cGF0aH1gO1xufVxuZnVuY3Rpb24gZ2V0QmFzZVVSTCh1cmwsIHBhdGgsIHJlcXVlc3QsIGxvYWRFbnYpIHtcbiAgaWYgKHVybCkge1xuICAgIHJldHVybiB3aXRoUGF0aCh1cmwsIHBhdGgpO1xuICB9XG4gIGlmIChsb2FkRW52ICE9PSBmYWxzZSkge1xuICAgIGNvbnN0IGZyb21FbnYgPSBlbnYuQkVUVEVSX0FVVEhfVVJMIHx8IGVudi5ORVhUX1BVQkxJQ19CRVRURVJfQVVUSF9VUkwgfHwgZW52LlBVQkxJQ19CRVRURVJfQVVUSF9VUkwgfHwgZW52Lk5VWFRfUFVCTElDX0JFVFRFUl9BVVRIX1VSTCB8fCBlbnYuTlVYVF9QVUJMSUNfQVVUSF9VUkwgfHwgKGVudi5CQVNFX1VSTCAhPT0gXCIvXCIgPyBlbnYuQkFTRV9VUkwgOiB2b2lkIDApO1xuICAgIGlmIChmcm9tRW52KSB7XG4gICAgICByZXR1cm4gd2l0aFBhdGgoZnJvbUVudiwgcGF0aCk7XG4gICAgfVxuICB9XG4gIGNvbnN0IGZyb21SZXF1ZXN0ID0gcmVxdWVzdD8uaGVhZGVycy5nZXQoXCJ4LWZvcndhcmRlZC1ob3N0XCIpO1xuICBjb25zdCBmcm9tUmVxdWVzdFByb3RvID0gcmVxdWVzdD8uaGVhZGVycy5nZXQoXCJ4LWZvcndhcmRlZC1wcm90b1wiKTtcbiAgaWYgKGZyb21SZXF1ZXN0ICYmIGZyb21SZXF1ZXN0UHJvdG8pIHtcbiAgICByZXR1cm4gd2l0aFBhdGgoYCR7ZnJvbVJlcXVlc3RQcm90b306Ly8ke2Zyb21SZXF1ZXN0fWAsIHBhdGgpO1xuICB9XG4gIGlmIChyZXF1ZXN0KSB7XG4gICAgY29uc3QgdXJsMiA9IGdldE9yaWdpbihyZXF1ZXN0LnVybCk7XG4gICAgaWYgKCF1cmwyKSB7XG4gICAgICB0aHJvdyBuZXcgQmV0dGVyQXV0aEVycm9yKFxuICAgICAgICBcIkNvdWxkIG5vdCBnZXQgb3JpZ2luIGZyb20gcmVxdWVzdC4gUGxlYXNlIHByb3ZpZGUgYSB2YWxpZCBiYXNlIFVSTC5cIlxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHdpdGhQYXRoKHVybDIsIHBhdGgpO1xuICB9XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5sb2NhdGlvbikge1xuICAgIHJldHVybiB3aXRoUGF0aCh3aW5kb3cubG9jYXRpb24ub3JpZ2luLCBwYXRoKTtcbiAgfVxuICByZXR1cm4gdm9pZCAwO1xufVxuZnVuY3Rpb24gZ2V0T3JpZ2luKHVybCkge1xuICB0cnkge1xuICAgIGNvbnN0IHBhcnNlZFVybCA9IG5ldyBVUkwodXJsKTtcbiAgICByZXR1cm4gcGFyc2VkVXJsLm9yaWdpbjtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0UHJvdG9jb2wodXJsKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgcGFyc2VkVXJsID0gbmV3IFVSTCh1cmwpO1xuICAgIHJldHVybiBwYXJzZWRVcmwucHJvdG9jb2w7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldEhvc3QodXJsKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgcGFyc2VkVXJsID0gbmV3IFVSTCh1cmwpO1xuICAgIHJldHVybiBwYXJzZWRVcmwuaG9zdDtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG59XG5cbmV4cG9ydCB7IGdldEJhc2VVUkwgYXMgYSwgZ2V0SG9zdCBhcyBiLCBnZXRQcm90b2NvbCBhcyBjLCBnZXRPcmlnaW4gYXMgZyB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/better-auth/dist/shared/better-auth.BRFtaovt.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/better-auth/dist/shared/better-auth.BYWGbmZ5.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.BYWGbmZ5.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   u: () => (/* binding */ useAuthQuery)\n/* harmony export */ });\n/* harmony import */ var nanostores__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! nanostores */ \"(ssr)/./node_modules/nanostores/atom/index.js\");\n/* harmony import */ var nanostores__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! nanostores */ \"(ssr)/./node_modules/nanostores/lifecycle/index.js\");\n\n\nconst isServer = typeof window === \"undefined\";\nconst useAuthQuery = (initializedAtom, path, $fetch, options) => {\n  const value = (0,nanostores__WEBPACK_IMPORTED_MODULE_0__.atom)({\n    data: null,\n    error: null,\n    isPending: true,\n    isRefetching: false,\n    refetch: (queryParams) => {\n      return fn(queryParams);\n    }\n  });\n  const fn = (queryParams) => {\n    const opts = typeof options === \"function\" ? options({\n      data: value.get().data,\n      error: value.get().error,\n      isPending: value.get().isPending\n    }) : options;\n    $fetch(path, {\n      ...opts,\n      query: {\n        ...opts?.query,\n        ...queryParams?.query\n      },\n      async onSuccess(context) {\n        value.set({\n          data: context.data,\n          error: null,\n          isPending: false,\n          isRefetching: false,\n          refetch: value.value.refetch\n        });\n        await opts?.onSuccess?.(context);\n      },\n      async onError(context) {\n        const { request } = context;\n        const retryAttempts = typeof request.retry === \"number\" ? request.retry : request.retry?.attempts;\n        const retryAttempt = request.retryAttempt || 0;\n        if (retryAttempts && retryAttempt < retryAttempts) return;\n        value.set({\n          error: context.error,\n          data: null,\n          isPending: false,\n          isRefetching: false,\n          refetch: value.value.refetch\n        });\n        await opts?.onError?.(context);\n      },\n      async onRequest(context) {\n        const currentValue = value.get();\n        value.set({\n          isPending: currentValue.data === null,\n          data: currentValue.data,\n          error: null,\n          isRefetching: true,\n          refetch: value.value.refetch\n        });\n        await opts?.onRequest?.(context);\n      }\n    }).catch((error) => {\n      value.set({\n        error,\n        data: null,\n        isPending: false,\n        isRefetching: false,\n        refetch: value.value.refetch\n      });\n    });\n  };\n  initializedAtom = Array.isArray(initializedAtom) ? initializedAtom : [initializedAtom];\n  let isMounted = false;\n  for (const initAtom of initializedAtom) {\n    initAtom.subscribe(() => {\n      if (isServer) {\n        return;\n      }\n      if (isMounted) {\n        fn();\n      } else {\n        (0,nanostores__WEBPACK_IMPORTED_MODULE_1__.onMount)(value, () => {\n          const timeoutId = setTimeout(() => {\n            if (!isMounted) {\n              fn();\n              isMounted = true;\n            }\n          }, 0);\n          return () => {\n            value.off();\n            initAtom.off();\n            clearTimeout(timeoutId);\n          };\n        });\n      }\n    });\n  }\n  return value;\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguQllXR2JtWjUubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUEyQzs7QUFFM0M7QUFDQTtBQUNBLGdCQUFnQixnREFBSTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxPQUFPO0FBQ1A7QUFDQSxnQkFBZ0IsVUFBVTtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1IsUUFBUSxtREFBTztBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRTZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXV0b3BsYW5jYW0vLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguQllXR2JtWjUubWpzPzY2MDQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXRvbSwgb25Nb3VudCB9IGZyb20gJ25hbm9zdG9yZXMnO1xuXG5jb25zdCBpc1NlcnZlciA9IHR5cGVvZiB3aW5kb3cgPT09IFwidW5kZWZpbmVkXCI7XG5jb25zdCB1c2VBdXRoUXVlcnkgPSAoaW5pdGlhbGl6ZWRBdG9tLCBwYXRoLCAkZmV0Y2gsIG9wdGlvbnMpID0+IHtcbiAgY29uc3QgdmFsdWUgPSBhdG9tKHtcbiAgICBkYXRhOiBudWxsLFxuICAgIGVycm9yOiBudWxsLFxuICAgIGlzUGVuZGluZzogdHJ1ZSxcbiAgICBpc1JlZmV0Y2hpbmc6IGZhbHNlLFxuICAgIHJlZmV0Y2g6IChxdWVyeVBhcmFtcykgPT4ge1xuICAgICAgcmV0dXJuIGZuKHF1ZXJ5UGFyYW1zKTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBmbiA9IChxdWVyeVBhcmFtcykgPT4ge1xuICAgIGNvbnN0IG9wdHMgPSB0eXBlb2Ygb3B0aW9ucyA9PT0gXCJmdW5jdGlvblwiID8gb3B0aW9ucyh7XG4gICAgICBkYXRhOiB2YWx1ZS5nZXQoKS5kYXRhLFxuICAgICAgZXJyb3I6IHZhbHVlLmdldCgpLmVycm9yLFxuICAgICAgaXNQZW5kaW5nOiB2YWx1ZS5nZXQoKS5pc1BlbmRpbmdcbiAgICB9KSA6IG9wdGlvbnM7XG4gICAgJGZldGNoKHBhdGgsIHtcbiAgICAgIC4uLm9wdHMsXG4gICAgICBxdWVyeToge1xuICAgICAgICAuLi5vcHRzPy5xdWVyeSxcbiAgICAgICAgLi4ucXVlcnlQYXJhbXM/LnF1ZXJ5XG4gICAgICB9LFxuICAgICAgYXN5bmMgb25TdWNjZXNzKGNvbnRleHQpIHtcbiAgICAgICAgdmFsdWUuc2V0KHtcbiAgICAgICAgICBkYXRhOiBjb250ZXh0LmRhdGEsXG4gICAgICAgICAgZXJyb3I6IG51bGwsXG4gICAgICAgICAgaXNQZW5kaW5nOiBmYWxzZSxcbiAgICAgICAgICBpc1JlZmV0Y2hpbmc6IGZhbHNlLFxuICAgICAgICAgIHJlZmV0Y2g6IHZhbHVlLnZhbHVlLnJlZmV0Y2hcbiAgICAgICAgfSk7XG4gICAgICAgIGF3YWl0IG9wdHM/Lm9uU3VjY2Vzcz8uKGNvbnRleHQpO1xuICAgICAgfSxcbiAgICAgIGFzeW5jIG9uRXJyb3IoY29udGV4dCkge1xuICAgICAgICBjb25zdCB7IHJlcXVlc3QgfSA9IGNvbnRleHQ7XG4gICAgICAgIGNvbnN0IHJldHJ5QXR0ZW1wdHMgPSB0eXBlb2YgcmVxdWVzdC5yZXRyeSA9PT0gXCJudW1iZXJcIiA/IHJlcXVlc3QucmV0cnkgOiByZXF1ZXN0LnJldHJ5Py5hdHRlbXB0cztcbiAgICAgICAgY29uc3QgcmV0cnlBdHRlbXB0ID0gcmVxdWVzdC5yZXRyeUF0dGVtcHQgfHwgMDtcbiAgICAgICAgaWYgKHJldHJ5QXR0ZW1wdHMgJiYgcmV0cnlBdHRlbXB0IDwgcmV0cnlBdHRlbXB0cykgcmV0dXJuO1xuICAgICAgICB2YWx1ZS5zZXQoe1xuICAgICAgICAgIGVycm9yOiBjb250ZXh0LmVycm9yLFxuICAgICAgICAgIGRhdGE6IG51bGwsXG4gICAgICAgICAgaXNQZW5kaW5nOiBmYWxzZSxcbiAgICAgICAgICBpc1JlZmV0Y2hpbmc6IGZhbHNlLFxuICAgICAgICAgIHJlZmV0Y2g6IHZhbHVlLnZhbHVlLnJlZmV0Y2hcbiAgICAgICAgfSk7XG4gICAgICAgIGF3YWl0IG9wdHM/Lm9uRXJyb3I/Lihjb250ZXh0KTtcbiAgICAgIH0sXG4gICAgICBhc3luYyBvblJlcXVlc3QoY29udGV4dCkge1xuICAgICAgICBjb25zdCBjdXJyZW50VmFsdWUgPSB2YWx1ZS5nZXQoKTtcbiAgICAgICAgdmFsdWUuc2V0KHtcbiAgICAgICAgICBpc1BlbmRpbmc6IGN1cnJlbnRWYWx1ZS5kYXRhID09PSBudWxsLFxuICAgICAgICAgIGRhdGE6IGN1cnJlbnRWYWx1ZS5kYXRhLFxuICAgICAgICAgIGVycm9yOiBudWxsLFxuICAgICAgICAgIGlzUmVmZXRjaGluZzogdHJ1ZSxcbiAgICAgICAgICByZWZldGNoOiB2YWx1ZS52YWx1ZS5yZWZldGNoXG4gICAgICAgIH0pO1xuICAgICAgICBhd2FpdCBvcHRzPy5vblJlcXVlc3Q/Lihjb250ZXh0KTtcbiAgICAgIH1cbiAgICB9KS5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgIHZhbHVlLnNldCh7XG4gICAgICAgIGVycm9yLFxuICAgICAgICBkYXRhOiBudWxsLFxuICAgICAgICBpc1BlbmRpbmc6IGZhbHNlLFxuICAgICAgICBpc1JlZmV0Y2hpbmc6IGZhbHNlLFxuICAgICAgICByZWZldGNoOiB2YWx1ZS52YWx1ZS5yZWZldGNoXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcbiAgaW5pdGlhbGl6ZWRBdG9tID0gQXJyYXkuaXNBcnJheShpbml0aWFsaXplZEF0b20pID8gaW5pdGlhbGl6ZWRBdG9tIDogW2luaXRpYWxpemVkQXRvbV07XG4gIGxldCBpc01vdW50ZWQgPSBmYWxzZTtcbiAgZm9yIChjb25zdCBpbml0QXRvbSBvZiBpbml0aWFsaXplZEF0b20pIHtcbiAgICBpbml0QXRvbS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgaWYgKGlzU2VydmVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChpc01vdW50ZWQpIHtcbiAgICAgICAgZm4oKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9uTW91bnQodmFsdWUsICgpID0+IHtcbiAgICAgICAgICBjb25zdCB0aW1lb3V0SWQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIGlmICghaXNNb3VudGVkKSB7XG4gICAgICAgICAgICAgIGZuKCk7XG4gICAgICAgICAgICAgIGlzTW91bnRlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIHZhbHVlLm9mZigpO1xuICAgICAgICAgICAgaW5pdEF0b20ub2ZmKCk7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dElkKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59O1xuXG5leHBvcnQgeyB1c2VBdXRoUXVlcnkgYXMgdSB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/better-auth/dist/shared/better-auth.BYWGbmZ5.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/better-auth/dist/shared/better-auth.CiuwFiHM.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.CiuwFiHM.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   E: () => (/* binding */ ENV),\n/* harmony export */   a: () => (/* binding */ isDevelopment),\n/* harmony export */   b: () => (/* binding */ isProduction),\n/* harmony export */   c: () => (/* binding */ getBooleanEnvVar),\n/* harmony export */   e: () => (/* binding */ env),\n/* harmony export */   g: () => (/* binding */ getEnvVar),\n/* harmony export */   i: () => (/* binding */ isTest)\n/* harmony export */ });\nconst _envShim = /* @__PURE__ */ Object.create(null);\nconst _getEnv = (useShim) => globalThis.process?.env || //@ts-expect-error\nglobalThis.Deno?.env.toObject() || //@ts-expect-error\nglobalThis.__env__ || (useShim ? _envShim : globalThis);\nconst env = new Proxy(_envShim, {\n  get(_, prop) {\n    const env2 = _getEnv();\n    return env2[prop] ?? _envShim[prop];\n  },\n  has(_, prop) {\n    const env2 = _getEnv();\n    return prop in env2 || prop in _envShim;\n  },\n  set(_, prop, value) {\n    const env2 = _getEnv(true);\n    env2[prop] = value;\n    return true;\n  },\n  deleteProperty(_, prop) {\n    if (!prop) {\n      return false;\n    }\n    const env2 = _getEnv(true);\n    delete env2[prop];\n    return true;\n  },\n  ownKeys() {\n    const env2 = _getEnv(true);\n    return Object.keys(env2);\n  }\n});\nfunction toBoolean(val) {\n  return val ? val !== \"false\" : false;\n}\nconst nodeENV = typeof process !== \"undefined\" && process.env && \"development\" || \"\";\nconst isProduction = nodeENV === \"production\";\nconst isDevelopment = nodeENV === \"dev\" || nodeENV === \"development\";\nconst isTest = () => nodeENV === \"test\" || toBoolean(env.TEST);\nfunction getEnvVar(key, fallback) {\n  if (typeof process !== \"undefined\" && process.env) {\n    return process.env[key] ?? fallback;\n  }\n  if (typeof Deno !== \"undefined\") {\n    return Deno.env.get(key) ?? fallback;\n  }\n  if (typeof Bun !== \"undefined\") {\n    return Bun.env[key] ?? fallback;\n  }\n  return fallback;\n}\nfunction getBooleanEnvVar(key, fallback = true) {\n  const value = getEnvVar(key);\n  if (!value) return fallback;\n  return value !== \"0\" && value.toLowerCase() !== \"false\" && value !== \"\";\n}\nconst ENV = {\n  get BETTER_AUTH_TELEMETRY_ENDPOINT() {\n    return getEnvVar(\n      \"BETTER_AUTH_TELEMETRY_ENDPOINT\",\n      \"https://telemetry.better-auth.com/v1/track\"\n    );\n  }\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguQ2l1d0ZpSE0ubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxpRUFBaUUsYUFBb0I7QUFDckY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRXlIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXV0b3BsYW5jYW0vLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguQ2l1d0ZpSE0ubWpzPzlkY2MiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgX2VudlNoaW0gPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbmNvbnN0IF9nZXRFbnYgPSAodXNlU2hpbSkgPT4gZ2xvYmFsVGhpcy5wcm9jZXNzPy5lbnYgfHwgLy9AdHMtZXhwZWN0LWVycm9yXG5nbG9iYWxUaGlzLkRlbm8/LmVudi50b09iamVjdCgpIHx8IC8vQHRzLWV4cGVjdC1lcnJvclxuZ2xvYmFsVGhpcy5fX2Vudl9fIHx8ICh1c2VTaGltID8gX2VudlNoaW0gOiBnbG9iYWxUaGlzKTtcbmNvbnN0IGVudiA9IG5ldyBQcm94eShfZW52U2hpbSwge1xuICBnZXQoXywgcHJvcCkge1xuICAgIGNvbnN0IGVudjIgPSBfZ2V0RW52KCk7XG4gICAgcmV0dXJuIGVudjJbcHJvcF0gPz8gX2VudlNoaW1bcHJvcF07XG4gIH0sXG4gIGhhcyhfLCBwcm9wKSB7XG4gICAgY29uc3QgZW52MiA9IF9nZXRFbnYoKTtcbiAgICByZXR1cm4gcHJvcCBpbiBlbnYyIHx8IHByb3AgaW4gX2VudlNoaW07XG4gIH0sXG4gIHNldChfLCBwcm9wLCB2YWx1ZSkge1xuICAgIGNvbnN0IGVudjIgPSBfZ2V0RW52KHRydWUpO1xuICAgIGVudjJbcHJvcF0gPSB2YWx1ZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcbiAgZGVsZXRlUHJvcGVydHkoXywgcHJvcCkge1xuICAgIGlmICghcHJvcCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCBlbnYyID0gX2dldEVudih0cnVlKTtcbiAgICBkZWxldGUgZW52Mltwcm9wXTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcbiAgb3duS2V5cygpIHtcbiAgICBjb25zdCBlbnYyID0gX2dldEVudih0cnVlKTtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMoZW52Mik7XG4gIH1cbn0pO1xuZnVuY3Rpb24gdG9Cb29sZWFuKHZhbCkge1xuICByZXR1cm4gdmFsID8gdmFsICE9PSBcImZhbHNlXCIgOiBmYWxzZTtcbn1cbmNvbnN0IG5vZGVFTlYgPSB0eXBlb2YgcHJvY2VzcyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBwcm9jZXNzLmVudiAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViB8fCBcIlwiO1xuY29uc3QgaXNQcm9kdWN0aW9uID0gbm9kZUVOViA9PT0gXCJwcm9kdWN0aW9uXCI7XG5jb25zdCBpc0RldmVsb3BtZW50ID0gbm9kZUVOViA9PT0gXCJkZXZcIiB8fCBub2RlRU5WID09PSBcImRldmVsb3BtZW50XCI7XG5jb25zdCBpc1Rlc3QgPSAoKSA9PiBub2RlRU5WID09PSBcInRlc3RcIiB8fCB0b0Jvb2xlYW4oZW52LlRFU1QpO1xuZnVuY3Rpb24gZ2V0RW52VmFyKGtleSwgZmFsbGJhY2spIHtcbiAgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSBcInVuZGVmaW5lZFwiICYmIHByb2Nlc3MuZW52KSB7XG4gICAgcmV0dXJuIHByb2Nlc3MuZW52W2tleV0gPz8gZmFsbGJhY2s7XG4gIH1cbiAgaWYgKHR5cGVvZiBEZW5vICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIERlbm8uZW52LmdldChrZXkpID8/IGZhbGxiYWNrO1xuICB9XG4gIGlmICh0eXBlb2YgQnVuICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIEJ1bi5lbnZba2V5XSA/PyBmYWxsYmFjaztcbiAgfVxuICByZXR1cm4gZmFsbGJhY2s7XG59XG5mdW5jdGlvbiBnZXRCb29sZWFuRW52VmFyKGtleSwgZmFsbGJhY2sgPSB0cnVlKSB7XG4gIGNvbnN0IHZhbHVlID0gZ2V0RW52VmFyKGtleSk7XG4gIGlmICghdmFsdWUpIHJldHVybiBmYWxsYmFjaztcbiAgcmV0dXJuIHZhbHVlICE9PSBcIjBcIiAmJiB2YWx1ZS50b0xvd2VyQ2FzZSgpICE9PSBcImZhbHNlXCIgJiYgdmFsdWUgIT09IFwiXCI7XG59XG5jb25zdCBFTlYgPSB7XG4gIGdldCBCRVRURVJfQVVUSF9URUxFTUVUUllfRU5EUE9JTlQoKSB7XG4gICAgcmV0dXJuIGdldEVudlZhcihcbiAgICAgIFwiQkVUVEVSX0FVVEhfVEVMRU1FVFJZX0VORFBPSU5UXCIsXG4gICAgICBcImh0dHBzOi8vdGVsZW1ldHJ5LmJldHRlci1hdXRoLmNvbS92MS90cmFja1wiXG4gICAgKTtcbiAgfVxufTtcblxuZXhwb3J0IHsgRU5WIGFzIEUsIGlzRGV2ZWxvcG1lbnQgYXMgYSwgaXNQcm9kdWN0aW9uIGFzIGIsIGdldEJvb2xlYW5FbnZWYXIgYXMgYywgZW52IGFzIGUsIGdldEVudlZhciBhcyBnLCBpc1Rlc3QgYXMgaSB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/better-auth/dist/shared/better-auth.CiuwFiHM.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/better-auth/dist/shared/better-auth.DLt6eN7D.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.DLt6eN7D.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   c: () => (/* binding */ createDynamicPathProxy),\n/* harmony export */   g: () => (/* binding */ getClientConfig)\n/* harmony export */ });\n/* harmony import */ var _better_fetch_fetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @better-fetch/fetch */ \"(ssr)/./node_modules/@better-fetch/fetch/dist/index.js\");\n/* harmony import */ var _better_auth_BRFtaovt_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./better-auth.BRFtaovt.mjs */ \"(ssr)/./node_modules/better-auth/dist/shared/better-auth.BRFtaovt.mjs\");\n/* harmony import */ var nanostores__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! nanostores */ \"(ssr)/./node_modules/nanostores/atom/index.js\");\n/* harmony import */ var _better_auth_BYWGbmZ5_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./better-auth.BYWGbmZ5.mjs */ \"(ssr)/./node_modules/better-auth/dist/shared/better-auth.BYWGbmZ5.mjs\");\n/* harmony import */ var _better_auth_msGOU0m9_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./better-auth.msGOU0m9.mjs */ \"(ssr)/./node_modules/better-auth/dist/shared/better-auth.msGOU0m9.mjs\");\n\n\n\n\n\n\nconst redirectPlugin = {\n  id: \"redirect\",\n  name: \"Redirect\",\n  hooks: {\n    onSuccess(context) {\n      if (context.data?.url && context.data?.redirect) {\n        if (typeof window !== \"undefined\" && window.location) {\n          if (window.location) {\n            try {\n              window.location.href = context.data.url;\n            } catch {\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nfunction getSessionAtom($fetch) {\n  const $signal = (0,nanostores__WEBPACK_IMPORTED_MODULE_4__.atom)(false);\n  const session = (0,_better_auth_BYWGbmZ5_mjs__WEBPACK_IMPORTED_MODULE_2__.u)($signal, \"/get-session\", $fetch, {\n    method: \"GET\"\n  });\n  return {\n    session,\n    $sessionSignal: $signal\n  };\n}\n\nconst getClientConfig = (options, loadEnv) => {\n  const isCredentialsSupported = \"credentials\" in Request.prototype;\n  const baseURL = (0,_better_auth_BRFtaovt_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(options?.baseURL, options?.basePath, void 0, loadEnv) ?? \"/api/auth\";\n  const pluginsFetchPlugins = options?.plugins?.flatMap((plugin) => plugin.fetchPlugins).filter((pl) => pl !== void 0) || [];\n  const lifeCyclePlugin = {\n    id: \"lifecycle-hooks\",\n    name: \"lifecycle-hooks\",\n    hooks: {\n      onSuccess: options?.fetchOptions?.onSuccess,\n      onError: options?.fetchOptions?.onError,\n      onRequest: options?.fetchOptions?.onRequest,\n      onResponse: options?.fetchOptions?.onResponse\n    }\n  };\n  const { onSuccess, onError, onRequest, onResponse, ...restOfFetchOptions } = options?.fetchOptions || {};\n  const $fetch = (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_0__.createFetch)({\n    baseURL,\n    ...isCredentialsSupported ? { credentials: \"include\" } : {},\n    method: \"GET\",\n    jsonParser(text) {\n      if (!text) {\n        return null;\n      }\n      return (0,_better_auth_msGOU0m9_mjs__WEBPACK_IMPORTED_MODULE_3__.p)(text, {\n        strict: false\n      });\n    },\n    customFetchImpl: fetch,\n    ...restOfFetchOptions,\n    plugins: [\n      lifeCyclePlugin,\n      ...restOfFetchOptions.plugins || [],\n      ...options?.disableDefaultFetchPlugins ? [] : [redirectPlugin],\n      ...pluginsFetchPlugins\n    ]\n  });\n  const { $sessionSignal, session } = getSessionAtom($fetch);\n  const plugins = options?.plugins || [];\n  let pluginsActions = {};\n  let pluginsAtoms = {\n    $sessionSignal,\n    session\n  };\n  let pluginPathMethods = {\n    \"/sign-out\": \"POST\",\n    \"/revoke-sessions\": \"POST\",\n    \"/revoke-other-sessions\": \"POST\",\n    \"/delete-user\": \"POST\"\n  };\n  const atomListeners = [\n    {\n      signal: \"$sessionSignal\",\n      matcher(path) {\n        return path === \"/sign-out\" || path === \"/update-user\" || path.startsWith(\"/sign-in\") || path.startsWith(\"/sign-up\") || path === \"/delete-user\" || path === \"/verify-email\";\n      }\n    }\n  ];\n  for (const plugin of plugins) {\n    if (plugin.getAtoms) {\n      Object.assign(pluginsAtoms, plugin.getAtoms?.($fetch));\n    }\n    if (plugin.pathMethods) {\n      Object.assign(pluginPathMethods, plugin.pathMethods);\n    }\n    if (plugin.atomListeners) {\n      atomListeners.push(...plugin.atomListeners);\n    }\n  }\n  const $store = {\n    notify: (signal) => {\n      pluginsAtoms[signal].set(\n        !pluginsAtoms[signal].get()\n      );\n    },\n    listen: (signal, listener) => {\n      pluginsAtoms[signal].subscribe(listener);\n    },\n    atoms: pluginsAtoms\n  };\n  for (const plugin of plugins) {\n    if (plugin.getActions) {\n      Object.assign(\n        pluginsActions,\n        plugin.getActions?.($fetch, $store, options)\n      );\n    }\n  }\n  return {\n    get baseURL() {\n      return baseURL;\n    },\n    pluginsActions,\n    pluginsAtoms,\n    pluginPathMethods,\n    atomListeners,\n    $fetch,\n    $store\n  };\n};\n\nfunction isAtom(value) {\n  return typeof value === \"object\" && value !== null && \"get\" in value && typeof value.get === \"function\" && \"lc\" in value && typeof value.lc === \"number\";\n}\n\nfunction getMethod(path, knownPathMethods, args) {\n  const method = knownPathMethods[path];\n  const { fetchOptions, query, ...body } = args || {};\n  if (method) {\n    return method;\n  }\n  if (fetchOptions?.method) {\n    return fetchOptions.method;\n  }\n  if (body && Object.keys(body).length > 0) {\n    return \"POST\";\n  }\n  return \"GET\";\n}\nfunction createDynamicPathProxy(routes, client, knownPathMethods, atoms, atomListeners) {\n  function createProxy(path = []) {\n    return new Proxy(function() {\n    }, {\n      get(_, prop) {\n        if (typeof prop !== \"string\") {\n          return void 0;\n        }\n        if (prop === \"then\" || prop === \"catch\" || prop === \"finally\") {\n          return void 0;\n        }\n        const fullPath = [...path, prop];\n        let current = routes;\n        for (const segment of fullPath) {\n          if (current && typeof current === \"object\" && segment in current) {\n            current = current[segment];\n          } else {\n            current = void 0;\n            break;\n          }\n        }\n        if (typeof current === \"function\") {\n          return current;\n        }\n        if (isAtom(current)) {\n          return current;\n        }\n        return createProxy(fullPath);\n      },\n      apply: async (_, __, args) => {\n        const routePath = \"/\" + path.map(\n          (segment) => segment.replace(/[A-Z]/g, (letter) => `-${letter.toLowerCase()}`)\n        ).join(\"/\");\n        const arg = args[0] || {};\n        const fetchOptions = args[1] || {};\n        const { query, fetchOptions: argFetchOptions, ...body } = arg;\n        const options = {\n          ...fetchOptions,\n          ...argFetchOptions\n        };\n        const method = getMethod(routePath, knownPathMethods, arg);\n        return await client(routePath, {\n          ...options,\n          body: method === \"GET\" ? void 0 : {\n            ...body,\n            ...options?.body || {}\n          },\n          query: query || options?.query,\n          method,\n          async onSuccess(context) {\n            await options?.onSuccess?.(context);\n            const matches = atomListeners?.find((s) => s.matcher(routePath));\n            if (!matches) return;\n            const signal = atoms[matches.signal];\n            if (!signal) return;\n            const val = signal.get();\n            setTimeout(() => {\n              signal.set(!val);\n            }, 10);\n          }\n        });\n      }\n    });\n  }\n  return createProxy();\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/better-auth/dist/shared/better-auth.DLt6eN7D.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   B: () => (/* binding */ BetterAuthError),\n/* harmony export */   M: () => (/* binding */ MissingDependencyError)\n/* harmony export */ });\nclass BetterAuthError extends Error {\n  constructor(message, cause) {\n    super(message);\n    this.name = \"BetterAuthError\";\n    this.message = message;\n    this.cause = cause;\n    this.stack = \"\";\n  }\n}\nclass MissingDependencyError extends BetterAuthError {\n  constructor(pkgName) {\n    super(\n      `The package \"${pkgName}\" is required. Make sure it is installed.`,\n      pkgName\n    );\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguRGR6U0pmLW4ubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLFFBQVE7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7O0FBRTZEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXV0b3BsYW5jYW0vLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguRGR6U0pmLW4ubWpzP2U3OTgiXSwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgQmV0dGVyQXV0aEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBjYXVzZSkge1xuICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgIHRoaXMubmFtZSA9IFwiQmV0dGVyQXV0aEVycm9yXCI7XG4gICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgICB0aGlzLmNhdXNlID0gY2F1c2U7XG4gICAgdGhpcy5zdGFjayA9IFwiXCI7XG4gIH1cbn1cbmNsYXNzIE1pc3NpbmdEZXBlbmRlbmN5RXJyb3IgZXh0ZW5kcyBCZXR0ZXJBdXRoRXJyb3Ige1xuICBjb25zdHJ1Y3Rvcihwa2dOYW1lKSB7XG4gICAgc3VwZXIoXG4gICAgICBgVGhlIHBhY2thZ2UgXCIke3BrZ05hbWV9XCIgaXMgcmVxdWlyZWQuIE1ha2Ugc3VyZSBpdCBpcyBpbnN0YWxsZWQuYCxcbiAgICAgIHBrZ05hbWVcbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCB7IEJldHRlckF1dGhFcnJvciBhcyBCLCBNaXNzaW5nRGVwZW5kZW5jeUVycm9yIGFzIE0gfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/better-auth/dist/shared/better-auth.msGOU0m9.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.msGOU0m9.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   p: () => (/* binding */ parseJSON)\n/* harmony export */ });\nconst PROTO_POLLUTION_PATTERNS = {\n  proto: /\"(?:_|\\\\u0{2}5[Ff]){2}(?:p|\\\\u0{2}70)(?:r|\\\\u0{2}72)(?:o|\\\\u0{2}6[Ff])(?:t|\\\\u0{2}74)(?:o|\\\\u0{2}6[Ff])(?:_|\\\\u0{2}5[Ff]){2}\"\\s*:/,\n  constructor: /\"(?:c|\\\\u0063)(?:o|\\\\u006[Ff])(?:n|\\\\u006[Ee])(?:s|\\\\u0073)(?:t|\\\\u0074)(?:r|\\\\u0072)(?:u|\\\\u0075)(?:c|\\\\u0063)(?:t|\\\\u0074)(?:o|\\\\u006[Ff])(?:r|\\\\u0072)\"\\s*:/,\n  protoShort: /\"__proto__\"\\s*:/,\n  constructorShort: /\"constructor\"\\s*:/\n};\nconst JSON_SIGNATURE = /^\\s*[\"[{]|^\\s*-?\\d{1,16}(\\.\\d{1,17})?([Ee][+-]?\\d+)?\\s*$/;\nconst SPECIAL_VALUES = {\n  true: true,\n  false: false,\n  null: null,\n  undefined: void 0,\n  nan: Number.NaN,\n  infinity: Number.POSITIVE_INFINITY,\n  \"-infinity\": Number.NEGATIVE_INFINITY\n};\nconst ISO_DATE_REGEX = /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(?:\\.(\\d{1,7}))?(?:Z|([+-])(\\d{2}):(\\d{2}))$/;\nfunction isValidDate(date) {\n  return date instanceof Date && !isNaN(date.getTime());\n}\nfunction parseISODate(value) {\n  const match = ISO_DATE_REGEX.exec(value);\n  if (!match) return null;\n  const [\n    ,\n    year,\n    month,\n    day,\n    hour,\n    minute,\n    second,\n    ms,\n    offsetSign,\n    offsetHour,\n    offsetMinute\n  ] = match;\n  let date = new Date(\n    Date.UTC(\n      parseInt(year, 10),\n      parseInt(month, 10) - 1,\n      parseInt(day, 10),\n      parseInt(hour, 10),\n      parseInt(minute, 10),\n      parseInt(second, 10),\n      ms ? parseInt(ms.padEnd(3, \"0\"), 10) : 0\n    )\n  );\n  if (offsetSign) {\n    const offset = (parseInt(offsetHour, 10) * 60 + parseInt(offsetMinute, 10)) * (offsetSign === \"+\" ? -1 : 1);\n    date.setUTCMinutes(date.getUTCMinutes() + offset);\n  }\n  return isValidDate(date) ? date : null;\n}\nfunction betterJSONParse(value, options = {}) {\n  const {\n    strict = false,\n    warnings = false,\n    reviver,\n    parseDates = true\n  } = options;\n  if (typeof value !== \"string\") {\n    return value;\n  }\n  const trimmed = value.trim();\n  if (trimmed.length > 0 && trimmed[0] === '\"' && trimmed.endsWith('\"') && !trimmed.slice(1, -1).includes('\"')) {\n    return trimmed.slice(1, -1);\n  }\n  const lowerValue = trimmed.toLowerCase();\n  if (lowerValue.length <= 9 && lowerValue in SPECIAL_VALUES) {\n    return SPECIAL_VALUES[lowerValue];\n  }\n  if (!JSON_SIGNATURE.test(trimmed)) {\n    if (strict) {\n      throw new SyntaxError(\"[better-json] Invalid JSON\");\n    }\n    return value;\n  }\n  const hasProtoPattern = Object.entries(PROTO_POLLUTION_PATTERNS).some(\n    ([key, pattern]) => {\n      const matches = pattern.test(trimmed);\n      if (matches && warnings) {\n        console.warn(\n          `[better-json] Detected potential prototype pollution attempt using ${key} pattern`\n        );\n      }\n      return matches;\n    }\n  );\n  if (hasProtoPattern && strict) {\n    throw new Error(\n      \"[better-json] Potential prototype pollution attempt detected\"\n    );\n  }\n  try {\n    const secureReviver = (key, value2) => {\n      if (key === \"__proto__\" || key === \"constructor\" && value2 && typeof value2 === \"object\" && \"prototype\" in value2) {\n        if (warnings) {\n          console.warn(\n            `[better-json] Dropping \"${key}\" key to prevent prototype pollution`\n          );\n        }\n        return void 0;\n      }\n      if (parseDates && typeof value2 === \"string\") {\n        const date = parseISODate(value2);\n        if (date) {\n          return date;\n        }\n      }\n      return reviver ? reviver(key, value2) : value2;\n    };\n    return JSON.parse(trimmed, secureReviver);\n  } catch (error) {\n    if (strict) {\n      throw error;\n    }\n    return value;\n  }\n}\nfunction parseJSON(value, options = { strict: true }) {\n  return betterJSONParse(value, options);\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGgubXNHT1UwbTkubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBLHFCQUFxQixFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsYUFBYSxFQUFFLGFBQWEsRUFBRSxnQkFBZ0IsRUFBRSxhQUFhLEVBQUUsZ0JBQWdCLEVBQUUsT0FBTyxFQUFFO0FBQ3RJO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLFdBQVcsS0FBSyxNQUFNLEtBQUs7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxVQUFVLElBQUksa0JBQWtCLEVBQUUsTUFBTSxFQUFFO0FBQ2pIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0ZBQWdGLEtBQUs7QUFDckY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLElBQUk7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLGNBQWM7QUFDcEQ7QUFDQTs7QUFFMEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hdXRvcGxhbmNhbS8uL25vZGVfbW9kdWxlcy9iZXR0ZXItYXV0aC9kaXN0L3NoYXJlZC9iZXR0ZXItYXV0aC5tc0dPVTBtOS5tanM/Yzg3OCJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBQUk9UT19QT0xMVVRJT05fUEFUVEVSTlMgPSB7XG4gIHByb3RvOiAvXCIoPzpffFxcXFx1MHsyfTVbRmZdKXsyfSg/OnB8XFxcXHUwezJ9NzApKD86cnxcXFxcdTB7Mn03MikoPzpvfFxcXFx1MHsyfTZbRmZdKSg/OnR8XFxcXHUwezJ9NzQpKD86b3xcXFxcdTB7Mn02W0ZmXSkoPzpffFxcXFx1MHsyfTVbRmZdKXsyfVwiXFxzKjovLFxuICBjb25zdHJ1Y3RvcjogL1wiKD86Y3xcXFxcdTAwNjMpKD86b3xcXFxcdTAwNltGZl0pKD86bnxcXFxcdTAwNltFZV0pKD86c3xcXFxcdTAwNzMpKD86dHxcXFxcdTAwNzQpKD86cnxcXFxcdTAwNzIpKD86dXxcXFxcdTAwNzUpKD86Y3xcXFxcdTAwNjMpKD86dHxcXFxcdTAwNzQpKD86b3xcXFxcdTAwNltGZl0pKD86cnxcXFxcdTAwNzIpXCJcXHMqOi8sXG4gIHByb3RvU2hvcnQ6IC9cIl9fcHJvdG9fX1wiXFxzKjovLFxuICBjb25zdHJ1Y3RvclNob3J0OiAvXCJjb25zdHJ1Y3RvclwiXFxzKjovXG59O1xuY29uc3QgSlNPTl9TSUdOQVRVUkUgPSAvXlxccypbXCJbe118XlxccyotP1xcZHsxLDE2fShcXC5cXGR7MSwxN30pPyhbRWVdWystXT9cXGQrKT9cXHMqJC87XG5jb25zdCBTUEVDSUFMX1ZBTFVFUyA9IHtcbiAgdHJ1ZTogdHJ1ZSxcbiAgZmFsc2U6IGZhbHNlLFxuICBudWxsOiBudWxsLFxuICB1bmRlZmluZWQ6IHZvaWQgMCxcbiAgbmFuOiBOdW1iZXIuTmFOLFxuICBpbmZpbml0eTogTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLFxuICBcIi1pbmZpbml0eVwiOiBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFlcbn07XG5jb25zdCBJU09fREFURV9SRUdFWCA9IC9eKFxcZHs0fSktKFxcZHsyfSktKFxcZHsyfSlUKFxcZHsyfSk6KFxcZHsyfSk6KFxcZHsyfSkoPzpcXC4oXFxkezEsN30pKT8oPzpafChbKy1dKShcXGR7Mn0pOihcXGR7Mn0pKSQvO1xuZnVuY3Rpb24gaXNWYWxpZERhdGUoZGF0ZSkge1xuICByZXR1cm4gZGF0ZSBpbnN0YW5jZW9mIERhdGUgJiYgIWlzTmFOKGRhdGUuZ2V0VGltZSgpKTtcbn1cbmZ1bmN0aW9uIHBhcnNlSVNPRGF0ZSh2YWx1ZSkge1xuICBjb25zdCBtYXRjaCA9IElTT19EQVRFX1JFR0VYLmV4ZWModmFsdWUpO1xuICBpZiAoIW1hdGNoKSByZXR1cm4gbnVsbDtcbiAgY29uc3QgW1xuICAgICxcbiAgICB5ZWFyLFxuICAgIG1vbnRoLFxuICAgIGRheSxcbiAgICBob3VyLFxuICAgIG1pbnV0ZSxcbiAgICBzZWNvbmQsXG4gICAgbXMsXG4gICAgb2Zmc2V0U2lnbixcbiAgICBvZmZzZXRIb3VyLFxuICAgIG9mZnNldE1pbnV0ZVxuICBdID0gbWF0Y2g7XG4gIGxldCBkYXRlID0gbmV3IERhdGUoXG4gICAgRGF0ZS5VVEMoXG4gICAgICBwYXJzZUludCh5ZWFyLCAxMCksXG4gICAgICBwYXJzZUludChtb250aCwgMTApIC0gMSxcbiAgICAgIHBhcnNlSW50KGRheSwgMTApLFxuICAgICAgcGFyc2VJbnQoaG91ciwgMTApLFxuICAgICAgcGFyc2VJbnQobWludXRlLCAxMCksXG4gICAgICBwYXJzZUludChzZWNvbmQsIDEwKSxcbiAgICAgIG1zID8gcGFyc2VJbnQobXMucGFkRW5kKDMsIFwiMFwiKSwgMTApIDogMFxuICAgIClcbiAgKTtcbiAgaWYgKG9mZnNldFNpZ24pIHtcbiAgICBjb25zdCBvZmZzZXQgPSAocGFyc2VJbnQob2Zmc2V0SG91ciwgMTApICogNjAgKyBwYXJzZUludChvZmZzZXRNaW51dGUsIDEwKSkgKiAob2Zmc2V0U2lnbiA9PT0gXCIrXCIgPyAtMSA6IDEpO1xuICAgIGRhdGUuc2V0VVRDTWludXRlcyhkYXRlLmdldFVUQ01pbnV0ZXMoKSArIG9mZnNldCk7XG4gIH1cbiAgcmV0dXJuIGlzVmFsaWREYXRlKGRhdGUpID8gZGF0ZSA6IG51bGw7XG59XG5mdW5jdGlvbiBiZXR0ZXJKU09OUGFyc2UodmFsdWUsIG9wdGlvbnMgPSB7fSkge1xuICBjb25zdCB7XG4gICAgc3RyaWN0ID0gZmFsc2UsXG4gICAgd2FybmluZ3MgPSBmYWxzZSxcbiAgICByZXZpdmVyLFxuICAgIHBhcnNlRGF0ZXMgPSB0cnVlXG4gIH0gPSBvcHRpb25zO1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGNvbnN0IHRyaW1tZWQgPSB2YWx1ZS50cmltKCk7XG4gIGlmICh0cmltbWVkLmxlbmd0aCA+IDAgJiYgdHJpbW1lZFswXSA9PT0gJ1wiJyAmJiB0cmltbWVkLmVuZHNXaXRoKCdcIicpICYmICF0cmltbWVkLnNsaWNlKDEsIC0xKS5pbmNsdWRlcygnXCInKSkge1xuICAgIHJldHVybiB0cmltbWVkLnNsaWNlKDEsIC0xKTtcbiAgfVxuICBjb25zdCBsb3dlclZhbHVlID0gdHJpbW1lZC50b0xvd2VyQ2FzZSgpO1xuICBpZiAobG93ZXJWYWx1ZS5sZW5ndGggPD0gOSAmJiBsb3dlclZhbHVlIGluIFNQRUNJQUxfVkFMVUVTKSB7XG4gICAgcmV0dXJuIFNQRUNJQUxfVkFMVUVTW2xvd2VyVmFsdWVdO1xuICB9XG4gIGlmICghSlNPTl9TSUdOQVRVUkUudGVzdCh0cmltbWVkKSkge1xuICAgIGlmIChzdHJpY3QpIHtcbiAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcihcIltiZXR0ZXItanNvbl0gSW52YWxpZCBKU09OXCIpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgY29uc3QgaGFzUHJvdG9QYXR0ZXJuID0gT2JqZWN0LmVudHJpZXMoUFJPVE9fUE9MTFVUSU9OX1BBVFRFUk5TKS5zb21lKFxuICAgIChba2V5LCBwYXR0ZXJuXSkgPT4ge1xuICAgICAgY29uc3QgbWF0Y2hlcyA9IHBhdHRlcm4udGVzdCh0cmltbWVkKTtcbiAgICAgIGlmIChtYXRjaGVzICYmIHdhcm5pbmdzKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICBgW2JldHRlci1qc29uXSBEZXRlY3RlZCBwb3RlbnRpYWwgcHJvdG90eXBlIHBvbGx1dGlvbiBhdHRlbXB0IHVzaW5nICR7a2V5fSBwYXR0ZXJuYFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1hdGNoZXM7XG4gICAgfVxuICApO1xuICBpZiAoaGFzUHJvdG9QYXR0ZXJuICYmIHN0cmljdCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIFwiW2JldHRlci1qc29uXSBQb3RlbnRpYWwgcHJvdG90eXBlIHBvbGx1dGlvbiBhdHRlbXB0IGRldGVjdGVkXCJcbiAgICApO1xuICB9XG4gIHRyeSB7XG4gICAgY29uc3Qgc2VjdXJlUmV2aXZlciA9IChrZXksIHZhbHVlMikgPT4ge1xuICAgICAgaWYgKGtleSA9PT0gXCJfX3Byb3RvX19cIiB8fCBrZXkgPT09IFwiY29uc3RydWN0b3JcIiAmJiB2YWx1ZTIgJiYgdHlwZW9mIHZhbHVlMiA9PT0gXCJvYmplY3RcIiAmJiBcInByb3RvdHlwZVwiIGluIHZhbHVlMikge1xuICAgICAgICBpZiAod2FybmluZ3MpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICBgW2JldHRlci1qc29uXSBEcm9wcGluZyBcIiR7a2V5fVwiIGtleSB0byBwcmV2ZW50IHByb3RvdHlwZSBwb2xsdXRpb25gXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgfVxuICAgICAgaWYgKHBhcnNlRGF0ZXMgJiYgdHlwZW9mIHZhbHVlMiA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBjb25zdCBkYXRlID0gcGFyc2VJU09EYXRlKHZhbHVlMik7XG4gICAgICAgIGlmIChkYXRlKSB7XG4gICAgICAgICAgcmV0dXJuIGRhdGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXZpdmVyID8gcmV2aXZlcihrZXksIHZhbHVlMikgOiB2YWx1ZTI7XG4gICAgfTtcbiAgICByZXR1cm4gSlNPTi5wYXJzZSh0cmltbWVkLCBzZWN1cmVSZXZpdmVyKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpZiAoc3RyaWN0KSB7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG59XG5mdW5jdGlvbiBwYXJzZUpTT04odmFsdWUsIG9wdGlvbnMgPSB7IHN0cmljdDogdHJ1ZSB9KSB7XG4gIHJldHVybiBiZXR0ZXJKU09OUGFyc2UodmFsdWUsIG9wdGlvbnMpO1xufVxuXG5leHBvcnQgeyBwYXJzZUpTT04gYXMgcCB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/better-auth/dist/shared/better-auth.msGOU0m9.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/adapters/drizzle-adapter/index.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/better-auth/dist/adapters/drizzle-adapter/index.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   drizzleAdapter: () => (/* binding */ drizzleAdapter)\n/* harmony export */ });\n/* harmony import */ var drizzle_orm__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! drizzle-orm */ \"(rsc)/./node_modules/drizzle-orm/sql/sql.js\");\n/* harmony import */ var drizzle_orm__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! drizzle-orm */ \"(rsc)/./node_modules/drizzle-orm/sql/expressions/select.js\");\n/* harmony import */ var drizzle_orm__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! drizzle-orm */ \"(rsc)/./node_modules/drizzle-orm/sql/expressions/conditions.js\");\n/* harmony import */ var drizzle_orm__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! drizzle-orm */ \"(rsc)/./node_modules/drizzle-orm/sql/functions/aggregate.js\");\n/* harmony import */ var _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../shared/better-auth.DdzSJf-n.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs\");\n/* harmony import */ var _shared_better_auth_BvvYEWCP_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../shared/better-auth.BvvYEWCP.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.BvvYEWCP.mjs\");\n/* harmony import */ var _shared_better_auth_BTrSrKsi_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../shared/better-auth.BTrSrKsi.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.BTrSrKsi.mjs\");\n/* harmony import */ var _shared_better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../shared/better-auth.DgGir396.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DgGir396.mjs\");\n/* harmony import */ var _shared_better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../shared/better-auth.CiuwFiHM.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.CiuwFiHM.mjs\");\n/* harmony import */ var _shared_better_auth_DhziC0ap_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../shared/better-auth.DhziC0ap.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DhziC0ap.mjs\");\n/* harmony import */ var _shared_better_auth_BUPPRXfK_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../shared/better-auth.BUPPRXfK.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.BUPPRXfK.mjs\");\n/* harmony import */ var _better_auth_utils_random__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @better-auth/utils/random */ \"(rsc)/./node_modules/@better-auth/utils/dist/random.mjs\");\n/* harmony import */ var better_call__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! better-call */ \"(rsc)/./node_modules/better-call/dist/index.js\");\n/* harmony import */ var _better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @better-auth/utils/hash */ \"(rsc)/./node_modules/@better-auth/utils/dist/hash.mjs\");\n/* harmony import */ var _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @better-auth/utils/base64 */ \"(rsc)/./node_modules/@better-auth/utils/dist/base64.mjs\");\n/* harmony import */ var _better_auth_utils_hex__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @better-auth/utils/hex */ \"(rsc)/./node_modules/@better-auth/utils/dist/hex.mjs\");\n/* harmony import */ var _shared_better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../shared/better-auth.B4Qoxdgc.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst drizzleAdapter = (db, config) => {\n  let lazyOptions = null;\n  const createCustomAdapter = (db2) => ({ getFieldName, debugLog }) => {\n    function getSchema(model) {\n      const schema = config.schema || db2._.fullSchema;\n      if (!schema) {\n        throw new _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_0__.B(\n          \"Drizzle adapter failed to initialize. Schema not found. Please provide a schema object in the adapter options object.\"\n        );\n      }\n      const schemaModel = schema[model];\n      if (!schemaModel) {\n        throw new _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_0__.B(\n          `[# Drizzle Adapter]: The model \"${model}\" was not found in the schema object. Please pass the schema directly to the adapter options.`\n        );\n      }\n      return schemaModel;\n    }\n    const withReturning = async (model, builder, data, where) => {\n      if (config.provider !== \"mysql\") {\n        const c = await builder.returning();\n        return c[0];\n      }\n      await builder.execute();\n      const schemaModel = getSchema(model);\n      const builderVal = builder.config?.values;\n      if (where?.length) {\n        const updatedWhere = where.map((w) => {\n          if (data[w.field] !== void 0) {\n            return { ...w, value: data[w.field] };\n          }\n          return w;\n        });\n        const clause = convertWhereClause(updatedWhere, model);\n        const res = await db2.select().from(schemaModel).where(...clause);\n        return res[0];\n      } else if (builderVal && builderVal[0]?.id?.value) {\n        let tId = builderVal[0]?.id?.value;\n        if (!tId) {\n          const lastInsertId = await db2.select({ id: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_13__.sql)`LAST_INSERT_ID()` }).from(schemaModel).orderBy((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_14__.desc)(schemaModel.id)).limit(1);\n          tId = lastInsertId[0].id;\n        }\n        const res = await db2.select().from(schemaModel).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_15__.eq)(schemaModel.id, tId)).limit(1).execute();\n        return res[0];\n      } else if (data.id) {\n        const res = await db2.select().from(schemaModel).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_15__.eq)(schemaModel.id, data.id)).limit(1).execute();\n        return res[0];\n      } else {\n        if (!(\"id\" in schemaModel)) {\n          throw new _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_0__.B(\n            `The model \"${model}\" does not have an \"id\" field. Please use the \"id\" field as your primary key.`\n          );\n        }\n        const res = await db2.select().from(schemaModel).orderBy((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_14__.desc)(schemaModel.id)).limit(1).execute();\n        return res[0];\n      }\n    };\n    function convertWhereClause(where, model) {\n      const schemaModel = getSchema(model);\n      if (!where) return [];\n      if (where.length === 1) {\n        const w = where[0];\n        if (!w) {\n          return [];\n        }\n        const field = getFieldName({ model, field: w.field });\n        if (!schemaModel[field]) {\n          throw new _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_0__.B(\n            `The field \"${w.field}\" does not exist in the schema for the model \"${model}\". Please update your schema.`\n          );\n        }\n        if (w.operator === \"in\") {\n          if (!Array.isArray(w.value)) {\n            throw new _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_0__.B(\n              `The value for the field \"${w.field}\" must be an array when using the \"in\" operator.`\n            );\n          }\n          return [(0,drizzle_orm__WEBPACK_IMPORTED_MODULE_15__.inArray)(schemaModel[field], w.value)];\n        }\n        if (w.operator === \"not_in\") {\n          if (!Array.isArray(w.value)) {\n            throw new _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_0__.B(\n              `The value for the field \"${w.field}\" must be an array when using the \"not_in\" operator.`\n            );\n          }\n          return [(0,drizzle_orm__WEBPACK_IMPORTED_MODULE_15__.notInArray)(schemaModel[field], w.value)];\n        }\n        if (w.operator === \"contains\") {\n          return [(0,drizzle_orm__WEBPACK_IMPORTED_MODULE_15__.like)(schemaModel[field], `%${w.value}%`)];\n        }\n        if (w.operator === \"starts_with\") {\n          return [(0,drizzle_orm__WEBPACK_IMPORTED_MODULE_15__.like)(schemaModel[field], `${w.value}%`)];\n        }\n        if (w.operator === \"ends_with\") {\n          return [(0,drizzle_orm__WEBPACK_IMPORTED_MODULE_15__.like)(schemaModel[field], `%${w.value}`)];\n        }\n        if (w.operator === \"lt\") {\n          return [(0,drizzle_orm__WEBPACK_IMPORTED_MODULE_15__.lt)(schemaModel[field], w.value)];\n        }\n        if (w.operator === \"lte\") {\n          return [(0,drizzle_orm__WEBPACK_IMPORTED_MODULE_15__.lte)(schemaModel[field], w.value)];\n        }\n        if (w.operator === \"ne\") {\n          return [(0,drizzle_orm__WEBPACK_IMPORTED_MODULE_15__.ne)(schemaModel[field], w.value)];\n        }\n        if (w.operator === \"gt\") {\n          return [(0,drizzle_orm__WEBPACK_IMPORTED_MODULE_15__.gt)(schemaModel[field], w.value)];\n        }\n        if (w.operator === \"gte\") {\n          return [(0,drizzle_orm__WEBPACK_IMPORTED_MODULE_15__.gte)(schemaModel[field], w.value)];\n        }\n        return [(0,drizzle_orm__WEBPACK_IMPORTED_MODULE_15__.eq)(schemaModel[field], w.value)];\n      }\n      const andGroup = where.filter(\n        (w) => w.connector === \"AND\" || !w.connector\n      );\n      const orGroup = where.filter((w) => w.connector === \"OR\");\n      const andClause = (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_15__.and)(\n        ...andGroup.map((w) => {\n          const field = getFieldName({ model, field: w.field });\n          if (w.operator === \"in\") {\n            if (!Array.isArray(w.value)) {\n              throw new _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_0__.B(\n                `The value for the field \"${w.field}\" must be an array when using the \"in\" operator.`\n              );\n            }\n            return (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_15__.inArray)(schemaModel[field], w.value);\n          }\n          if (w.operator === \"not_in\") {\n            if (!Array.isArray(w.value)) {\n              throw new _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_0__.B(\n                `The value for the field \"${w.field}\" must be an array when using the \"not_in\" operator.`\n              );\n            }\n            return (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_15__.notInArray)(schemaModel[field], w.value);\n          }\n          return (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_15__.eq)(schemaModel[field], w.value);\n        })\n      );\n      const orClause = (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_15__.or)(\n        ...orGroup.map((w) => {\n          const field = getFieldName({ model, field: w.field });\n          return (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_15__.eq)(schemaModel[field], w.value);\n        })\n      );\n      const clause = [];\n      if (andGroup.length) clause.push(andClause);\n      if (orGroup.length) clause.push(orClause);\n      return clause;\n    }\n    function checkMissingFields(schema, model, values) {\n      if (!schema) {\n        throw new _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_0__.B(\n          \"Drizzle adapter failed to initialize. Schema not found. Please provide a schema object in the adapter options object.\"\n        );\n      }\n      for (const key in values) {\n        if (!schema[key]) {\n          throw new _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_0__.B(\n            `The field \"${key}\" does not exist in the \"${model}\" schema. Please update your drizzle schema or re-generate using \"npx @better-auth/cli generate\".`\n          );\n        }\n      }\n    }\n    return {\n      async create({ model, data: values }) {\n        const schemaModel = getSchema(model);\n        checkMissingFields(schemaModel, model, values);\n        const builder = db2.insert(schemaModel).values(values);\n        const returned = await withReturning(model, builder, values);\n        return returned;\n      },\n      async findOne({ model, where }) {\n        const schemaModel = getSchema(model);\n        const clause = convertWhereClause(where, model);\n        const res = await db2.select().from(schemaModel).where(...clause);\n        if (!res.length) return null;\n        return res[0];\n      },\n      async findMany({ model, where, sortBy, limit, offset }) {\n        const schemaModel = getSchema(model);\n        const clause = where ? convertWhereClause(where, model) : [];\n        const sortFn = sortBy?.direction === \"desc\" ? drizzle_orm__WEBPACK_IMPORTED_MODULE_14__.desc : drizzle_orm__WEBPACK_IMPORTED_MODULE_14__.asc;\n        const builder = db2.select().from(schemaModel).limit(limit || 100).offset(offset || 0);\n        if (sortBy?.field) {\n          builder.orderBy(\n            sortFn(\n              schemaModel[getFieldName({ model, field: sortBy?.field })]\n            )\n          );\n        }\n        return await builder.where(...clause);\n      },\n      async count({ model, where }) {\n        const schemaModel = getSchema(model);\n        const clause = where ? convertWhereClause(where, model) : [];\n        const res = await db2.select({ count: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_16__.count)() }).from(schemaModel).where(...clause);\n        return res[0].count;\n      },\n      async update({ model, where, update: values }) {\n        const schemaModel = getSchema(model);\n        const clause = convertWhereClause(where, model);\n        const builder = db2.update(schemaModel).set(values).where(...clause);\n        return await withReturning(model, builder, values, where);\n      },\n      async updateMany({ model, where, update: values }) {\n        const schemaModel = getSchema(model);\n        const clause = convertWhereClause(where, model);\n        const builder = db2.update(schemaModel).set(values).where(...clause);\n        return await builder;\n      },\n      async delete({ model, where }) {\n        const schemaModel = getSchema(model);\n        const clause = convertWhereClause(where, model);\n        const builder = db2.delete(schemaModel).where(...clause);\n        return await builder;\n      },\n      async deleteMany({ model, where }) {\n        const schemaModel = getSchema(model);\n        const clause = convertWhereClause(where, model);\n        const builder = db2.delete(schemaModel).where(...clause);\n        return await builder;\n      },\n      options: config\n    };\n  };\n  let adapterOptions = null;\n  adapterOptions = {\n    config: {\n      adapterId: \"drizzle\",\n      adapterName: \"Drizzle Adapter\",\n      usePlural: config.usePlural ?? false,\n      debugLogs: config.debugLogs ?? false,\n      transaction: config.transaction ?? false ? (cb) => db.transaction((tx) => {\n        const adapter2 = (0,_shared_better_auth_BvvYEWCP_mjs__WEBPACK_IMPORTED_MODULE_1__.c)({\n          config: adapterOptions.config,\n          adapter: createCustomAdapter(tx)\n        })(lazyOptions);\n        return cb(adapter2);\n      }) : false\n    },\n    adapter: createCustomAdapter(db)\n  };\n  const adapter = (0,_shared_better_auth_BvvYEWCP_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(adapterOptions);\n  return (options) => {\n    lazyOptions = options;\n    return adapter(options);\n  };\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/adapters/drizzle-adapter/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/api/index.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/better-auth/dist/api/index.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APIError: () => (/* reexport safe */ better_call__WEBPACK_IMPORTED_MODULE_0__.APIError),\n/* harmony export */   accountInfo: () => (/* reexport safe */ _shared_better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_1__.q),\n/* harmony export */   callbackOAuth: () => (/* reexport safe */ _shared_better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_1__.R),\n/* harmony export */   changeEmail: () => (/* reexport safe */ _shared_better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_1__.K),\n/* harmony export */   changePassword: () => (/* reexport safe */ _shared_better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_1__.J),\n/* harmony export */   checkEndpointConflicts: () => (/* binding */ checkEndpointConflicts),\n/* harmony export */   createAuthEndpoint: () => (/* reexport safe */ _shared_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_2__.a),\n/* harmony export */   createAuthMiddleware: () => (/* reexport safe */ _shared_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_2__.c),\n/* harmony export */   createEmailVerificationToken: () => (/* reexport safe */ _shared_better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_1__.k),\n/* harmony export */   deleteUser: () => (/* reexport safe */ _shared_better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_1__.G),\n/* harmony export */   deleteUserCallback: () => (/* reexport safe */ _shared_better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_1__.A),\n/* harmony export */   error: () => (/* reexport safe */ _shared_better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_1__.m),\n/* harmony export */   forgetPassword: () => (/* reexport safe */ _shared_better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_1__.O),\n/* harmony export */   forgetPasswordCallback: () => (/* reexport safe */ _shared_better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_1__.F),\n/* harmony export */   freshSessionMiddleware: () => (/* reexport safe */ _shared_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_2__.f),\n/* harmony export */   getAccessToken: () => (/* reexport safe */ _shared_better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_1__.x),\n/* harmony export */   getEndpoints: () => (/* binding */ getEndpoints),\n/* harmony export */   getSession: () => (/* reexport safe */ _shared_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_2__.b),\n/* harmony export */   getSessionFromCtx: () => (/* reexport safe */ _shared_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_2__.g),\n/* harmony export */   getSessionQuerySchema: () => (/* reexport safe */ _shared_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_2__.h),\n/* harmony export */   linkSocialAccount: () => (/* reexport safe */ _shared_better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_1__.C),\n/* harmony export */   listSessions: () => (/* reexport safe */ _shared_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_2__.l),\n/* harmony export */   listUserAccounts: () => (/* reexport safe */ _shared_better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_1__.B),\n/* harmony export */   ok: () => (/* reexport safe */ _shared_better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_1__.n),\n/* harmony export */   optionsMiddleware: () => (/* reexport safe */ _shared_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_2__.o),\n/* harmony export */   originCheck: () => (/* reexport safe */ _shared_better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_1__.o),\n/* harmony export */   originCheckMiddleware: () => (/* reexport safe */ _shared_better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_1__.l),\n/* harmony export */   refreshToken: () => (/* reexport safe */ _shared_better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_1__.y),\n/* harmony export */   requestOnlySessionMiddleware: () => (/* reexport safe */ _shared_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_2__.j),\n/* harmony export */   requestPasswordReset: () => (/* reexport safe */ _shared_better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_1__.E),\n/* harmony export */   requestPasswordResetCallback: () => (/* reexport safe */ _shared_better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_1__.D),\n/* harmony export */   resetPassword: () => (/* reexport safe */ _shared_better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_1__.N),\n/* harmony export */   revokeOtherSessions: () => (/* reexport safe */ _shared_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_2__.r),\n/* harmony export */   revokeSession: () => (/* reexport safe */ _shared_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_2__.e),\n/* harmony export */   revokeSessions: () => (/* reexport safe */ _shared_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_2__.d),\n/* harmony export */   router: () => (/* binding */ router),\n/* harmony export */   sendVerificationEmail: () => (/* reexport safe */ _shared_better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_1__.L),\n/* harmony export */   sendVerificationEmailFn: () => (/* reexport safe */ _shared_better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_1__.T),\n/* harmony export */   sensitiveSessionMiddleware: () => (/* reexport safe */ _shared_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_2__.i),\n/* harmony export */   sessionMiddleware: () => (/* reexport safe */ _shared_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_2__.s),\n/* harmony export */   setPassword: () => (/* reexport safe */ _shared_better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_1__.I),\n/* harmony export */   signInEmail: () => (/* reexport safe */ _shared_better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_1__.P),\n/* harmony export */   signInSocial: () => (/* reexport safe */ _shared_better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_1__.S),\n/* harmony export */   signOut: () => (/* reexport safe */ _shared_better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_1__.Q),\n/* harmony export */   signUpEmail: () => (/* binding */ signUpEmail),\n/* harmony export */   unlinkAccount: () => (/* reexport safe */ _shared_better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_1__.z),\n/* harmony export */   updateUser: () => (/* reexport safe */ _shared_better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_1__.u),\n/* harmony export */   verifyEmail: () => (/* reexport safe */ _shared_better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_1__.M)\n/* harmony export */ });\n/* harmony import */ var better_call__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! better-call */ \"(rsc)/./node_modules/better-call/dist/index.js\");\n/* harmony import */ var _shared_better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/better-auth.C3-_8m-g.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.C3-_8m-g.mjs\");\n/* harmony import */ var _shared_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/better-auth.C5vDERgF.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.C5vDERgF.mjs\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/v4/classic/external.js\");\n/* harmony import */ var _shared_better_auth_DiMXeqeq_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shared/better-auth.DiMXeqeq.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DiMXeqeq.mjs\");\n/* harmony import */ var _shared_better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../shared/better-auth.CiuwFiHM.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.CiuwFiHM.mjs\");\n/* harmony import */ var _better_auth_core_db__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @better-auth/core/db */ \"(rsc)/./node_modules/@better-auth/core/dist/db/index.mjs\");\n/* harmony import */ var _shared_better_auth_BLnvK9hk_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../shared/better-auth.BLnvK9hk.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.BLnvK9hk.mjs\");\n/* harmony import */ var _shared_better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../shared/better-auth.DgGir396.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DgGir396.mjs\");\n/* harmony import */ var _better_auth_utils_random__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @better-auth/utils/random */ \"(rsc)/./node_modules/@better-auth/utils/dist/random.mjs\");\n/* harmony import */ var _better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @better-auth/utils/hash */ \"(rsc)/./node_modules/@better-auth/utils/dist/hash.mjs\");\n/* harmony import */ var _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @better-auth/utils/base64 */ \"(rsc)/./node_modules/@better-auth/utils/dist/base64.mjs\");\n/* harmony import */ var _better_auth_utils_hex__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @better-auth/utils/hex */ \"(rsc)/./node_modules/@better-auth/utils/dist/hex.mjs\");\n/* harmony import */ var _shared_better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../shared/better-auth.B4Qoxdgc.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs\");\n/* harmony import */ var _shared_better_auth_BTrSrKsi_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../shared/better-auth.BTrSrKsi.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.BTrSrKsi.mjs\");\n/* harmony import */ var _shared_better_auth_BQOp_6ij_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../shared/better-auth.BQOp-6ij.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.BQOp-6ij.mjs\");\n/* harmony import */ var _shared_better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../shared/better-auth.CW6D9eSx.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.CW6D9eSx.mjs\");\n/* harmony import */ var _crypto_index_mjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../crypto/index.mjs */ \"(rsc)/./node_modules/better-auth/dist/crypto/index.mjs\");\n/* harmony import */ var _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../shared/better-auth.DdzSJf-n.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs\");\n/* harmony import */ var _better_fetch_fetch__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @better-fetch/fetch */ \"(rsc)/./node_modules/@better-fetch/fetch/dist/index.js\");\n/* harmony import */ var _shared_better_auth_BRFtaovt_mjs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../shared/better-auth.BRFtaovt.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.BRFtaovt.mjs\");\n/* harmony import */ var _shared_better_auth_BUPPRXfK_mjs__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../shared/better-auth.BUPPRXfK.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.BUPPRXfK.mjs\");\n/* harmony import */ var _better_auth_utils_hmac__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @better-auth/utils/hmac */ \"(rsc)/./node_modules/@better-auth/utils/dist/hmac.mjs\");\n/* harmony import */ var _better_auth_utils_binary__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @better-auth/utils/binary */ \"(rsc)/./node_modules/@better-auth/utils/dist/binary.mjs\");\n/* harmony import */ var defu__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! defu */ \"(rsc)/./node_modules/defu/dist/defu.mjs\");\n/* harmony import */ var _shared_better_auth_D2xndZ2p_mjs__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../shared/better-auth.D2xndZ2p.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.D2xndZ2p.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst signUpEmail = () => (0,_shared_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_2__.a)(\n  \"/sign-up/email\",\n  {\n    method: \"POST\",\n    body: zod__WEBPACK_IMPORTED_MODULE_25__.record(zod__WEBPACK_IMPORTED_MODULE_25__.string(), zod__WEBPACK_IMPORTED_MODULE_25__.any()),\n    metadata: {\n      $Infer: {\n        body: {}\n      },\n      openapi: {\n        description: \"Sign up a user using email and password\",\n        requestBody: {\n          content: {\n            \"application/json\": {\n              schema: {\n                type: \"object\",\n                properties: {\n                  name: {\n                    type: \"string\",\n                    description: \"The name of the user\"\n                  },\n                  email: {\n                    type: \"string\",\n                    description: \"The email of the user\"\n                  },\n                  password: {\n                    type: \"string\",\n                    description: \"The password of the user\"\n                  },\n                  image: {\n                    type: \"string\",\n                    description: \"The profile image URL of the user\"\n                  },\n                  callbackURL: {\n                    type: \"string\",\n                    description: \"The URL to use for email verification callback\"\n                  },\n                  rememberMe: {\n                    type: \"boolean\",\n                    description: \"If this is false, the session will not be remembered. Default is `true`.\"\n                  }\n                },\n                required: [\"name\", \"email\", \"password\"]\n              }\n            }\n          }\n        },\n        responses: {\n          \"200\": {\n            description: \"Successfully created user\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    token: {\n                      type: \"string\",\n                      nullable: true,\n                      description: \"Authentication token for the session\"\n                    },\n                    user: {\n                      type: \"object\",\n                      properties: {\n                        id: {\n                          type: \"string\",\n                          description: \"The unique identifier of the user\"\n                        },\n                        email: {\n                          type: \"string\",\n                          format: \"email\",\n                          description: \"The email address of the user\"\n                        },\n                        name: {\n                          type: \"string\",\n                          description: \"The name of the user\"\n                        },\n                        image: {\n                          type: \"string\",\n                          format: \"uri\",\n                          nullable: true,\n                          description: \"The profile image URL of the user\"\n                        },\n                        emailVerified: {\n                          type: \"boolean\",\n                          description: \"Whether the email has been verified\"\n                        },\n                        createdAt: {\n                          type: \"string\",\n                          format: \"date-time\",\n                          description: \"When the user was created\"\n                        },\n                        updatedAt: {\n                          type: \"string\",\n                          format: \"date-time\",\n                          description: \"When the user was last updated\"\n                        }\n                      },\n                      required: [\n                        \"id\",\n                        \"email\",\n                        \"name\",\n                        \"emailVerified\",\n                        \"createdAt\",\n                        \"updatedAt\"\n                      ]\n                    }\n                  },\n                  required: [\"user\"]\n                  // token is optional\n                }\n              }\n            }\n          },\n          \"422\": {\n            description: \"Unprocessable Entity. User already exists or failed to create user.\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    message: {\n                      type: \"string\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    if (!ctx.context.options.emailAndPassword?.enabled || ctx.context.options.emailAndPassword?.disableSignUp) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: \"Email and password sign up is not enabled\"\n      });\n    }\n    const body = ctx.body;\n    const { name, email, password, image, callbackURL, rememberMe, ...rest } = body;\n    const isValidEmail = zod__WEBPACK_IMPORTED_MODULE_25__.email().safeParse(email);\n    if (!isValidEmail.success) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: _shared_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_2__.B.INVALID_EMAIL\n      });\n    }\n    const minPasswordLength = ctx.context.password.config.minPasswordLength;\n    if (password.length < minPasswordLength) {\n      ctx.context.logger.error(\"Password is too short\");\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: _shared_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_2__.B.PASSWORD_TOO_SHORT\n      });\n    }\n    const maxPasswordLength = ctx.context.password.config.maxPasswordLength;\n    if (password.length > maxPasswordLength) {\n      ctx.context.logger.error(\"Password is too long\");\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: _shared_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_2__.B.PASSWORD_TOO_LONG\n      });\n    }\n    const dbUser = await ctx.context.internalAdapter.findUserByEmail(email);\n    if (dbUser?.user) {\n      ctx.context.logger.info(`Sign-up attempt for existing email: ${email}`);\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNPROCESSABLE_ENTITY\", {\n        message: _shared_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_2__.B.USER_ALREADY_EXISTS_USE_ANOTHER_EMAIL\n      });\n    }\n    const hash = await ctx.context.password.hash(password);\n    let createdUser;\n    try {\n      const data = (0,_shared_better_auth_BLnvK9hk_mjs__WEBPACK_IMPORTED_MODULE_6__.d)(ctx.context.options, rest, \"create\");\n      createdUser = await ctx.context.internalAdapter.createUser(\n        {\n          email: email.toLowerCase(),\n          name,\n          image,\n          ...data,\n          emailVerified: false\n        },\n        ctx\n      );\n      if (!createdUser) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n          message: _shared_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_2__.B.FAILED_TO_CREATE_USER\n        });\n      }\n    } catch (e) {\n      if (_shared_better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_4__.a) {\n        ctx.context.logger.error(\"Failed to create user\", e);\n      }\n      if (e instanceof better_call__WEBPACK_IMPORTED_MODULE_0__.APIError) {\n        throw e;\n      }\n      ctx.context.logger?.error(\"Failed to create user\", e);\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNPROCESSABLE_ENTITY\", {\n        message: _shared_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_2__.B.FAILED_TO_CREATE_USER,\n        details: e\n      });\n    }\n    if (!createdUser) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNPROCESSABLE_ENTITY\", {\n        message: _shared_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_2__.B.FAILED_TO_CREATE_USER\n      });\n    }\n    await ctx.context.internalAdapter.linkAccount(\n      {\n        userId: createdUser.id,\n        providerId: \"credential\",\n        accountId: createdUser.id,\n        password: hash\n      },\n      ctx\n    );\n    if (ctx.context.options.emailVerification?.sendOnSignUp || ctx.context.options.emailAndPassword.requireEmailVerification) {\n      const token = await (0,_shared_better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_1__.k)(\n        ctx.context.secret,\n        createdUser.email,\n        void 0,\n        ctx.context.options.emailVerification?.expiresIn\n      );\n      const url = `${ctx.context.baseURL}/verify-email?token=${token}&callbackURL=${body.callbackURL || \"/\"}`;\n      const args = ctx.request ? [\n        {\n          user: createdUser,\n          url,\n          token\n        },\n        ctx.request\n      ] : [\n        {\n          user: createdUser,\n          url,\n          token\n        }\n      ];\n      await ctx.context.options.emailVerification?.sendVerificationEmail?.(\n        ...args\n      );\n    }\n    if (ctx.context.options.emailAndPassword.autoSignIn === false || ctx.context.options.emailAndPassword.requireEmailVerification) {\n      return ctx.json({\n        token: null,\n        user: {\n          id: createdUser.id,\n          email: createdUser.email,\n          name: createdUser.name,\n          image: createdUser.image,\n          emailVerified: createdUser.emailVerified,\n          createdAt: createdUser.createdAt,\n          updatedAt: createdUser.updatedAt\n        }\n      });\n    }\n    const session = await ctx.context.internalAdapter.createSession(\n      createdUser.id,\n      ctx,\n      rememberMe === false\n    );\n    if (!session) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: _shared_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_2__.B.FAILED_TO_CREATE_SESSION\n      });\n    }\n    await (0,_shared_better_auth_DiMXeqeq_mjs__WEBPACK_IMPORTED_MODULE_3__.s)(\n      ctx,\n      {\n        session,\n        user: createdUser\n      },\n      rememberMe === false\n    );\n    return ctx.json({\n      token: session.token,\n      user: {\n        id: createdUser.id,\n        email: createdUser.email,\n        name: createdUser.name,\n        image: createdUser.image,\n        emailVerified: createdUser.emailVerified,\n        createdAt: createdUser.createdAt,\n        updatedAt: createdUser.updatedAt\n      }\n    });\n  }\n);\n\nfunction shouldRateLimit(max, window, rateLimitData) {\n  const now = Date.now();\n  const windowInMs = window * 1e3;\n  const timeSinceLastRequest = now - rateLimitData.lastRequest;\n  return timeSinceLastRequest < windowInMs && rateLimitData.count >= max;\n}\nfunction rateLimitResponse(retryAfter) {\n  return new Response(\n    JSON.stringify({\n      message: \"Too many requests. Please try again later.\"\n    }),\n    {\n      status: 429,\n      statusText: \"Too Many Requests\",\n      headers: {\n        \"X-Retry-After\": retryAfter.toString()\n      }\n    }\n  );\n}\nfunction getRetryAfter(lastRequest, window) {\n  const now = Date.now();\n  const windowInMs = window * 1e3;\n  return Math.ceil((lastRequest + windowInMs - now) / 1e3);\n}\nfunction createDBStorage(ctx) {\n  const model = \"rateLimit\";\n  const db = ctx.adapter;\n  return {\n    get: async (key) => {\n      const res = await db.findMany({\n        model,\n        where: [{ field: \"key\", value: key }]\n      });\n      const data = res[0];\n      if (typeof data?.lastRequest === \"bigint\") {\n        data.lastRequest = Number(data.lastRequest);\n      }\n      return data;\n    },\n    set: async (key, value, _update) => {\n      try {\n        if (_update) {\n          await db.updateMany({\n            model,\n            where: [{ field: \"key\", value: key }],\n            update: {\n              count: value.count,\n              lastRequest: value.lastRequest\n            }\n          });\n        } else {\n          await db.create({\n            model,\n            data: {\n              key,\n              count: value.count,\n              lastRequest: value.lastRequest\n            }\n          });\n        }\n      } catch (e) {\n        ctx.logger.error(\"Error setting rate limit\", e);\n      }\n    }\n  };\n}\nconst memory = /* @__PURE__ */ new Map();\nfunction getRateLimitStorage(ctx, rateLimitSettings) {\n  if (ctx.options.rateLimit?.customStorage) {\n    return ctx.options.rateLimit.customStorage;\n  }\n  const storage = ctx.rateLimit.storage;\n  if (storage === \"secondary-storage\") {\n    return {\n      get: async (key) => {\n        const data = await ctx.options.secondaryStorage?.get(key);\n        return data ? (0,_shared_better_auth_BTrSrKsi_mjs__WEBPACK_IMPORTED_MODULE_13__.s)(data) : void 0;\n      },\n      set: async (key, value, _update) => {\n        const ttl = rateLimitSettings?.window ?? ctx.options.rateLimit?.window ?? 10;\n        await ctx.options.secondaryStorage?.set?.(\n          key,\n          JSON.stringify(value),\n          ttl\n        );\n      }\n    };\n  } else if (storage === \"memory\") {\n    return {\n      async get(key) {\n        return memory.get(key);\n      },\n      async set(key, value, _update) {\n        memory.set(key, value);\n      }\n    };\n  }\n  return createDBStorage(ctx);\n}\nasync function onRequestRateLimit(req, ctx) {\n  if (!ctx.rateLimit.enabled) {\n    return;\n  }\n  const path = new URL(req.url).pathname.replace(\n    ctx.options.basePath || \"/api/auth\",\n    \"\"\n  );\n  let window = ctx.rateLimit.window;\n  let max = ctx.rateLimit.max;\n  const ip = (0,_shared_better_auth_BQOp_6ij_mjs__WEBPACK_IMPORTED_MODULE_14__.g)(req, ctx.options);\n  if (!ip) {\n    return;\n  }\n  const key = ip + path;\n  const specialRules = getDefaultSpecialRules();\n  const specialRule = specialRules.find((rule) => rule.pathMatcher(path));\n  if (specialRule) {\n    window = specialRule.window;\n    max = specialRule.max;\n  }\n  for (const plugin of ctx.options.plugins || []) {\n    if (plugin.rateLimit) {\n      const matchedRule = plugin.rateLimit.find(\n        (rule) => rule.pathMatcher(path)\n      );\n      if (matchedRule) {\n        window = matchedRule.window;\n        max = matchedRule.max;\n        break;\n      }\n    }\n  }\n  if (ctx.rateLimit.customRules) {\n    const _path = Object.keys(ctx.rateLimit.customRules).find((p) => {\n      if (p.includes(\"*\")) {\n        const isMatch = (0,_shared_better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_1__.w)(p)(path);\n        return isMatch;\n      }\n      return p === path;\n    });\n    if (_path) {\n      const customRule = ctx.rateLimit.customRules[_path];\n      const resolved = typeof customRule === \"function\" ? await customRule(req) : customRule;\n      if (resolved) {\n        window = resolved.window;\n        max = resolved.max;\n      }\n      if (resolved === false) {\n        return;\n      }\n    }\n  }\n  const storage = getRateLimitStorage(ctx, {\n    window\n  });\n  const data = await storage.get(key);\n  const now = Date.now();\n  if (!data) {\n    await storage.set(key, {\n      key,\n      count: 1,\n      lastRequest: now\n    });\n  } else {\n    const timeSinceLastRequest = now - data.lastRequest;\n    if (shouldRateLimit(max, window, data)) {\n      const retryAfter = getRetryAfter(data.lastRequest, window);\n      return rateLimitResponse(retryAfter);\n    } else if (timeSinceLastRequest > window * 1e3) {\n      await storage.set(\n        key,\n        {\n          ...data,\n          count: 1,\n          lastRequest: now\n        },\n        true\n      );\n    } else {\n      await storage.set(\n        key,\n        {\n          ...data,\n          count: data.count + 1,\n          lastRequest: now\n        },\n        true\n      );\n    }\n  }\n}\nfunction getDefaultSpecialRules() {\n  const specialRules = [\n    {\n      pathMatcher(path) {\n        return path.startsWith(\"/sign-in\") || path.startsWith(\"/sign-up\") || path.startsWith(\"/change-password\") || path.startsWith(\"/change-email\");\n      },\n      window: 10,\n      max: 3\n    }\n  ];\n  return specialRules;\n}\n\nfunction checkEndpointConflicts(options, logger2) {\n  const endpointRegistry = /* @__PURE__ */ new Map();\n  options.plugins?.forEach((plugin) => {\n    if (plugin.endpoints) {\n      for (const [key, endpoint] of Object.entries(plugin.endpoints)) {\n        if (endpoint && \"path\" in endpoint) {\n          const path = endpoint.path;\n          let methods = [];\n          if (endpoint.options && \"method\" in endpoint.options) {\n            if (Array.isArray(endpoint.options.method)) {\n              methods = endpoint.options.method;\n            } else if (typeof endpoint.options.method === \"string\") {\n              methods = [endpoint.options.method];\n            }\n          }\n          if (methods.length === 0) {\n            methods = [\"*\"];\n          }\n          if (!endpointRegistry.has(path)) {\n            endpointRegistry.set(path, []);\n          }\n          endpointRegistry.get(path).push({\n            pluginId: plugin.id,\n            endpointKey: key,\n            methods\n          });\n        }\n      }\n    }\n  });\n  const conflicts = [];\n  for (const [path, entries] of endpointRegistry.entries()) {\n    if (entries.length > 1) {\n      const methodMap = /* @__PURE__ */ new Map();\n      let hasConflict = false;\n      for (const entry of entries) {\n        for (const method of entry.methods) {\n          if (!methodMap.has(method)) {\n            methodMap.set(method, []);\n          }\n          methodMap.get(method).push(entry.pluginId);\n          if (methodMap.get(method).length > 1) {\n            hasConflict = true;\n          }\n          if (method === \"*\" && entries.length > 1) {\n            hasConflict = true;\n          } else if (method !== \"*\" && methodMap.has(\"*\")) {\n            hasConflict = true;\n          }\n        }\n      }\n      if (hasConflict) {\n        const uniquePlugins = [...new Set(entries.map((e) => e.pluginId))];\n        const conflictingMethods = [];\n        for (const [method, plugins] of methodMap.entries()) {\n          if (plugins.length > 1 || method === \"*\" && entries.length > 1 || method !== \"*\" && methodMap.has(\"*\")) {\n            conflictingMethods.push(method);\n          }\n        }\n        conflicts.push({\n          path,\n          plugins: uniquePlugins,\n          conflictingMethods\n        });\n      }\n    }\n  }\n  if (conflicts.length > 0) {\n    const conflictMessages = conflicts.map(\n      (conflict) => `  - \"${conflict.path}\" [${conflict.conflictingMethods.join(\", \")}] used by plugins: ${conflict.plugins.join(\", \")}`\n    ).join(\"\\n\");\n    logger2.error(\n      `Endpoint path conflicts detected! Multiple plugins are trying to use the same endpoint paths with conflicting HTTP methods:\n${conflictMessages}\n\nTo resolve this, you can:\n\t1. Use only one of the conflicting plugins\n\t2. Configure the plugins to use different paths (if supported)\n\t3. Ensure plugins use different HTTP methods for the same path\n`\n    );\n  }\n}\nfunction getEndpoints(ctx, options) {\n  const pluginEndpoints = options.plugins?.reduce((acc, plugin) => {\n    return {\n      ...acc,\n      ...plugin.endpoints\n    };\n  }, {}) ?? {};\n  const middlewares = options.plugins?.map(\n    (plugin) => plugin.middlewares?.map((m) => {\n      const middleware = (async (context) => {\n        const authContext = await ctx;\n        return m.middleware({\n          ...context,\n          context: {\n            ...authContext,\n            ...context.context\n          }\n        });\n      });\n      middleware.options = m.middleware.options;\n      return {\n        path: m.path,\n        middleware\n      };\n    })\n  ).filter((plugin) => plugin !== void 0).flat() || [];\n  const baseEndpoints = {\n    signInSocial: _shared_better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_1__.S,\n    callbackOAuth: _shared_better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_1__.R,\n    getSession: (0,_shared_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_2__.b)(),\n    signOut: _shared_better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_1__.Q,\n    signUpEmail: signUpEmail(),\n    signInEmail: _shared_better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_1__.P,\n    forgetPassword: _shared_better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_1__.O,\n    resetPassword: _shared_better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_1__.N,\n    verifyEmail: _shared_better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_1__.M,\n    sendVerificationEmail: _shared_better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_1__.L,\n    changeEmail: _shared_better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_1__.K,\n    changePassword: _shared_better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_1__.J,\n    setPassword: _shared_better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_1__.I,\n    updateUser: (0,_shared_better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_1__.u)(),\n    deleteUser: _shared_better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_1__.G,\n    forgetPasswordCallback: _shared_better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_1__.F,\n    requestPasswordReset: _shared_better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_1__.E,\n    requestPasswordResetCallback: _shared_better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_1__.D,\n    listSessions: (0,_shared_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_2__.l)(),\n    revokeSession: _shared_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_2__.e,\n    revokeSessions: _shared_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_2__.d,\n    revokeOtherSessions: _shared_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_2__.r,\n    linkSocialAccount: _shared_better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_1__.C,\n    listUserAccounts: _shared_better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_1__.B,\n    deleteUserCallback: _shared_better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_1__.A,\n    unlinkAccount: _shared_better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_1__.z,\n    refreshToken: _shared_better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_1__.y,\n    getAccessToken: _shared_better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_1__.x,\n    accountInfo: _shared_better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_1__.q\n  };\n  const endpoints = {\n    ...baseEndpoints,\n    ...pluginEndpoints,\n    ok: _shared_better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_1__.n,\n    error: _shared_better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_1__.m\n  };\n  const api = (0,_shared_better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_1__.t)(endpoints, ctx);\n  return {\n    api,\n    middlewares\n  };\n}\nconst router = (ctx, options) => {\n  const { api, middlewares } = getEndpoints(ctx, options);\n  const basePath = new URL(ctx.baseURL).pathname;\n  return (0,better_call__WEBPACK_IMPORTED_MODULE_0__.createRouter)(api, {\n    routerContext: ctx,\n    openapi: {\n      disabled: true\n    },\n    basePath,\n    routerMiddleware: [\n      {\n        path: \"/**\",\n        middleware: _shared_better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_1__.l\n      },\n      ...middlewares\n    ],\n    async onRequest(req) {\n      const disabledPaths = ctx.options.disabledPaths || [];\n      const path = new URL(req.url).pathname.replace(basePath, \"\");\n      if (disabledPaths.includes(path)) {\n        return new Response(\"Not Found\", { status: 404 });\n      }\n      for (const plugin of ctx.options.plugins || []) {\n        if (plugin.onRequest) {\n          const response = await plugin.onRequest(req, ctx);\n          if (response && \"response\" in response) {\n            return response.response;\n          }\n        }\n      }\n      return onRequestRateLimit(req, ctx);\n    },\n    async onResponse(res) {\n      for (const plugin of ctx.options.plugins || []) {\n        if (plugin.onResponse) {\n          const response = await plugin.onResponse(res, ctx);\n          if (response) {\n            return response.response;\n          }\n        }\n      }\n      return res;\n    },\n    onError(e) {\n      if (e instanceof better_call__WEBPACK_IMPORTED_MODULE_0__.APIError && e.status === \"FOUND\") {\n        return;\n      }\n      if (options.onAPIError?.throw) {\n        throw e;\n      }\n      if (options.onAPIError?.onError) {\n        options.onAPIError.onError(e, ctx);\n        return;\n      }\n      const optLogLevel = options.logger?.level;\n      const log = optLogLevel === \"error\" || optLogLevel === \"warn\" || optLogLevel === \"debug\" ? _shared_better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_7__.a : void 0;\n      if (options.logger?.disabled !== true) {\n        if (e && typeof e === \"object\" && \"message\" in e && typeof e.message === \"string\") {\n          if (e.message.includes(\"no column\") || e.message.includes(\"column\") || e.message.includes(\"relation\") || e.message.includes(\"table\") || e.message.includes(\"does not exist\")) {\n            ctx.logger?.error(e.message);\n            return;\n          }\n        }\n        if (e instanceof better_call__WEBPACK_IMPORTED_MODULE_0__.APIError) {\n          if (e.status === \"INTERNAL_SERVER_ERROR\") {\n            ctx.logger.error(e.status, e);\n          }\n          log?.error(e.message);\n        } else {\n          ctx.logger?.error(\n            e && typeof e === \"object\" && \"name\" in e ? e.name : \"\",\n            e\n          );\n        }\n      }\n    }\n  });\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/api/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/chunks/bun-sqlite-dialect.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/better-auth/dist/chunks/bun-sqlite-dialect.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BunSqliteAdapter: () => (/* binding */ BunSqliteAdapter),\n/* harmony export */   BunSqliteDialect: () => (/* binding */ BunSqliteDialect),\n/* harmony export */   BunSqliteDriver: () => (/* binding */ BunSqliteDriver),\n/* harmony export */   BunSqliteIntrospector: () => (/* binding */ BunSqliteIntrospector),\n/* harmony export */   BunSqliteQueryCompiler: () => (/* binding */ BunSqliteQueryCompiler)\n/* harmony export */ });\n/* harmony import */ var kysely__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! kysely */ \"(rsc)/./node_modules/kysely/dist/esm/query-compiler/compiled-query.js\");\n/* harmony import */ var kysely__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! kysely */ \"(rsc)/./node_modules/kysely/dist/esm/migration/migrator.js\");\n/* harmony import */ var kysely__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! kysely */ \"(rsc)/./node_modules/kysely/dist/esm/raw-builder/sql.js\");\n/* harmony import */ var kysely__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! kysely */ \"(rsc)/./node_modules/kysely/dist/esm/query-compiler/default-query-compiler.js\");\n\n\nclass BunSqliteAdapter {\n  get supportsCreateIfNotExists() {\n    return true;\n  }\n  get supportsTransactionalDdl() {\n    return false;\n  }\n  get supportsReturning() {\n    return true;\n  }\n  async acquireMigrationLock() {\n  }\n  async releaseMigrationLock() {\n  }\n  get supportsOutput() {\n    return true;\n  }\n}\nclass BunSqliteDriver {\n  #config;\n  #connectionMutex = new ConnectionMutex();\n  #db;\n  #connection;\n  constructor(config) {\n    this.#config = { ...config };\n  }\n  async init() {\n    this.#db = this.#config.database;\n    this.#connection = new BunSqliteConnection(this.#db);\n    if (this.#config.onCreateConnection) {\n      await this.#config.onCreateConnection(this.#connection);\n    }\n  }\n  async acquireConnection() {\n    await this.#connectionMutex.lock();\n    return this.#connection;\n  }\n  async beginTransaction(connection) {\n    await connection.executeQuery(kysely__WEBPACK_IMPORTED_MODULE_0__.CompiledQuery.raw(\"begin\"));\n  }\n  async commitTransaction(connection) {\n    await connection.executeQuery(kysely__WEBPACK_IMPORTED_MODULE_0__.CompiledQuery.raw(\"commit\"));\n  }\n  async rollbackTransaction(connection) {\n    await connection.executeQuery(kysely__WEBPACK_IMPORTED_MODULE_0__.CompiledQuery.raw(\"rollback\"));\n  }\n  async releaseConnection() {\n    this.#connectionMutex.unlock();\n  }\n  async destroy() {\n    this.#db?.close();\n  }\n}\nclass BunSqliteConnection {\n  #db;\n  constructor(db) {\n    this.#db = db;\n  }\n  executeQuery(compiledQuery) {\n    const { sql: sql2, parameters } = compiledQuery;\n    const stmt = this.#db.prepare(sql2);\n    return Promise.resolve({\n      rows: stmt.all(parameters)\n    });\n  }\n  async *streamQuery() {\n    throw new Error(\"Streaming query is not supported by SQLite driver.\");\n  }\n}\nclass ConnectionMutex {\n  #promise;\n  #resolve;\n  async lock() {\n    while (this.#promise) {\n      await this.#promise;\n    }\n    this.#promise = new Promise((resolve) => {\n      this.#resolve = resolve;\n    });\n  }\n  unlock() {\n    const resolve = this.#resolve;\n    this.#promise = void 0;\n    this.#resolve = void 0;\n    resolve?.();\n  }\n}\nclass BunSqliteIntrospector {\n  #db;\n  constructor(db) {\n    this.#db = db;\n  }\n  async getSchemas() {\n    return [];\n  }\n  async getTables(options = { withInternalKyselyTables: false }) {\n    let query = this.#db.selectFrom(\"sqlite_schema\").where(\"type\", \"=\", \"table\").where(\"name\", \"not like\", \"sqlite_%\").select(\"name\").$castTo();\n    if (!options.withInternalKyselyTables) {\n      query = query.where(\"name\", \"!=\", kysely__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_MIGRATION_TABLE).where(\"name\", \"!=\", kysely__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_MIGRATION_LOCK_TABLE);\n    }\n    const tables = await query.execute();\n    return Promise.all(tables.map(({ name }) => this.#getTableMetadata(name)));\n  }\n  async getMetadata(options) {\n    return {\n      tables: await this.getTables(options)\n    };\n  }\n  async #getTableMetadata(table) {\n    const db = this.#db;\n    const createSql = await db.selectFrom(\"sqlite_master\").where(\"name\", \"=\", table).select(\"sql\").$castTo().execute();\n    const autoIncrementCol = createSql[0]?.sql?.split(/[\\(\\),]/)?.find((it) => it.toLowerCase().includes(\"autoincrement\"))?.split(/\\s+/)?.[0]?.replace(/[\"`]/g, \"\");\n    const columns = await db.selectFrom(\n      (0,kysely__WEBPACK_IMPORTED_MODULE_2__.sql)`pragma_table_info(${table})`.as(\"table_info\")\n    ).select([\"name\", \"type\", \"notnull\", \"dflt_value\"]).execute();\n    return {\n      name: table,\n      columns: columns.map((col) => ({\n        name: col.name,\n        dataType: col.type,\n        isNullable: !col.notnull,\n        isAutoIncrementing: col.name === autoIncrementCol,\n        hasDefaultValue: col.dflt_value != null\n      })),\n      isView: true\n    };\n  }\n}\nclass BunSqliteQueryCompiler extends kysely__WEBPACK_IMPORTED_MODULE_3__.DefaultQueryCompiler {\n  getCurrentParameterPlaceholder() {\n    return \"?\";\n  }\n  getLeftIdentifierWrapper() {\n    return '\"';\n  }\n  getRightIdentifierWrapper() {\n    return '\"';\n  }\n  getAutoIncrement() {\n    return \"autoincrement\";\n  }\n}\nclass BunSqliteDialect {\n  #config;\n  constructor(config) {\n    this.#config = { ...config };\n  }\n  createDriver() {\n    return new BunSqliteDriver(this.#config);\n  }\n  createQueryCompiler() {\n    return new BunSqliteQueryCompiler();\n  }\n  createAdapter() {\n    return new BunSqliteAdapter();\n  }\n  createIntrospector(db) {\n    return new BunSqliteIntrospector(db);\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9jaHVua3MvYnVuLXNxbGl0ZS1kaWFsZWN0Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBeUg7O0FBRXpIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxpREFBYTtBQUMvQztBQUNBO0FBQ0Esa0NBQWtDLGlEQUFhO0FBQy9DO0FBQ0E7QUFDQSxrQ0FBa0MsaURBQWE7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksd0JBQXdCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGlDQUFpQztBQUMvRDtBQUNBO0FBQ0Esd0NBQXdDLDJEQUF1QixzQkFBc0IsZ0VBQTRCO0FBQ2pIO0FBQ0E7QUFDQSxxQ0FBcUMsTUFBTTtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSwyQ0FBRyxxQkFBcUIsTUFBTTtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsd0RBQW9CO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRThHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXV0b3BsYW5jYW0vLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9jaHVua3MvYnVuLXNxbGl0ZS1kaWFsZWN0Lm1qcz8xZjIxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBpbGVkUXVlcnksIERlZmF1bHRRdWVyeUNvbXBpbGVyLCBERUZBVUxUX01JR1JBVElPTl9UQUJMRSwgREVGQVVMVF9NSUdSQVRJT05fTE9DS19UQUJMRSwgc3FsIH0gZnJvbSAna3lzZWx5JztcblxuY2xhc3MgQnVuU3FsaXRlQWRhcHRlciB7XG4gIGdldCBzdXBwb3J0c0NyZWF0ZUlmTm90RXhpc3RzKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGdldCBzdXBwb3J0c1RyYW5zYWN0aW9uYWxEZGwoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGdldCBzdXBwb3J0c1JldHVybmluZygpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBhc3luYyBhY3F1aXJlTWlncmF0aW9uTG9jaygpIHtcbiAgfVxuICBhc3luYyByZWxlYXNlTWlncmF0aW9uTG9jaygpIHtcbiAgfVxuICBnZXQgc3VwcG9ydHNPdXRwdXQoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cbmNsYXNzIEJ1blNxbGl0ZURyaXZlciB7XG4gICNjb25maWc7XG4gICNjb25uZWN0aW9uTXV0ZXggPSBuZXcgQ29ubmVjdGlvbk11dGV4KCk7XG4gICNkYjtcbiAgI2Nvbm5lY3Rpb247XG4gIGNvbnN0cnVjdG9yKGNvbmZpZykge1xuICAgIHRoaXMuI2NvbmZpZyA9IHsgLi4uY29uZmlnIH07XG4gIH1cbiAgYXN5bmMgaW5pdCgpIHtcbiAgICB0aGlzLiNkYiA9IHRoaXMuI2NvbmZpZy5kYXRhYmFzZTtcbiAgICB0aGlzLiNjb25uZWN0aW9uID0gbmV3IEJ1blNxbGl0ZUNvbm5lY3Rpb24odGhpcy4jZGIpO1xuICAgIGlmICh0aGlzLiNjb25maWcub25DcmVhdGVDb25uZWN0aW9uKSB7XG4gICAgICBhd2FpdCB0aGlzLiNjb25maWcub25DcmVhdGVDb25uZWN0aW9uKHRoaXMuI2Nvbm5lY3Rpb24pO1xuICAgIH1cbiAgfVxuICBhc3luYyBhY3F1aXJlQ29ubmVjdGlvbigpIHtcbiAgICBhd2FpdCB0aGlzLiNjb25uZWN0aW9uTXV0ZXgubG9jaygpO1xuICAgIHJldHVybiB0aGlzLiNjb25uZWN0aW9uO1xuICB9XG4gIGFzeW5jIGJlZ2luVHJhbnNhY3Rpb24oY29ubmVjdGlvbikge1xuICAgIGF3YWl0IGNvbm5lY3Rpb24uZXhlY3V0ZVF1ZXJ5KENvbXBpbGVkUXVlcnkucmF3KFwiYmVnaW5cIikpO1xuICB9XG4gIGFzeW5jIGNvbW1pdFRyYW5zYWN0aW9uKGNvbm5lY3Rpb24pIHtcbiAgICBhd2FpdCBjb25uZWN0aW9uLmV4ZWN1dGVRdWVyeShDb21waWxlZFF1ZXJ5LnJhdyhcImNvbW1pdFwiKSk7XG4gIH1cbiAgYXN5bmMgcm9sbGJhY2tUcmFuc2FjdGlvbihjb25uZWN0aW9uKSB7XG4gICAgYXdhaXQgY29ubmVjdGlvbi5leGVjdXRlUXVlcnkoQ29tcGlsZWRRdWVyeS5yYXcoXCJyb2xsYmFja1wiKSk7XG4gIH1cbiAgYXN5bmMgcmVsZWFzZUNvbm5lY3Rpb24oKSB7XG4gICAgdGhpcy4jY29ubmVjdGlvbk11dGV4LnVubG9jaygpO1xuICB9XG4gIGFzeW5jIGRlc3Ryb3koKSB7XG4gICAgdGhpcy4jZGI/LmNsb3NlKCk7XG4gIH1cbn1cbmNsYXNzIEJ1blNxbGl0ZUNvbm5lY3Rpb24ge1xuICAjZGI7XG4gIGNvbnN0cnVjdG9yKGRiKSB7XG4gICAgdGhpcy4jZGIgPSBkYjtcbiAgfVxuICBleGVjdXRlUXVlcnkoY29tcGlsZWRRdWVyeSkge1xuICAgIGNvbnN0IHsgc3FsOiBzcWwyLCBwYXJhbWV0ZXJzIH0gPSBjb21waWxlZFF1ZXJ5O1xuICAgIGNvbnN0IHN0bXQgPSB0aGlzLiNkYi5wcmVwYXJlKHNxbDIpO1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoe1xuICAgICAgcm93czogc3RtdC5hbGwocGFyYW1ldGVycylcbiAgICB9KTtcbiAgfVxuICBhc3luYyAqc3RyZWFtUXVlcnkoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiU3RyZWFtaW5nIHF1ZXJ5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgU1FMaXRlIGRyaXZlci5cIik7XG4gIH1cbn1cbmNsYXNzIENvbm5lY3Rpb25NdXRleCB7XG4gICNwcm9taXNlO1xuICAjcmVzb2x2ZTtcbiAgYXN5bmMgbG9jaygpIHtcbiAgICB3aGlsZSAodGhpcy4jcHJvbWlzZSkge1xuICAgICAgYXdhaXQgdGhpcy4jcHJvbWlzZTtcbiAgICB9XG4gICAgdGhpcy4jcHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICB0aGlzLiNyZXNvbHZlID0gcmVzb2x2ZTtcbiAgICB9KTtcbiAgfVxuICB1bmxvY2soKSB7XG4gICAgY29uc3QgcmVzb2x2ZSA9IHRoaXMuI3Jlc29sdmU7XG4gICAgdGhpcy4jcHJvbWlzZSA9IHZvaWQgMDtcbiAgICB0aGlzLiNyZXNvbHZlID0gdm9pZCAwO1xuICAgIHJlc29sdmU/LigpO1xuICB9XG59XG5jbGFzcyBCdW5TcWxpdGVJbnRyb3NwZWN0b3Ige1xuICAjZGI7XG4gIGNvbnN0cnVjdG9yKGRiKSB7XG4gICAgdGhpcy4jZGIgPSBkYjtcbiAgfVxuICBhc3luYyBnZXRTY2hlbWFzKCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICBhc3luYyBnZXRUYWJsZXMob3B0aW9ucyA9IHsgd2l0aEludGVybmFsS3lzZWx5VGFibGVzOiBmYWxzZSB9KSB7XG4gICAgbGV0IHF1ZXJ5ID0gdGhpcy4jZGIuc2VsZWN0RnJvbShcInNxbGl0ZV9zY2hlbWFcIikud2hlcmUoXCJ0eXBlXCIsIFwiPVwiLCBcInRhYmxlXCIpLndoZXJlKFwibmFtZVwiLCBcIm5vdCBsaWtlXCIsIFwic3FsaXRlXyVcIikuc2VsZWN0KFwibmFtZVwiKS4kY2FzdFRvKCk7XG4gICAgaWYgKCFvcHRpb25zLndpdGhJbnRlcm5hbEt5c2VseVRhYmxlcykge1xuICAgICAgcXVlcnkgPSBxdWVyeS53aGVyZShcIm5hbWVcIiwgXCIhPVwiLCBERUZBVUxUX01JR1JBVElPTl9UQUJMRSkud2hlcmUoXCJuYW1lXCIsIFwiIT1cIiwgREVGQVVMVF9NSUdSQVRJT05fTE9DS19UQUJMRSk7XG4gICAgfVxuICAgIGNvbnN0IHRhYmxlcyA9IGF3YWl0IHF1ZXJ5LmV4ZWN1dGUoKTtcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwodGFibGVzLm1hcCgoeyBuYW1lIH0pID0+IHRoaXMuI2dldFRhYmxlTWV0YWRhdGEobmFtZSkpKTtcbiAgfVxuICBhc3luYyBnZXRNZXRhZGF0YShvcHRpb25zKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRhYmxlczogYXdhaXQgdGhpcy5nZXRUYWJsZXMob3B0aW9ucylcbiAgICB9O1xuICB9XG4gIGFzeW5jICNnZXRUYWJsZU1ldGFkYXRhKHRhYmxlKSB7XG4gICAgY29uc3QgZGIgPSB0aGlzLiNkYjtcbiAgICBjb25zdCBjcmVhdGVTcWwgPSBhd2FpdCBkYi5zZWxlY3RGcm9tKFwic3FsaXRlX21hc3RlclwiKS53aGVyZShcIm5hbWVcIiwgXCI9XCIsIHRhYmxlKS5zZWxlY3QoXCJzcWxcIikuJGNhc3RUbygpLmV4ZWN1dGUoKTtcbiAgICBjb25zdCBhdXRvSW5jcmVtZW50Q29sID0gY3JlYXRlU3FsWzBdPy5zcWw/LnNwbGl0KC9bXFwoXFwpLF0vKT8uZmluZCgoaXQpID0+IGl0LnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoXCJhdXRvaW5jcmVtZW50XCIpKT8uc3BsaXQoL1xccysvKT8uWzBdPy5yZXBsYWNlKC9bXCJgXS9nLCBcIlwiKTtcbiAgICBjb25zdCBjb2x1bW5zID0gYXdhaXQgZGIuc2VsZWN0RnJvbShcbiAgICAgIHNxbGBwcmFnbWFfdGFibGVfaW5mbygke3RhYmxlfSlgLmFzKFwidGFibGVfaW5mb1wiKVxuICAgICkuc2VsZWN0KFtcIm5hbWVcIiwgXCJ0eXBlXCIsIFwibm90bnVsbFwiLCBcImRmbHRfdmFsdWVcIl0pLmV4ZWN1dGUoKTtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogdGFibGUsXG4gICAgICBjb2x1bW5zOiBjb2x1bW5zLm1hcCgoY29sKSA9PiAoe1xuICAgICAgICBuYW1lOiBjb2wubmFtZSxcbiAgICAgICAgZGF0YVR5cGU6IGNvbC50eXBlLFxuICAgICAgICBpc051bGxhYmxlOiAhY29sLm5vdG51bGwsXG4gICAgICAgIGlzQXV0b0luY3JlbWVudGluZzogY29sLm5hbWUgPT09IGF1dG9JbmNyZW1lbnRDb2wsXG4gICAgICAgIGhhc0RlZmF1bHRWYWx1ZTogY29sLmRmbHRfdmFsdWUgIT0gbnVsbFxuICAgICAgfSkpLFxuICAgICAgaXNWaWV3OiB0cnVlXG4gICAgfTtcbiAgfVxufVxuY2xhc3MgQnVuU3FsaXRlUXVlcnlDb21waWxlciBleHRlbmRzIERlZmF1bHRRdWVyeUNvbXBpbGVyIHtcbiAgZ2V0Q3VycmVudFBhcmFtZXRlclBsYWNlaG9sZGVyKCkge1xuICAgIHJldHVybiBcIj9cIjtcbiAgfVxuICBnZXRMZWZ0SWRlbnRpZmllcldyYXBwZXIoKSB7XG4gICAgcmV0dXJuICdcIic7XG4gIH1cbiAgZ2V0UmlnaHRJZGVudGlmaWVyV3JhcHBlcigpIHtcbiAgICByZXR1cm4gJ1wiJztcbiAgfVxuICBnZXRBdXRvSW5jcmVtZW50KCkge1xuICAgIHJldHVybiBcImF1dG9pbmNyZW1lbnRcIjtcbiAgfVxufVxuY2xhc3MgQnVuU3FsaXRlRGlhbGVjdCB7XG4gICNjb25maWc7XG4gIGNvbnN0cnVjdG9yKGNvbmZpZykge1xuICAgIHRoaXMuI2NvbmZpZyA9IHsgLi4uY29uZmlnIH07XG4gIH1cbiAgY3JlYXRlRHJpdmVyKCkge1xuICAgIHJldHVybiBuZXcgQnVuU3FsaXRlRHJpdmVyKHRoaXMuI2NvbmZpZyk7XG4gIH1cbiAgY3JlYXRlUXVlcnlDb21waWxlcigpIHtcbiAgICByZXR1cm4gbmV3IEJ1blNxbGl0ZVF1ZXJ5Q29tcGlsZXIoKTtcbiAgfVxuICBjcmVhdGVBZGFwdGVyKCkge1xuICAgIHJldHVybiBuZXcgQnVuU3FsaXRlQWRhcHRlcigpO1xuICB9XG4gIGNyZWF0ZUludHJvc3BlY3RvcihkYikge1xuICAgIHJldHVybiBuZXcgQnVuU3FsaXRlSW50cm9zcGVjdG9yKGRiKTtcbiAgfVxufVxuXG5leHBvcnQgeyBCdW5TcWxpdGVBZGFwdGVyLCBCdW5TcWxpdGVEaWFsZWN0LCBCdW5TcWxpdGVEcml2ZXIsIEJ1blNxbGl0ZUludHJvc3BlY3RvciwgQnVuU3FsaXRlUXVlcnlDb21waWxlciB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/chunks/bun-sqlite-dialect.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/chunks/node-sqlite-dialect.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/better-auth/dist/chunks/node-sqlite-dialect.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NodeSqliteAdapter: () => (/* binding */ NodeSqliteAdapter),\n/* harmony export */   NodeSqliteDialect: () => (/* binding */ NodeSqliteDialect),\n/* harmony export */   NodeSqliteDriver: () => (/* binding */ NodeSqliteDriver),\n/* harmony export */   NodeSqliteIntrospector: () => (/* binding */ NodeSqliteIntrospector),\n/* harmony export */   NodeSqliteQueryCompiler: () => (/* binding */ NodeSqliteQueryCompiler)\n/* harmony export */ });\n/* harmony import */ var kysely__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! kysely */ \"(rsc)/./node_modules/kysely/dist/esm/query-compiler/compiled-query.js\");\n/* harmony import */ var kysely__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! kysely */ \"(rsc)/./node_modules/kysely/dist/esm/migration/migrator.js\");\n/* harmony import */ var kysely__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! kysely */ \"(rsc)/./node_modules/kysely/dist/esm/raw-builder/sql.js\");\n/* harmony import */ var kysely__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! kysely */ \"(rsc)/./node_modules/kysely/dist/esm/query-compiler/default-query-compiler.js\");\n\n\nclass NodeSqliteAdapter {\n  get supportsCreateIfNotExists() {\n    return true;\n  }\n  get supportsTransactionalDdl() {\n    return false;\n  }\n  get supportsReturning() {\n    return true;\n  }\n  async acquireMigrationLock() {\n  }\n  async releaseMigrationLock() {\n  }\n  get supportsOutput() {\n    return true;\n  }\n}\nclass NodeSqliteDriver {\n  #config;\n  #connectionMutex = new ConnectionMutex();\n  #db;\n  #connection;\n  constructor(config) {\n    this.#config = { ...config };\n  }\n  async init() {\n    this.#db = this.#config.database;\n    this.#connection = new NodeSqliteConnection(this.#db);\n    if (this.#config.onCreateConnection) {\n      await this.#config.onCreateConnection(this.#connection);\n    }\n  }\n  async acquireConnection() {\n    await this.#connectionMutex.lock();\n    return this.#connection;\n  }\n  async beginTransaction(connection) {\n    await connection.executeQuery(kysely__WEBPACK_IMPORTED_MODULE_0__.CompiledQuery.raw(\"begin\"));\n  }\n  async commitTransaction(connection) {\n    await connection.executeQuery(kysely__WEBPACK_IMPORTED_MODULE_0__.CompiledQuery.raw(\"commit\"));\n  }\n  async rollbackTransaction(connection) {\n    await connection.executeQuery(kysely__WEBPACK_IMPORTED_MODULE_0__.CompiledQuery.raw(\"rollback\"));\n  }\n  async releaseConnection() {\n    this.#connectionMutex.unlock();\n  }\n  async destroy() {\n    this.#db?.close();\n  }\n}\nclass NodeSqliteConnection {\n  #db;\n  constructor(db) {\n    this.#db = db;\n  }\n  executeQuery(compiledQuery) {\n    const { sql: sql2, parameters } = compiledQuery;\n    const stmt = this.#db.prepare(sql2);\n    const rows = stmt.all(...parameters);\n    return Promise.resolve({\n      rows\n    });\n  }\n  async *streamQuery() {\n    throw new Error(\"Streaming query is not supported by SQLite driver.\");\n  }\n}\nclass ConnectionMutex {\n  #promise;\n  #resolve;\n  async lock() {\n    while (this.#promise) {\n      await this.#promise;\n    }\n    this.#promise = new Promise((resolve) => {\n      this.#resolve = resolve;\n    });\n  }\n  unlock() {\n    const resolve = this.#resolve;\n    this.#promise = void 0;\n    this.#resolve = void 0;\n    resolve?.();\n  }\n}\nclass NodeSqliteIntrospector {\n  #db;\n  constructor(db) {\n    this.#db = db;\n  }\n  async getSchemas() {\n    return [];\n  }\n  async getTables(options = { withInternalKyselyTables: false }) {\n    let query = this.#db.selectFrom(\"sqlite_schema\").where(\"type\", \"=\", \"table\").where(\"name\", \"not like\", \"sqlite_%\").select(\"name\").$castTo();\n    if (!options.withInternalKyselyTables) {\n      query = query.where(\"name\", \"!=\", kysely__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_MIGRATION_TABLE).where(\"name\", \"!=\", kysely__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_MIGRATION_LOCK_TABLE);\n    }\n    const tables = await query.execute();\n    return Promise.all(tables.map(({ name }) => this.#getTableMetadata(name)));\n  }\n  async getMetadata(options) {\n    return {\n      tables: await this.getTables(options)\n    };\n  }\n  async #getTableMetadata(table) {\n    const db = this.#db;\n    const createSql = await db.selectFrom(\"sqlite_master\").where(\"name\", \"=\", table).select(\"sql\").$castTo().execute();\n    const autoIncrementCol = createSql[0]?.sql?.split(/[\\(\\),]/)?.find((it) => it.toLowerCase().includes(\"autoincrement\"))?.split(/\\s+/)?.[0]?.replace(/[\"`]/g, \"\");\n    const columns = await db.selectFrom(\n      (0,kysely__WEBPACK_IMPORTED_MODULE_2__.sql)`pragma_table_info(${table})`.as(\"table_info\")\n    ).select([\"name\", \"type\", \"notnull\", \"dflt_value\"]).execute();\n    return {\n      name: table,\n      columns: columns.map((col) => ({\n        name: col.name,\n        dataType: col.type,\n        isNullable: !col.notnull,\n        isAutoIncrementing: col.name === autoIncrementCol,\n        hasDefaultValue: col.dflt_value != null\n      })),\n      isView: true\n    };\n  }\n}\nclass NodeSqliteQueryCompiler extends kysely__WEBPACK_IMPORTED_MODULE_3__.DefaultQueryCompiler {\n  getCurrentParameterPlaceholder() {\n    return \"?\";\n  }\n  getLeftIdentifierWrapper() {\n    return '\"';\n  }\n  getRightIdentifierWrapper() {\n    return '\"';\n  }\n  getAutoIncrement() {\n    return \"autoincrement\";\n  }\n}\nclass NodeSqliteDialect {\n  #config;\n  constructor(config) {\n    this.#config = { ...config };\n  }\n  createDriver() {\n    return new NodeSqliteDriver(this.#config);\n  }\n  createQueryCompiler() {\n    return new NodeSqliteQueryCompiler();\n  }\n  createAdapter() {\n    return new NodeSqliteAdapter();\n  }\n  createIntrospector(db) {\n    return new NodeSqliteIntrospector(db);\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9jaHVua3Mvbm9kZS1zcWxpdGUtZGlhbGVjdC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQXlIOztBQUV6SDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsaURBQWE7QUFDL0M7QUFDQTtBQUNBLGtDQUFrQyxpREFBYTtBQUMvQztBQUNBO0FBQ0Esa0NBQWtDLGlEQUFhO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHdCQUF3QjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGlDQUFpQztBQUMvRDtBQUNBO0FBQ0Esd0NBQXdDLDJEQUF1QixzQkFBc0IsZ0VBQTRCO0FBQ2pIO0FBQ0E7QUFDQSxxQ0FBcUMsTUFBTTtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSwyQ0FBRyxxQkFBcUIsTUFBTTtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0Msd0RBQW9CO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRW1IIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXV0b3BsYW5jYW0vLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9jaHVua3Mvbm9kZS1zcWxpdGUtZGlhbGVjdC5tanM/ZTZiMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21waWxlZFF1ZXJ5LCBEZWZhdWx0UXVlcnlDb21waWxlciwgREVGQVVMVF9NSUdSQVRJT05fVEFCTEUsIERFRkFVTFRfTUlHUkFUSU9OX0xPQ0tfVEFCTEUsIHNxbCB9IGZyb20gJ2t5c2VseSc7XG5cbmNsYXNzIE5vZGVTcWxpdGVBZGFwdGVyIHtcbiAgZ2V0IHN1cHBvcnRzQ3JlYXRlSWZOb3RFeGlzdHMoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgZ2V0IHN1cHBvcnRzVHJhbnNhY3Rpb25hbERkbCgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgZ2V0IHN1cHBvcnRzUmV0dXJuaW5nKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGFzeW5jIGFjcXVpcmVNaWdyYXRpb25Mb2NrKCkge1xuICB9XG4gIGFzeW5jIHJlbGVhc2VNaWdyYXRpb25Mb2NrKCkge1xuICB9XG4gIGdldCBzdXBwb3J0c091dHB1dCgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuY2xhc3MgTm9kZVNxbGl0ZURyaXZlciB7XG4gICNjb25maWc7XG4gICNjb25uZWN0aW9uTXV0ZXggPSBuZXcgQ29ubmVjdGlvbk11dGV4KCk7XG4gICNkYjtcbiAgI2Nvbm5lY3Rpb247XG4gIGNvbnN0cnVjdG9yKGNvbmZpZykge1xuICAgIHRoaXMuI2NvbmZpZyA9IHsgLi4uY29uZmlnIH07XG4gIH1cbiAgYXN5bmMgaW5pdCgpIHtcbiAgICB0aGlzLiNkYiA9IHRoaXMuI2NvbmZpZy5kYXRhYmFzZTtcbiAgICB0aGlzLiNjb25uZWN0aW9uID0gbmV3IE5vZGVTcWxpdGVDb25uZWN0aW9uKHRoaXMuI2RiKTtcbiAgICBpZiAodGhpcy4jY29uZmlnLm9uQ3JlYXRlQ29ubmVjdGlvbikge1xuICAgICAgYXdhaXQgdGhpcy4jY29uZmlnLm9uQ3JlYXRlQ29ubmVjdGlvbih0aGlzLiNjb25uZWN0aW9uKTtcbiAgICB9XG4gIH1cbiAgYXN5bmMgYWNxdWlyZUNvbm5lY3Rpb24oKSB7XG4gICAgYXdhaXQgdGhpcy4jY29ubmVjdGlvbk11dGV4LmxvY2soKTtcbiAgICByZXR1cm4gdGhpcy4jY29ubmVjdGlvbjtcbiAgfVxuICBhc3luYyBiZWdpblRyYW5zYWN0aW9uKGNvbm5lY3Rpb24pIHtcbiAgICBhd2FpdCBjb25uZWN0aW9uLmV4ZWN1dGVRdWVyeShDb21waWxlZFF1ZXJ5LnJhdyhcImJlZ2luXCIpKTtcbiAgfVxuICBhc3luYyBjb21taXRUcmFuc2FjdGlvbihjb25uZWN0aW9uKSB7XG4gICAgYXdhaXQgY29ubmVjdGlvbi5leGVjdXRlUXVlcnkoQ29tcGlsZWRRdWVyeS5yYXcoXCJjb21taXRcIikpO1xuICB9XG4gIGFzeW5jIHJvbGxiYWNrVHJhbnNhY3Rpb24oY29ubmVjdGlvbikge1xuICAgIGF3YWl0IGNvbm5lY3Rpb24uZXhlY3V0ZVF1ZXJ5KENvbXBpbGVkUXVlcnkucmF3KFwicm9sbGJhY2tcIikpO1xuICB9XG4gIGFzeW5jIHJlbGVhc2VDb25uZWN0aW9uKCkge1xuICAgIHRoaXMuI2Nvbm5lY3Rpb25NdXRleC51bmxvY2soKTtcbiAgfVxuICBhc3luYyBkZXN0cm95KCkge1xuICAgIHRoaXMuI2RiPy5jbG9zZSgpO1xuICB9XG59XG5jbGFzcyBOb2RlU3FsaXRlQ29ubmVjdGlvbiB7XG4gICNkYjtcbiAgY29uc3RydWN0b3IoZGIpIHtcbiAgICB0aGlzLiNkYiA9IGRiO1xuICB9XG4gIGV4ZWN1dGVRdWVyeShjb21waWxlZFF1ZXJ5KSB7XG4gICAgY29uc3QgeyBzcWw6IHNxbDIsIHBhcmFtZXRlcnMgfSA9IGNvbXBpbGVkUXVlcnk7XG4gICAgY29uc3Qgc3RtdCA9IHRoaXMuI2RiLnByZXBhcmUoc3FsMik7XG4gICAgY29uc3Qgcm93cyA9IHN0bXQuYWxsKC4uLnBhcmFtZXRlcnMpO1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoe1xuICAgICAgcm93c1xuICAgIH0pO1xuICB9XG4gIGFzeW5jICpzdHJlYW1RdWVyeSgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJTdHJlYW1pbmcgcXVlcnkgaXMgbm90IHN1cHBvcnRlZCBieSBTUUxpdGUgZHJpdmVyLlwiKTtcbiAgfVxufVxuY2xhc3MgQ29ubmVjdGlvbk11dGV4IHtcbiAgI3Byb21pc2U7XG4gICNyZXNvbHZlO1xuICBhc3luYyBsb2NrKCkge1xuICAgIHdoaWxlICh0aGlzLiNwcm9taXNlKSB7XG4gICAgICBhd2FpdCB0aGlzLiNwcm9taXNlO1xuICAgIH1cbiAgICB0aGlzLiNwcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgIHRoaXMuI3Jlc29sdmUgPSByZXNvbHZlO1xuICAgIH0pO1xuICB9XG4gIHVubG9jaygpIHtcbiAgICBjb25zdCByZXNvbHZlID0gdGhpcy4jcmVzb2x2ZTtcbiAgICB0aGlzLiNwcm9taXNlID0gdm9pZCAwO1xuICAgIHRoaXMuI3Jlc29sdmUgPSB2b2lkIDA7XG4gICAgcmVzb2x2ZT8uKCk7XG4gIH1cbn1cbmNsYXNzIE5vZGVTcWxpdGVJbnRyb3NwZWN0b3Ige1xuICAjZGI7XG4gIGNvbnN0cnVjdG9yKGRiKSB7XG4gICAgdGhpcy4jZGIgPSBkYjtcbiAgfVxuICBhc3luYyBnZXRTY2hlbWFzKCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICBhc3luYyBnZXRUYWJsZXMob3B0aW9ucyA9IHsgd2l0aEludGVybmFsS3lzZWx5VGFibGVzOiBmYWxzZSB9KSB7XG4gICAgbGV0IHF1ZXJ5ID0gdGhpcy4jZGIuc2VsZWN0RnJvbShcInNxbGl0ZV9zY2hlbWFcIikud2hlcmUoXCJ0eXBlXCIsIFwiPVwiLCBcInRhYmxlXCIpLndoZXJlKFwibmFtZVwiLCBcIm5vdCBsaWtlXCIsIFwic3FsaXRlXyVcIikuc2VsZWN0KFwibmFtZVwiKS4kY2FzdFRvKCk7XG4gICAgaWYgKCFvcHRpb25zLndpdGhJbnRlcm5hbEt5c2VseVRhYmxlcykge1xuICAgICAgcXVlcnkgPSBxdWVyeS53aGVyZShcIm5hbWVcIiwgXCIhPVwiLCBERUZBVUxUX01JR1JBVElPTl9UQUJMRSkud2hlcmUoXCJuYW1lXCIsIFwiIT1cIiwgREVGQVVMVF9NSUdSQVRJT05fTE9DS19UQUJMRSk7XG4gICAgfVxuICAgIGNvbnN0IHRhYmxlcyA9IGF3YWl0IHF1ZXJ5LmV4ZWN1dGUoKTtcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwodGFibGVzLm1hcCgoeyBuYW1lIH0pID0+IHRoaXMuI2dldFRhYmxlTWV0YWRhdGEobmFtZSkpKTtcbiAgfVxuICBhc3luYyBnZXRNZXRhZGF0YShvcHRpb25zKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRhYmxlczogYXdhaXQgdGhpcy5nZXRUYWJsZXMob3B0aW9ucylcbiAgICB9O1xuICB9XG4gIGFzeW5jICNnZXRUYWJsZU1ldGFkYXRhKHRhYmxlKSB7XG4gICAgY29uc3QgZGIgPSB0aGlzLiNkYjtcbiAgICBjb25zdCBjcmVhdGVTcWwgPSBhd2FpdCBkYi5zZWxlY3RGcm9tKFwic3FsaXRlX21hc3RlclwiKS53aGVyZShcIm5hbWVcIiwgXCI9XCIsIHRhYmxlKS5zZWxlY3QoXCJzcWxcIikuJGNhc3RUbygpLmV4ZWN1dGUoKTtcbiAgICBjb25zdCBhdXRvSW5jcmVtZW50Q29sID0gY3JlYXRlU3FsWzBdPy5zcWw/LnNwbGl0KC9bXFwoXFwpLF0vKT8uZmluZCgoaXQpID0+IGl0LnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoXCJhdXRvaW5jcmVtZW50XCIpKT8uc3BsaXQoL1xccysvKT8uWzBdPy5yZXBsYWNlKC9bXCJgXS9nLCBcIlwiKTtcbiAgICBjb25zdCBjb2x1bW5zID0gYXdhaXQgZGIuc2VsZWN0RnJvbShcbiAgICAgIHNxbGBwcmFnbWFfdGFibGVfaW5mbygke3RhYmxlfSlgLmFzKFwidGFibGVfaW5mb1wiKVxuICAgICkuc2VsZWN0KFtcIm5hbWVcIiwgXCJ0eXBlXCIsIFwibm90bnVsbFwiLCBcImRmbHRfdmFsdWVcIl0pLmV4ZWN1dGUoKTtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogdGFibGUsXG4gICAgICBjb2x1bW5zOiBjb2x1bW5zLm1hcCgoY29sKSA9PiAoe1xuICAgICAgICBuYW1lOiBjb2wubmFtZSxcbiAgICAgICAgZGF0YVR5cGU6IGNvbC50eXBlLFxuICAgICAgICBpc051bGxhYmxlOiAhY29sLm5vdG51bGwsXG4gICAgICAgIGlzQXV0b0luY3JlbWVudGluZzogY29sLm5hbWUgPT09IGF1dG9JbmNyZW1lbnRDb2wsXG4gICAgICAgIGhhc0RlZmF1bHRWYWx1ZTogY29sLmRmbHRfdmFsdWUgIT0gbnVsbFxuICAgICAgfSkpLFxuICAgICAgaXNWaWV3OiB0cnVlXG4gICAgfTtcbiAgfVxufVxuY2xhc3MgTm9kZVNxbGl0ZVF1ZXJ5Q29tcGlsZXIgZXh0ZW5kcyBEZWZhdWx0UXVlcnlDb21waWxlciB7XG4gIGdldEN1cnJlbnRQYXJhbWV0ZXJQbGFjZWhvbGRlcigpIHtcbiAgICByZXR1cm4gXCI/XCI7XG4gIH1cbiAgZ2V0TGVmdElkZW50aWZpZXJXcmFwcGVyKCkge1xuICAgIHJldHVybiAnXCInO1xuICB9XG4gIGdldFJpZ2h0SWRlbnRpZmllcldyYXBwZXIoKSB7XG4gICAgcmV0dXJuICdcIic7XG4gIH1cbiAgZ2V0QXV0b0luY3JlbWVudCgpIHtcbiAgICByZXR1cm4gXCJhdXRvaW5jcmVtZW50XCI7XG4gIH1cbn1cbmNsYXNzIE5vZGVTcWxpdGVEaWFsZWN0IHtcbiAgI2NvbmZpZztcbiAgY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgdGhpcy4jY29uZmlnID0geyAuLi5jb25maWcgfTtcbiAgfVxuICBjcmVhdGVEcml2ZXIoKSB7XG4gICAgcmV0dXJuIG5ldyBOb2RlU3FsaXRlRHJpdmVyKHRoaXMuI2NvbmZpZyk7XG4gIH1cbiAgY3JlYXRlUXVlcnlDb21waWxlcigpIHtcbiAgICByZXR1cm4gbmV3IE5vZGVTcWxpdGVRdWVyeUNvbXBpbGVyKCk7XG4gIH1cbiAgY3JlYXRlQWRhcHRlcigpIHtcbiAgICByZXR1cm4gbmV3IE5vZGVTcWxpdGVBZGFwdGVyKCk7XG4gIH1cbiAgY3JlYXRlSW50cm9zcGVjdG9yKGRiKSB7XG4gICAgcmV0dXJuIG5ldyBOb2RlU3FsaXRlSW50cm9zcGVjdG9yKGRiKTtcbiAgfVxufVxuXG5leHBvcnQgeyBOb2RlU3FsaXRlQWRhcHRlciwgTm9kZVNxbGl0ZURpYWxlY3QsIE5vZGVTcWxpdGVEcml2ZXIsIE5vZGVTcWxpdGVJbnRyb3NwZWN0b3IsIE5vZGVTcWxpdGVRdWVyeUNvbXBpbGVyIH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/chunks/node-sqlite-dialect.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/crypto/index.mjs":
/*!********************************************************!*\
  !*** ./node_modules/better-auth/dist/crypto/index.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   compareHash: () => (/* binding */ compareHash),\n/* harmony export */   constantTimeEqual: () => (/* binding */ constantTimeEqual),\n/* harmony export */   generateRandomString: () => (/* reexport safe */ _shared_better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_4__.g),\n/* harmony export */   hashPassword: () => (/* binding */ hashPassword),\n/* harmony export */   hashToBase64: () => (/* binding */ hashToBase64),\n/* harmony export */   signJWT: () => (/* binding */ signJWT),\n/* harmony export */   symmetricDecrypt: () => (/* binding */ symmetricDecrypt),\n/* harmony export */   symmetricEncrypt: () => (/* binding */ symmetricEncrypt),\n/* harmony export */   verifyPassword: () => (/* binding */ verifyPassword)\n/* harmony export */ });\n/* harmony import */ var _better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @better-auth/utils/hash */ \"(rsc)/./node_modules/@better-auth/utils/dist/hash.mjs\");\n/* harmony import */ var _noble_ciphers_chacha_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @noble/ciphers/chacha.js */ \"(rsc)/./node_modules/@noble/ciphers/chacha.js\");\n/* harmony import */ var _noble_ciphers_utils_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @noble/ciphers/utils.js */ \"(rsc)/./node_modules/@noble/ciphers/utils.js\");\n/* harmony import */ var _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @better-auth/utils/base64 */ \"(rsc)/./node_modules/@better-auth/utils/dist/base64.mjs\");\n/* harmony import */ var jose__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! jose */ \"(rsc)/./node_modules/jose/dist/webapi/jwt/sign.js\");\n/* harmony import */ var _noble_hashes_scrypt_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @noble/hashes/scrypt.js */ \"(rsc)/./node_modules/@noble/hashes/scrypt.js\");\n/* harmony import */ var _better_auth_utils_hex__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @better-auth/utils/hex */ \"(rsc)/./node_modules/@better-auth/utils/dist/hex.mjs\");\n/* harmony import */ var _noble_hashes_utils_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @noble/hashes/utils.js */ \"(rsc)/./node_modules/@noble/hashes/utils.js\");\n/* harmony import */ var _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shared/better-auth.DdzSJf-n.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs\");\n/* harmony import */ var _shared_better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../shared/better-auth.B4Qoxdgc.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs\");\n/* harmony import */ var _better_auth_utils_random__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @better-auth/utils/random */ \"(rsc)/./node_modules/@better-auth/utils/dist/random.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\nasync function signJWT(payload, secret, expiresIn = 3600) {\n  const jwt = await new jose__WEBPACK_IMPORTED_MODULE_6__.SignJWT(payload).setProtectedHeader({ alg: \"HS256\" }).setIssuedAt().setExpirationTime(Math.floor(Date.now() / 1e3) + expiresIn).sign(new TextEncoder().encode(secret));\n  return jwt;\n}\n\nfunction constantTimeEqual(a, b) {\n  const aBuffer = new Uint8Array(a);\n  const bBuffer = new Uint8Array(b);\n  let c = aBuffer.length ^ bBuffer.length;\n  const length = Math.max(aBuffer.length, bBuffer.length);\n  for (let i = 0; i < length; i++) {\n    c |= (i < aBuffer.length ? aBuffer[i] : 0) ^ (i < bBuffer.length ? bBuffer[i] : 0);\n  }\n  return c === 0;\n}\n\nasync function hashToBase64(data) {\n  const buffer = await (0,_better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_0__.createHash)(\"SHA-256\").digest(data);\n  return _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_1__.base64.encode(buffer);\n}\nasync function compareHash(data, hash) {\n  const buffer = await (0,_better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_0__.createHash)(\"SHA-256\").digest(\n    typeof data === \"string\" ? new TextEncoder().encode(data) : data\n  );\n  const hashBuffer = _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_1__.base64.decode(hash);\n  return constantTimeEqual(buffer, hashBuffer);\n}\n\nconst config = {\n  N: 16384,\n  r: 16,\n  p: 1,\n  dkLen: 64\n};\nasync function generateKey(password, salt) {\n  return await (0,_noble_hashes_scrypt_js__WEBPACK_IMPORTED_MODULE_7__.scryptAsync)(password.normalize(\"NFKC\"), salt, {\n    N: config.N,\n    p: config.p,\n    r: config.r,\n    dkLen: config.dkLen,\n    maxmem: 128 * config.N * config.r * 2\n  });\n}\nconst hashPassword = async (password) => {\n  const salt = _better_auth_utils_hex__WEBPACK_IMPORTED_MODULE_2__.hex.encode(crypto.getRandomValues(new Uint8Array(16)));\n  const key = await generateKey(password, salt);\n  return `${salt}:${_better_auth_utils_hex__WEBPACK_IMPORTED_MODULE_2__.hex.encode(key)}`;\n};\nconst verifyPassword = async ({\n  hash,\n  password\n}) => {\n  const [salt, key] = hash.split(\":\");\n  if (!salt || !key) {\n    throw new _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_3__.B(\"Invalid password hash\");\n  }\n  const targetKey = await generateKey(password, salt);\n  return constantTimeEqual(targetKey, (0,_noble_hashes_utils_js__WEBPACK_IMPORTED_MODULE_8__.hexToBytes)(key));\n};\n\nconst symmetricEncrypt = async ({\n  key,\n  data\n}) => {\n  const keyAsBytes = await (0,_better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_0__.createHash)(\"SHA-256\").digest(key);\n  const dataAsBytes = (0,_noble_ciphers_utils_js__WEBPACK_IMPORTED_MODULE_9__.utf8ToBytes)(data);\n  const chacha = (0,_noble_ciphers_utils_js__WEBPACK_IMPORTED_MODULE_9__.managedNonce)(_noble_ciphers_chacha_js__WEBPACK_IMPORTED_MODULE_10__.xchacha20poly1305)(new Uint8Array(keyAsBytes));\n  return (0,_noble_ciphers_utils_js__WEBPACK_IMPORTED_MODULE_9__.bytesToHex)(chacha.encrypt(dataAsBytes));\n};\nconst symmetricDecrypt = async ({\n  key,\n  data\n}) => {\n  const keyAsBytes = await (0,_better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_0__.createHash)(\"SHA-256\").digest(key);\n  const dataAsBytes = (0,_noble_ciphers_utils_js__WEBPACK_IMPORTED_MODULE_9__.hexToBytes)(data);\n  const chacha = (0,_noble_ciphers_utils_js__WEBPACK_IMPORTED_MODULE_9__.managedNonce)(_noble_ciphers_chacha_js__WEBPACK_IMPORTED_MODULE_10__.xchacha20poly1305)(new Uint8Array(keyAsBytes));\n  return new TextDecoder().decode(chacha.decrypt(dataAsBytes));\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9jcnlwdG8vaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXFEO0FBQ1E7QUFDK0M7QUFDekQ7QUFDcEI7QUFDdUI7QUFDVDtBQUNPO0FBQ3NCO0FBQ0s7QUFDNUM7O0FBRW5DO0FBQ0Esd0JBQXdCLHlDQUFPLCtCQUErQixjQUFjO0FBQzVFO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixZQUFZO0FBQzlCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsdUJBQXVCLG1FQUFVO0FBQ2pDLFNBQVMsNkRBQU07QUFDZjtBQUNBO0FBQ0EsdUJBQXVCLG1FQUFVO0FBQ2pDO0FBQ0E7QUFDQSxxQkFBcUIsNkRBQU07QUFDM0I7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0VBQVc7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsZUFBZSx1REFBRztBQUNsQjtBQUNBLFlBQVksS0FBSyxHQUFHLHVEQUFHLGFBQWE7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLGNBQWMsK0RBQWU7QUFDN0I7QUFDQTtBQUNBLHNDQUFzQyxrRUFBVTtBQUNoRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsMkJBQTJCLG1FQUFVO0FBQ3JDLHNCQUFzQixvRUFBVztBQUNqQyxpQkFBaUIscUVBQVksQ0FBQyx3RUFBaUI7QUFDL0MsU0FBUyxtRUFBVTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCwyQkFBMkIsbUVBQVU7QUFDckMsc0JBQXNCLG1FQUFZO0FBQ2xDLGlCQUFpQixxRUFBWSxDQUFDLHdFQUFpQjtBQUMvQztBQUNBOztBQUVtSSIsInNvdXJjZXMiOlsid2VicGFjazovL2F1dG9wbGFuY2FtLy4vbm9kZV9tb2R1bGVzL2JldHRlci1hdXRoL2Rpc3QvY3J5cHRvL2luZGV4Lm1qcz83YmJiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUhhc2ggfSBmcm9tICdAYmV0dGVyLWF1dGgvdXRpbHMvaGFzaCc7XG5pbXBvcnQgeyB4Y2hhY2hhMjBwb2x5MTMwNSB9IGZyb20gJ0Bub2JsZS9jaXBoZXJzL2NoYWNoYS5qcyc7XG5pbXBvcnQgeyB1dGY4VG9CeXRlcywgbWFuYWdlZE5vbmNlLCBieXRlc1RvSGV4LCBoZXhUb0J5dGVzIGFzIGhleFRvQnl0ZXMkMSB9IGZyb20gJ0Bub2JsZS9jaXBoZXJzL3V0aWxzLmpzJztcbmltcG9ydCB7IGJhc2U2NCB9IGZyb20gJ0BiZXR0ZXItYXV0aC91dGlscy9iYXNlNjQnO1xuaW1wb3J0IHsgU2lnbkpXVCB9IGZyb20gJ2pvc2UnO1xuaW1wb3J0IHsgc2NyeXB0QXN5bmMgfSBmcm9tICdAbm9ibGUvaGFzaGVzL3NjcnlwdC5qcyc7XG5pbXBvcnQgeyBoZXggfSBmcm9tICdAYmV0dGVyLWF1dGgvdXRpbHMvaGV4JztcbmltcG9ydCB7IGhleFRvQnl0ZXMgfSBmcm9tICdAbm9ibGUvaGFzaGVzL3V0aWxzLmpzJztcbmltcG9ydCB7IEIgYXMgQmV0dGVyQXV0aEVycm9yIH0gZnJvbSAnLi4vc2hhcmVkL2JldHRlci1hdXRoLkRkelNKZi1uLm1qcyc7XG5leHBvcnQgeyBnIGFzIGdlbmVyYXRlUmFuZG9tU3RyaW5nIH0gZnJvbSAnLi4vc2hhcmVkL2JldHRlci1hdXRoLkI0UW94ZGdjLm1qcyc7XG5pbXBvcnQgJ0BiZXR0ZXItYXV0aC91dGlscy9yYW5kb20nO1xuXG5hc3luYyBmdW5jdGlvbiBzaWduSldUKHBheWxvYWQsIHNlY3JldCwgZXhwaXJlc0luID0gMzYwMCkge1xuICBjb25zdCBqd3QgPSBhd2FpdCBuZXcgU2lnbkpXVChwYXlsb2FkKS5zZXRQcm90ZWN0ZWRIZWFkZXIoeyBhbGc6IFwiSFMyNTZcIiB9KS5zZXRJc3N1ZWRBdCgpLnNldEV4cGlyYXRpb25UaW1lKE1hdGguZmxvb3IoRGF0ZS5ub3coKSAvIDFlMykgKyBleHBpcmVzSW4pLnNpZ24obmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKHNlY3JldCkpO1xuICByZXR1cm4gand0O1xufVxuXG5mdW5jdGlvbiBjb25zdGFudFRpbWVFcXVhbChhLCBiKSB7XG4gIGNvbnN0IGFCdWZmZXIgPSBuZXcgVWludDhBcnJheShhKTtcbiAgY29uc3QgYkJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KGIpO1xuICBsZXQgYyA9IGFCdWZmZXIubGVuZ3RoIF4gYkJ1ZmZlci5sZW5ndGg7XG4gIGNvbnN0IGxlbmd0aCA9IE1hdGgubWF4KGFCdWZmZXIubGVuZ3RoLCBiQnVmZmVyLmxlbmd0aCk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICBjIHw9IChpIDwgYUJ1ZmZlci5sZW5ndGggPyBhQnVmZmVyW2ldIDogMCkgXiAoaSA8IGJCdWZmZXIubGVuZ3RoID8gYkJ1ZmZlcltpXSA6IDApO1xuICB9XG4gIHJldHVybiBjID09PSAwO1xufVxuXG5hc3luYyBmdW5jdGlvbiBoYXNoVG9CYXNlNjQoZGF0YSkge1xuICBjb25zdCBidWZmZXIgPSBhd2FpdCBjcmVhdGVIYXNoKFwiU0hBLTI1NlwiKS5kaWdlc3QoZGF0YSk7XG4gIHJldHVybiBiYXNlNjQuZW5jb2RlKGJ1ZmZlcik7XG59XG5hc3luYyBmdW5jdGlvbiBjb21wYXJlSGFzaChkYXRhLCBoYXNoKSB7XG4gIGNvbnN0IGJ1ZmZlciA9IGF3YWl0IGNyZWF0ZUhhc2goXCJTSEEtMjU2XCIpLmRpZ2VzdChcbiAgICB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiA/IG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZShkYXRhKSA6IGRhdGFcbiAgKTtcbiAgY29uc3QgaGFzaEJ1ZmZlciA9IGJhc2U2NC5kZWNvZGUoaGFzaCk7XG4gIHJldHVybiBjb25zdGFudFRpbWVFcXVhbChidWZmZXIsIGhhc2hCdWZmZXIpO1xufVxuXG5jb25zdCBjb25maWcgPSB7XG4gIE46IDE2Mzg0LFxuICByOiAxNixcbiAgcDogMSxcbiAgZGtMZW46IDY0XG59O1xuYXN5bmMgZnVuY3Rpb24gZ2VuZXJhdGVLZXkocGFzc3dvcmQsIHNhbHQpIHtcbiAgcmV0dXJuIGF3YWl0IHNjcnlwdEFzeW5jKHBhc3N3b3JkLm5vcm1hbGl6ZShcIk5GS0NcIiksIHNhbHQsIHtcbiAgICBOOiBjb25maWcuTixcbiAgICBwOiBjb25maWcucCxcbiAgICByOiBjb25maWcucixcbiAgICBka0xlbjogY29uZmlnLmRrTGVuLFxuICAgIG1heG1lbTogMTI4ICogY29uZmlnLk4gKiBjb25maWcuciAqIDJcbiAgfSk7XG59XG5jb25zdCBoYXNoUGFzc3dvcmQgPSBhc3luYyAocGFzc3dvcmQpID0+IHtcbiAgY29uc3Qgc2FsdCA9IGhleC5lbmNvZGUoY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhuZXcgVWludDhBcnJheSgxNikpKTtcbiAgY29uc3Qga2V5ID0gYXdhaXQgZ2VuZXJhdGVLZXkocGFzc3dvcmQsIHNhbHQpO1xuICByZXR1cm4gYCR7c2FsdH06JHtoZXguZW5jb2RlKGtleSl9YDtcbn07XG5jb25zdCB2ZXJpZnlQYXNzd29yZCA9IGFzeW5jICh7XG4gIGhhc2gsXG4gIHBhc3N3b3JkXG59KSA9PiB7XG4gIGNvbnN0IFtzYWx0LCBrZXldID0gaGFzaC5zcGxpdChcIjpcIik7XG4gIGlmICghc2FsdCB8fCAha2V5KSB7XG4gICAgdGhyb3cgbmV3IEJldHRlckF1dGhFcnJvcihcIkludmFsaWQgcGFzc3dvcmQgaGFzaFwiKTtcbiAgfVxuICBjb25zdCB0YXJnZXRLZXkgPSBhd2FpdCBnZW5lcmF0ZUtleShwYXNzd29yZCwgc2FsdCk7XG4gIHJldHVybiBjb25zdGFudFRpbWVFcXVhbCh0YXJnZXRLZXksIGhleFRvQnl0ZXMoa2V5KSk7XG59O1xuXG5jb25zdCBzeW1tZXRyaWNFbmNyeXB0ID0gYXN5bmMgKHtcbiAga2V5LFxuICBkYXRhXG59KSA9PiB7XG4gIGNvbnN0IGtleUFzQnl0ZXMgPSBhd2FpdCBjcmVhdGVIYXNoKFwiU0hBLTI1NlwiKS5kaWdlc3Qoa2V5KTtcbiAgY29uc3QgZGF0YUFzQnl0ZXMgPSB1dGY4VG9CeXRlcyhkYXRhKTtcbiAgY29uc3QgY2hhY2hhID0gbWFuYWdlZE5vbmNlKHhjaGFjaGEyMHBvbHkxMzA1KShuZXcgVWludDhBcnJheShrZXlBc0J5dGVzKSk7XG4gIHJldHVybiBieXRlc1RvSGV4KGNoYWNoYS5lbmNyeXB0KGRhdGFBc0J5dGVzKSk7XG59O1xuY29uc3Qgc3ltbWV0cmljRGVjcnlwdCA9IGFzeW5jICh7XG4gIGtleSxcbiAgZGF0YVxufSkgPT4ge1xuICBjb25zdCBrZXlBc0J5dGVzID0gYXdhaXQgY3JlYXRlSGFzaChcIlNIQS0yNTZcIikuZGlnZXN0KGtleSk7XG4gIGNvbnN0IGRhdGFBc0J5dGVzID0gaGV4VG9CeXRlcyQxKGRhdGEpO1xuICBjb25zdCBjaGFjaGEgPSBtYW5hZ2VkTm9uY2UoeGNoYWNoYTIwcG9seTEzMDUpKG5ldyBVaW50OEFycmF5KGtleUFzQnl0ZXMpKTtcbiAgcmV0dXJuIG5ldyBUZXh0RGVjb2RlcigpLmRlY29kZShjaGFjaGEuZGVjcnlwdChkYXRhQXNCeXRlcykpO1xufTtcblxuZXhwb3J0IHsgY29tcGFyZUhhc2gsIGNvbnN0YW50VGltZUVxdWFsLCBoYXNoUGFzc3dvcmQsIGhhc2hUb0Jhc2U2NCwgc2lnbkpXVCwgc3ltbWV0cmljRGVjcnlwdCwgc3ltbWV0cmljRW5jcnlwdCwgdmVyaWZ5UGFzc3dvcmQgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/crypto/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/index.mjs":
/*!*************************************************!*\
  !*** ./node_modules/better-auth/dist/index.mjs ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APIError: () => (/* reexport safe */ better_call__WEBPACK_IMPORTED_MODULE_6__.APIError),\n/* harmony export */   BetterAuthError: () => (/* reexport safe */ _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_1__.B),\n/* harmony export */   HIDE_METADATA: () => (/* reexport safe */ _shared_better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_3__.H),\n/* harmony export */   MissingDependencyError: () => (/* reexport safe */ _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_1__.M),\n/* harmony export */   betterAuth: () => (/* reexport safe */ _shared_better_auth_mPTDVpKF_mjs__WEBPACK_IMPORTED_MODULE_0__.b),\n/* harmony export */   capitalizeFirstLetter: () => (/* reexport safe */ _shared_better_auth_D_2CmEwz_mjs__WEBPACK_IMPORTED_MODULE_2__.c),\n/* harmony export */   createLogger: () => (/* reexport safe */ _shared_better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_5__.c),\n/* harmony export */   createTelemetry: () => (/* reexport safe */ _shared_better_auth_mPTDVpKF_mjs__WEBPACK_IMPORTED_MODULE_0__.c),\n/* harmony export */   generateId: () => (/* reexport safe */ _shared_better_auth_BUPPRXfK_mjs__WEBPACK_IMPORTED_MODULE_4__.g),\n/* harmony export */   generateState: () => (/* reexport safe */ _shared_better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_3__.g),\n/* harmony export */   getTelemetryAuthConfig: () => (/* reexport safe */ _shared_better_auth_mPTDVpKF_mjs__WEBPACK_IMPORTED_MODULE_0__.g),\n/* harmony export */   levels: () => (/* reexport safe */ _shared_better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_5__.l),\n/* harmony export */   logger: () => (/* reexport safe */ _shared_better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_5__.a),\n/* harmony export */   parseState: () => (/* reexport safe */ _shared_better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_3__.p),\n/* harmony export */   shouldPublishLog: () => (/* reexport safe */ _shared_better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_5__.s)\n/* harmony export */ });\n/* harmony import */ var _shared_better_auth_mPTDVpKF_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shared/better-auth.mPTDVpKF.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.mPTDVpKF.mjs\");\n/* harmony import */ var _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shared/better-auth.DdzSJf-n.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs\");\n/* harmony import */ var _shared_better_auth_D_2CmEwz_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./shared/better-auth.D-2CmEwz.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.D-2CmEwz.mjs\");\n/* harmony import */ var _shared_better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./shared/better-auth.C3-_8m-g.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.C3-_8m-g.mjs\");\n/* harmony import */ var _shared_better_auth_BUPPRXfK_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./shared/better-auth.BUPPRXfK.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.BUPPRXfK.mjs\");\n/* harmony import */ var _shared_better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./shared/better-auth.DgGir396.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DgGir396.mjs\");\n/* harmony import */ var better_call__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! better-call */ \"(rsc)/./node_modules/better-call/dist/index.js\");\n/* harmony import */ var _shared_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./shared/better-auth.C5vDERgF.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.C5vDERgF.mjs\");\n/* harmony import */ var _shared_better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./shared/better-auth.CiuwFiHM.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.CiuwFiHM.mjs\");\n/* harmony import */ var _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @better-auth/utils/base64 */ \"(rsc)/./node_modules/@better-auth/utils/dist/base64.mjs\");\n/* harmony import */ var _better_auth_utils_hmac__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @better-auth/utils/hmac */ \"(rsc)/./node_modules/@better-auth/utils/dist/hmac.mjs\");\n/* harmony import */ var _better_auth_utils_binary__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @better-auth/utils/binary */ \"(rsc)/./node_modules/@better-auth/utils/dist/binary.mjs\");\n/* harmony import */ var _better_auth_core_db__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @better-auth/core/db */ \"(rsc)/./node_modules/@better-auth/core/dist/db/index.mjs\");\n/* harmony import */ var _api_index_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./api/index.mjs */ \"(rsc)/./node_modules/better-auth/dist/api/index.mjs\");\n/* harmony import */ var _shared_better_auth_DiMXeqeq_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./shared/better-auth.DiMXeqeq.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DiMXeqeq.mjs\");\n/* harmony import */ var _shared_better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./shared/better-auth.CW6D9eSx.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.CW6D9eSx.mjs\");\n/* harmony import */ var _shared_better_auth_BTrSrKsi_mjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./shared/better-auth.BTrSrKsi.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.BTrSrKsi.mjs\");\n/* harmony import */ var _shared_better_auth_BRFtaovt_mjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./shared/better-auth.BRFtaovt.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.BRFtaovt.mjs\");\n/* harmony import */ var _shared_better_auth_BLnvK9hk_mjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./shared/better-auth.BLnvK9hk.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.BLnvK9hk.mjs\");\n/* harmony import */ var _better_auth_utils_random__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @better-auth/utils/random */ \"(rsc)/./node_modules/@better-auth/utils/dist/random.mjs\");\n/* harmony import */ var _better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @better-auth/utils/hash */ \"(rsc)/./node_modules/@better-auth/utils/dist/hash.mjs\");\n/* harmony import */ var _better_auth_utils_hex__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @better-auth/utils/hex */ \"(rsc)/./node_modules/@better-auth/utils/dist/hex.mjs\");\n/* harmony import */ var _shared_better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./shared/better-auth.B4Qoxdgc.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs\");\n/* harmony import */ var _shared_better_auth_BQOp_6ij_mjs__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./shared/better-auth.BQOp-6ij.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.BQOp-6ij.mjs\");\n/* harmony import */ var defu__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! defu */ \"(rsc)/./node_modules/defu/dist/defu.mjs\");\n/* harmony import */ var _crypto_index_mjs__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./crypto/index.mjs */ \"(rsc)/./node_modules/better-auth/dist/crypto/index.mjs\");\n/* harmony import */ var _shared_better_auth_D_L3RQ6y_mjs__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./shared/better-auth.D-L3RQ6y.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.D-L3RQ6y.mjs\");\n/* harmony import */ var _shared_better_auth_DhziC0ap_mjs__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./shared/better-auth.DhziC0ap.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DhziC0ap.mjs\");\n/* harmony import */ var _shared_better_auth_BAk2ZmIN_mjs__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./shared/better-auth.BAk2ZmIN.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.BAk2ZmIN.mjs\");\n/* harmony import */ var _shared_better_auth_BvvYEWCP_mjs__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./shared/better-auth.BvvYEWCP.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.BvvYEWCP.mjs\");\n/* harmony import */ var _shared_better_auth_QSZgH9k6_mjs__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./shared/better-auth.QSZgH9k6.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.QSZgH9k6.mjs\");\n/* harmony import */ var _shared_better_auth_YwDQhoPc_mjs__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./shared/better-auth.YwDQhoPc.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.YwDQhoPc.mjs\");\n/* harmony import */ var _better_fetch_fetch__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! @better-fetch/fetch */ \"(rsc)/./node_modules/@better-fetch/fetch/dist/index.js\");\n/* harmony import */ var _shared_better_auth_D2xndZ2p_mjs__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./shared/better-auth.D2xndZ2p.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.D2xndZ2p.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUF1SDtBQUNqQjtBQUN2QjtBQUM2QjtBQUN4QztBQUNtRDtBQUNoRjtBQUNJO0FBQzlCO0FBQzhCO0FBQ1I7QUFDRjtBQUNFO0FBQ0w7QUFDZDtBQUNTO0FBQ2tCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDUjtBQUNGO0FBQ0M7QUFDRDtBQUNuQjtBQUNtQjtBQUNEO0FBQ0E7QUFDVztBQUNBO0FBQzdCO0FBQ2M7QUFDZTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDZDtBQUNSO0FBQ3NCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXV0b3BsYW5jYW0vLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9pbmRleC5tanM/MGU1OCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgeyBiIGFzIGJldHRlckF1dGgsIGMgYXMgY3JlYXRlVGVsZW1ldHJ5LCBnIGFzIGdldFRlbGVtZXRyeUF1dGhDb25maWcgfSBmcm9tICcuL3NoYXJlZC9iZXR0ZXItYXV0aC5tUFREVnBLRi5tanMnO1xuZXhwb3J0IHsgQiBhcyBCZXR0ZXJBdXRoRXJyb3IsIE0gYXMgTWlzc2luZ0RlcGVuZGVuY3lFcnJvciB9IGZyb20gJy4vc2hhcmVkL2JldHRlci1hdXRoLkRkelNKZi1uLm1qcyc7XG5leHBvcnQgeyBjIGFzIGNhcGl0YWxpemVGaXJzdExldHRlciB9IGZyb20gJy4vc2hhcmVkL2JldHRlci1hdXRoLkQtMkNtRXd6Lm1qcyc7XG5leHBvcnQgeyBIIGFzIEhJREVfTUVUQURBVEEsIGcgYXMgZ2VuZXJhdGVTdGF0ZSwgcCBhcyBwYXJzZVN0YXRlIH0gZnJvbSAnLi9zaGFyZWQvYmV0dGVyLWF1dGguQzMtXzhtLWcubWpzJztcbmV4cG9ydCB7IGcgYXMgZ2VuZXJhdGVJZCB9IGZyb20gJy4vc2hhcmVkL2JldHRlci1hdXRoLkJVUFBSWGZLLm1qcyc7XG5leHBvcnQgeyBjIGFzIGNyZWF0ZUxvZ2dlciwgbCBhcyBsZXZlbHMsIGEgYXMgbG9nZ2VyLCBzIGFzIHNob3VsZFB1Ymxpc2hMb2cgfSBmcm9tICcuL3NoYXJlZC9iZXR0ZXItYXV0aC5EZ0dpcjM5Ni5tanMnO1xuZXhwb3J0IHsgQVBJRXJyb3IgfSBmcm9tICdiZXR0ZXItY2FsbCc7XG5pbXBvcnQgJy4vc2hhcmVkL2JldHRlci1hdXRoLkM1dkRFUmdGLm1qcyc7XG5pbXBvcnQgJ3pvZCc7XG5pbXBvcnQgJy4vc2hhcmVkL2JldHRlci1hdXRoLkNpdXdGaUhNLm1qcyc7XG5pbXBvcnQgJ0BiZXR0ZXItYXV0aC91dGlscy9iYXNlNjQnO1xuaW1wb3J0ICdAYmV0dGVyLWF1dGgvdXRpbHMvaG1hYyc7XG5pbXBvcnQgJ0BiZXR0ZXItYXV0aC91dGlscy9iaW5hcnknO1xuaW1wb3J0ICdAYmV0dGVyLWF1dGgvY29yZS9kYic7XG5pbXBvcnQgJ2t5c2VseSc7XG5pbXBvcnQgJy4vYXBpL2luZGV4Lm1qcyc7XG5pbXBvcnQgJy4vc2hhcmVkL2JldHRlci1hdXRoLkRpTVhlcWVxLm1qcyc7XG5pbXBvcnQgJy4vc2hhcmVkL2JldHRlci1hdXRoLkNXNkQ5ZVN4Lm1qcyc7XG5pbXBvcnQgJy4vc2hhcmVkL2JldHRlci1hdXRoLkJUclNyS3NpLm1qcyc7XG5pbXBvcnQgJy4vc2hhcmVkL2JldHRlci1hdXRoLkJSRnRhb3Z0Lm1qcyc7XG5pbXBvcnQgJy4vc2hhcmVkL2JldHRlci1hdXRoLkJMbnZLOWhrLm1qcyc7XG5pbXBvcnQgJ0BiZXR0ZXItYXV0aC91dGlscy9yYW5kb20nO1xuaW1wb3J0ICdAYmV0dGVyLWF1dGgvdXRpbHMvaGFzaCc7XG5pbXBvcnQgJ0Bub2JsZS9jaXBoZXJzL2NoYWNoYS5qcyc7XG5pbXBvcnQgJ0Bub2JsZS9jaXBoZXJzL3V0aWxzLmpzJztcbmltcG9ydCAnam9zZSc7XG5pbXBvcnQgJ0Bub2JsZS9oYXNoZXMvc2NyeXB0LmpzJztcbmltcG9ydCAnQGJldHRlci1hdXRoL3V0aWxzL2hleCc7XG5pbXBvcnQgJ0Bub2JsZS9oYXNoZXMvdXRpbHMuanMnO1xuaW1wb3J0ICcuL3NoYXJlZC9iZXR0ZXItYXV0aC5CNFFveGRnYy5tanMnO1xuaW1wb3J0ICcuL3NoYXJlZC9iZXR0ZXItYXV0aC5CUU9wLTZpai5tanMnO1xuaW1wb3J0ICdkZWZ1JztcbmltcG9ydCAnLi9jcnlwdG8vaW5kZXgubWpzJztcbmltcG9ydCAnLi9zaGFyZWQvYmV0dGVyLWF1dGguRC1MM1JRNnkubWpzJztcbmltcG9ydCAnLi9zaGFyZWQvYmV0dGVyLWF1dGguRGh6aUMwYXAubWpzJztcbmltcG9ydCAnLi9zaGFyZWQvYmV0dGVyLWF1dGguQkFrMlptSU4ubWpzJztcbmltcG9ydCAnLi9zaGFyZWQvYmV0dGVyLWF1dGguQnZ2WUVXQ1AubWpzJztcbmltcG9ydCAnLi9zaGFyZWQvYmV0dGVyLWF1dGguUVNaZ0g5azYubWpzJztcbmltcG9ydCAnLi9zaGFyZWQvYmV0dGVyLWF1dGguWXdEUWhvUGMubWpzJztcbmltcG9ydCAnQGJldHRlci1mZXRjaC9mZXRjaCc7XG5pbXBvcnQgJ2pvc2UvZXJyb3JzJztcbmltcG9ydCAnLi9zaGFyZWQvYmV0dGVyLWF1dGguRDJ4bmRaMnAubWpzJztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/integrations/next-js.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/better-auth/dist/integrations/next-js.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   nextCookies: () => (/* binding */ nextCookies),\n/* harmony export */   toNextJsHandler: () => (/* binding */ toNextJsHandler)\n/* harmony export */ });\n/* harmony import */ var _shared_better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/better-auth.CiuwFiHM.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.CiuwFiHM.mjs\");\n/* harmony import */ var _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @better-auth/utils/base64 */ \"(rsc)/./node_modules/@better-auth/utils/dist/base64.mjs\");\n/* harmony import */ var _better_auth_utils_hmac__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @better-auth/utils/hmac */ \"(rsc)/./node_modules/@better-auth/utils/dist/hmac.mjs\");\n/* harmony import */ var _shared_better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shared/better-auth.DgGir396.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DgGir396.mjs\");\n/* harmony import */ var _better_auth_utils_binary__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @better-auth/utils/binary */ \"(rsc)/./node_modules/@better-auth/utils/dist/binary.mjs\");\n/* harmony import */ var _shared_better_auth_DiMXeqeq_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../shared/better-auth.DiMXeqeq.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DiMXeqeq.mjs\");\n/* harmony import */ var better_call__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! better-call */ \"(rsc)/./node_modules/better-call/dist/index.js\");\n/* harmony import */ var _shared_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../shared/better-auth.C5vDERgF.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.C5vDERgF.mjs\");\n/* harmony import */ var _shared_better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../shared/better-auth.C3-_8m-g.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.C3-_8m-g.mjs\");\n/* harmony import */ var _better_auth_core_db__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @better-auth/core/db */ \"(rsc)/./node_modules/@better-auth/core/dist/db/index.mjs\");\n/* harmony import */ var _better_auth_utils_random__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @better-auth/utils/random */ \"(rsc)/./node_modules/@better-auth/utils/dist/random.mjs\");\n/* harmony import */ var _better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @better-auth/utils/hash */ \"(rsc)/./node_modules/@better-auth/utils/dist/hash.mjs\");\n/* harmony import */ var _better_auth_utils_hex__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @better-auth/utils/hex */ \"(rsc)/./node_modules/@better-auth/utils/dist/hex.mjs\");\n/* harmony import */ var _shared_better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../shared/better-auth.B4Qoxdgc.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs\");\n/* harmony import */ var _shared_better_auth_CJoIWSTC_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../shared/better-auth.CJoIWSTC.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.CJoIWSTC.mjs\");\n/* harmony import */ var _plugins_organization_access_index_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../plugins/organization/access/index.mjs */ \"(rsc)/./node_modules/better-auth/dist/plugins/organization/access/index.mjs\");\n/* harmony import */ var _better_auth_utils_otp__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @better-auth/utils/otp */ \"(rsc)/./node_modules/@better-auth/utils/dist/otp.mjs\");\n/* harmony import */ var _plugins_admin_access_index_mjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../plugins/admin/access/index.mjs */ \"(rsc)/./node_modules/better-auth/dist/plugins/admin/access/index.mjs\");\n/* harmony import */ var _better_fetch_fetch__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @better-fetch/fetch */ \"(rsc)/./node_modules/@better-fetch/fetch/dist/index.js\");\n/* harmony import */ var _better_auth_utils__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @better-auth/utils */ \"(rsc)/./node_modules/@better-auth/utils/dist/index.mjs\");\n/* harmony import */ var _plugins_custom_session_index_mjs__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../plugins/custom-session/index.mjs */ \"(rsc)/./node_modules/better-auth/dist/plugins/custom-session/index.mjs\");\n/* harmony import */ var _plugins_device_authorization_index_mjs__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../plugins/device-authorization/index.mjs */ \"(rsc)/./node_modules/better-auth/dist/plugins/device-authorization/index.mjs\");\n/* harmony import */ var _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../shared/better-auth.DdzSJf-n.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs\");\n/* harmony import */ var _shared_better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../shared/better-auth.CW6D9eSx.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.CW6D9eSx.mjs\");\n/* harmony import */ var _shared_better_auth_BTrSrKsi_mjs__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../shared/better-auth.BTrSrKsi.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.BTrSrKsi.mjs\");\n/* harmony import */ var _shared_better_auth_BRFtaovt_mjs__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../shared/better-auth.BRFtaovt.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.BRFtaovt.mjs\");\n/* harmony import */ var _shared_better_auth_D2xndZ2p_mjs__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../shared/better-auth.D2xndZ2p.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.D2xndZ2p.mjs\");\n/* harmony import */ var _crypto_index_mjs__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ../crypto/index.mjs */ \"(rsc)/./node_modules/better-auth/dist/crypto/index.mjs\");\n/* harmony import */ var _shared_better_auth_BUPPRXfK_mjs__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ../shared/better-auth.BUPPRXfK.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.BUPPRXfK.mjs\");\n/* harmony import */ var defu__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! defu */ \"(rsc)/./node_modules/defu/dist/defu.mjs\");\n/* harmony import */ var _plugins_access_index_mjs__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ../plugins/access/index.mjs */ \"(rsc)/./node_modules/better-auth/dist/plugins/access/index.mjs\");\n/* harmony import */ var _shared_better_auth_DQI8AD7d_mjs__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ../shared/better-auth.DQI8AD7d.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DQI8AD7d.mjs\");\n/* harmony import */ var _shared_better_auth_BLnvK9hk_mjs__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ../shared/better-auth.BLnvK9hk.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.BLnvK9hk.mjs\");\n/* harmony import */ var _shared_better_auth_BpA03GIs_mjs__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ../shared/better-auth.BpA03GIs.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.BpA03GIs.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction toNextJsHandler(auth) {\n  const handler = async (request) => {\n    return \"handler\" in auth ? auth.handler(request) : auth(request);\n  };\n  return {\n    GET: handler,\n    POST: handler\n  };\n}\nconst nextCookies = () => {\n  return {\n    id: \"next-cookies\",\n    hooks: {\n      after: [\n        {\n          matcher(ctx) {\n            return true;\n          },\n          handler: (0,_shared_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_7__.c)(async (ctx) => {\n            const returned = ctx.context.responseHeaders;\n            if (\"_flag\" in ctx && ctx._flag === \"router\") {\n              return;\n            }\n            if (returned instanceof Headers) {\n              const setCookies = returned?.get(\"set-cookie\");\n              if (!setCookies) return;\n              const parsed = (0,_shared_better_auth_DiMXeqeq_mjs__WEBPACK_IMPORTED_MODULE_5__.p)(setCookies);\n              const { cookies } = await __webpack_require__.e(/*! import() */ \"vendor-chunks/next\").then(__webpack_require__.bind(__webpack_require__, /*! next/headers */ \"(rsc)/./node_modules/next/dist/api/headers.js\"));\n              let cookieHelper;\n              try {\n                cookieHelper = await cookies();\n              } catch (error) {\n                if (error instanceof Error && error.message.startsWith(\n                  \"`cookies` was called outside a request scope.\"\n                )) {\n                  return;\n                }\n                throw error;\n              }\n              parsed.forEach((value, key) => {\n                if (!key) return;\n                const opts = {\n                  sameSite: value.samesite,\n                  secure: value.secure,\n                  maxAge: value[\"max-age\"],\n                  httpOnly: value.httponly,\n                  domain: value.domain,\n                  path: value.path\n                };\n                try {\n                  cookieHelper.set(key, decodeURIComponent(value.value), opts);\n                } catch (e) {\n                }\n              });\n              return;\n            }\n          })\n        }\n      ]\n    }\n  };\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9pbnRlZ3JhdGlvbnMvbmV4dC1qcy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQTRDO0FBQ1Q7QUFDRjtBQUNXO0FBQ1Q7QUFDNEM7QUFDMUQ7QUFDUjtBQUNrRTtBQUNuQztBQUNkO0FBQ0s7QUFDRjtBQUNDO0FBQ0Q7QUFDbkI7QUFDbUI7QUFDRDtBQUNBO0FBQ1k7QUFDNUI7QUFDNEI7QUFDTTtBQUNsQjtBQUNXO0FBQ2Q7QUFDRDtBQUNpQjtBQUNkO0FBQ29CO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNmO0FBQ1I7QUFDdUI7QUFDOUI7QUFDdUI7QUFDTztBQUNBO0FBQ0E7O0FBRTVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1gsbUJBQW1CLG1FQUFvQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixtRUFBb0I7QUFDakQsc0JBQXNCLFVBQVUsUUFBUSxvTEFBc0I7QUFDOUQ7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hdXRvcGxhbmNhbS8uL25vZGVfbW9kdWxlcy9iZXR0ZXItYXV0aC9kaXN0L2ludGVncmF0aW9ucy9uZXh0LWpzLm1qcz9jMDNlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnLi4vc2hhcmVkL2JldHRlci1hdXRoLkNpdXdGaUhNLm1qcyc7XG5pbXBvcnQgJ0BiZXR0ZXItYXV0aC91dGlscy9iYXNlNjQnO1xuaW1wb3J0ICdAYmV0dGVyLWF1dGgvdXRpbHMvaG1hYyc7XG5pbXBvcnQgJy4uL3NoYXJlZC9iZXR0ZXItYXV0aC5EZ0dpcjM5Ni5tanMnO1xuaW1wb3J0ICdAYmV0dGVyLWF1dGgvdXRpbHMvYmluYXJ5JztcbmltcG9ydCB7IHAgYXMgcGFyc2VTZXRDb29raWVIZWFkZXIgfSBmcm9tICcuLi9zaGFyZWQvYmV0dGVyLWF1dGguRGlNWGVxZXEubWpzJztcbmltcG9ydCAnYmV0dGVyLWNhbGwnO1xuaW1wb3J0ICd6b2QnO1xuaW1wb3J0IHsgYyBhcyBjcmVhdGVBdXRoTWlkZGxld2FyZSB9IGZyb20gJy4uL3NoYXJlZC9iZXR0ZXItYXV0aC5DNXZERVJnRi5tanMnO1xuaW1wb3J0ICcuLi9zaGFyZWQvYmV0dGVyLWF1dGguQzMtXzhtLWcubWpzJztcbmltcG9ydCAnQGJldHRlci1hdXRoL2NvcmUvZGInO1xuaW1wb3J0ICdAYmV0dGVyLWF1dGgvdXRpbHMvcmFuZG9tJztcbmltcG9ydCAnQGJldHRlci1hdXRoL3V0aWxzL2hhc2gnO1xuaW1wb3J0ICdAbm9ibGUvY2lwaGVycy9jaGFjaGEuanMnO1xuaW1wb3J0ICdAbm9ibGUvY2lwaGVycy91dGlscy5qcyc7XG5pbXBvcnQgJ2pvc2UnO1xuaW1wb3J0ICdAbm9ibGUvaGFzaGVzL3NjcnlwdC5qcyc7XG5pbXBvcnQgJ0BiZXR0ZXItYXV0aC91dGlscy9oZXgnO1xuaW1wb3J0ICdAbm9ibGUvaGFzaGVzL3V0aWxzLmpzJztcbmltcG9ydCAnLi4vc2hhcmVkL2JldHRlci1hdXRoLkI0UW94ZGdjLm1qcyc7XG5pbXBvcnQgJ2t5c2VseSc7XG5pbXBvcnQgJy4uL3NoYXJlZC9iZXR0ZXItYXV0aC5DSm9JV1NUQy5tanMnO1xuaW1wb3J0ICcuLi9wbHVnaW5zL29yZ2FuaXphdGlvbi9hY2Nlc3MvaW5kZXgubWpzJztcbmltcG9ydCAnQGJldHRlci1hdXRoL3V0aWxzL290cCc7XG5pbXBvcnQgJy4uL3BsdWdpbnMvYWRtaW4vYWNjZXNzL2luZGV4Lm1qcyc7XG5pbXBvcnQgJ0BiZXR0ZXItZmV0Y2gvZmV0Y2gnO1xuaW1wb3J0ICdAYmV0dGVyLWF1dGgvdXRpbHMnO1xuaW1wb3J0ICcuLi9wbHVnaW5zL2N1c3RvbS1zZXNzaW9uL2luZGV4Lm1qcyc7XG5pbXBvcnQgJ0Bub2JsZS9oYXNoZXMvc2hhMy5qcyc7XG5pbXBvcnQgJy4uL3BsdWdpbnMvZGV2aWNlLWF1dGhvcml6YXRpb24vaW5kZXgubWpzJztcbmltcG9ydCAnLi4vc2hhcmVkL2JldHRlci1hdXRoLkRkelNKZi1uLm1qcyc7XG5pbXBvcnQgJy4uL3NoYXJlZC9iZXR0ZXItYXV0aC5DVzZEOWVTeC5tanMnO1xuaW1wb3J0ICcuLi9zaGFyZWQvYmV0dGVyLWF1dGguQlRyU3JLc2kubWpzJztcbmltcG9ydCAnLi4vc2hhcmVkL2JldHRlci1hdXRoLkJSRnRhb3Z0Lm1qcyc7XG5pbXBvcnQgJy4uL3NoYXJlZC9iZXR0ZXItYXV0aC5EMnhuZFoycC5tanMnO1xuaW1wb3J0ICcuLi9jcnlwdG8vaW5kZXgubWpzJztcbmltcG9ydCAnam9zZS9lcnJvcnMnO1xuaW1wb3J0ICcuLi9zaGFyZWQvYmV0dGVyLWF1dGguQlVQUFJYZksubWpzJztcbmltcG9ydCAnZGVmdSc7XG5pbXBvcnQgJy4uL3BsdWdpbnMvYWNjZXNzL2luZGV4Lm1qcyc7XG5pbXBvcnQgJy4uL3NoYXJlZC9iZXR0ZXItYXV0aC5EUUk4QUQ3ZC5tanMnO1xuaW1wb3J0ICcuLi9zaGFyZWQvYmV0dGVyLWF1dGguQkxudks5aGsubWpzJztcbmltcG9ydCAnLi4vc2hhcmVkL2JldHRlci1hdXRoLkJwQTAzR0lzLm1qcyc7XG5cbmZ1bmN0aW9uIHRvTmV4dEpzSGFuZGxlcihhdXRoKSB7XG4gIGNvbnN0IGhhbmRsZXIgPSBhc3luYyAocmVxdWVzdCkgPT4ge1xuICAgIHJldHVybiBcImhhbmRsZXJcIiBpbiBhdXRoID8gYXV0aC5oYW5kbGVyKHJlcXVlc3QpIDogYXV0aChyZXF1ZXN0KTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICBHRVQ6IGhhbmRsZXIsXG4gICAgUE9TVDogaGFuZGxlclxuICB9O1xufVxuY29uc3QgbmV4dENvb2tpZXMgPSAoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgaWQ6IFwibmV4dC1jb29raWVzXCIsXG4gICAgaG9va3M6IHtcbiAgICAgIGFmdGVyOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBtYXRjaGVyKGN0eCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBoYW5kbGVyOiBjcmVhdGVBdXRoTWlkZGxld2FyZShhc3luYyAoY3R4KSA9PiB7XG4gICAgICAgICAgICBjb25zdCByZXR1cm5lZCA9IGN0eC5jb250ZXh0LnJlc3BvbnNlSGVhZGVycztcbiAgICAgICAgICAgIGlmIChcIl9mbGFnXCIgaW4gY3R4ICYmIGN0eC5fZmxhZyA9PT0gXCJyb3V0ZXJcIikge1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocmV0dXJuZWQgaW5zdGFuY2VvZiBIZWFkZXJzKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHNldENvb2tpZXMgPSByZXR1cm5lZD8uZ2V0KFwic2V0LWNvb2tpZVwiKTtcbiAgICAgICAgICAgICAgaWYgKCFzZXRDb29raWVzKSByZXR1cm47XG4gICAgICAgICAgICAgIGNvbnN0IHBhcnNlZCA9IHBhcnNlU2V0Q29va2llSGVhZGVyKHNldENvb2tpZXMpO1xuICAgICAgICAgICAgICBjb25zdCB7IGNvb2tpZXMgfSA9IGF3YWl0IGltcG9ydCgnbmV4dC9oZWFkZXJzJyk7XG4gICAgICAgICAgICAgIGxldCBjb29raWVIZWxwZXI7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29va2llSGVscGVyID0gYXdhaXQgY29va2llcygpO1xuICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yICYmIGVycm9yLm1lc3NhZ2Uuc3RhcnRzV2l0aChcbiAgICAgICAgICAgICAgICAgIFwiYGNvb2tpZXNgIHdhcyBjYWxsZWQgb3V0c2lkZSBhIHJlcXVlc3Qgc2NvcGUuXCJcbiAgICAgICAgICAgICAgICApKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHBhcnNlZC5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFrZXkpIHJldHVybjtcbiAgICAgICAgICAgICAgICBjb25zdCBvcHRzID0ge1xuICAgICAgICAgICAgICAgICAgc2FtZVNpdGU6IHZhbHVlLnNhbWVzaXRlLFxuICAgICAgICAgICAgICAgICAgc2VjdXJlOiB2YWx1ZS5zZWN1cmUsXG4gICAgICAgICAgICAgICAgICBtYXhBZ2U6IHZhbHVlW1wibWF4LWFnZVwiXSxcbiAgICAgICAgICAgICAgICAgIGh0dHBPbmx5OiB2YWx1ZS5odHRwb25seSxcbiAgICAgICAgICAgICAgICAgIGRvbWFpbjogdmFsdWUuZG9tYWluLFxuICAgICAgICAgICAgICAgICAgcGF0aDogdmFsdWUucGF0aFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgIGNvb2tpZUhlbHBlci5zZXQoa2V5LCBkZWNvZGVVUklDb21wb25lbnQodmFsdWUudmFsdWUpLCBvcHRzKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9XG4gIH07XG59O1xuXG5leHBvcnQgeyBuZXh0Q29va2llcywgdG9OZXh0SnNIYW5kbGVyIH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/integrations/next-js.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/plugins/access/index.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/better-auth/dist/plugins/access/index.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createAccessControl: () => (/* binding */ createAccessControl),\n/* harmony export */   role: () => (/* binding */ role)\n/* harmony export */ });\n/* harmony import */ var _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../shared/better-auth.DdzSJf-n.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs\");\n\n\nfunction role(statements) {\n  return {\n    authorize(request, connector = \"AND\") {\n      let success = false;\n      for (const [requestedResource, requestedActions] of Object.entries(\n        request\n      )) {\n        const allowedActions = statements[requestedResource];\n        if (!allowedActions) {\n          return {\n            success: false,\n            error: `You are not allowed to access resource: ${requestedResource}`\n          };\n        }\n        if (Array.isArray(requestedActions)) {\n          success = requestedActions.every(\n            (requestedAction) => allowedActions.includes(requestedAction)\n          );\n        } else {\n          if (typeof requestedActions === \"object\") {\n            const actions = requestedActions;\n            if (actions.connector === \"OR\") {\n              success = actions.actions.some(\n                (requestedAction) => allowedActions.includes(requestedAction)\n              );\n            } else {\n              success = actions.actions.every(\n                (requestedAction) => allowedActions.includes(requestedAction)\n              );\n            }\n          } else {\n            throw new _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_0__.B(\"Invalid access control request\");\n          }\n        }\n        if (success && connector === \"OR\") {\n          return { success };\n        }\n        if (!success && connector === \"AND\") {\n          return {\n            success: false,\n            error: `unauthorized to access resource \"${requestedResource}\"`\n          };\n        }\n      }\n      if (success) {\n        return {\n          success\n        };\n      }\n      return {\n        success: false,\n        error: \"Not authorized\"\n      };\n    },\n    statements\n  };\n}\nfunction createAccessControl(s) {\n  return {\n    newRole(statements) {\n      return role(statements);\n    },\n    statements: s\n  };\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9wbHVnaW5zL2FjY2Vzcy9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTZFOztBQUU3RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOERBQThELGtCQUFrQjtBQUNoRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaLHNCQUFzQiwrREFBZTtBQUNyQztBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1REFBdUQsa0JBQWtCO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXV0b3BsYW5jYW0vLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9wbHVnaW5zL2FjY2Vzcy9pbmRleC5tanM/OTI3NCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCIGFzIEJldHRlckF1dGhFcnJvciB9IGZyb20gJy4uLy4uL3NoYXJlZC9iZXR0ZXItYXV0aC5EZHpTSmYtbi5tanMnO1xuXG5mdW5jdGlvbiByb2xlKHN0YXRlbWVudHMpIHtcbiAgcmV0dXJuIHtcbiAgICBhdXRob3JpemUocmVxdWVzdCwgY29ubmVjdG9yID0gXCJBTkRcIikge1xuICAgICAgbGV0IHN1Y2Nlc3MgPSBmYWxzZTtcbiAgICAgIGZvciAoY29uc3QgW3JlcXVlc3RlZFJlc291cmNlLCByZXF1ZXN0ZWRBY3Rpb25zXSBvZiBPYmplY3QuZW50cmllcyhcbiAgICAgICAgcmVxdWVzdFxuICAgICAgKSkge1xuICAgICAgICBjb25zdCBhbGxvd2VkQWN0aW9ucyA9IHN0YXRlbWVudHNbcmVxdWVzdGVkUmVzb3VyY2VdO1xuICAgICAgICBpZiAoIWFsbG93ZWRBY3Rpb25zKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgZXJyb3I6IGBZb3UgYXJlIG5vdCBhbGxvd2VkIHRvIGFjY2VzcyByZXNvdXJjZTogJHtyZXF1ZXN0ZWRSZXNvdXJjZX1gXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShyZXF1ZXN0ZWRBY3Rpb25zKSkge1xuICAgICAgICAgIHN1Y2Nlc3MgPSByZXF1ZXN0ZWRBY3Rpb25zLmV2ZXJ5KFxuICAgICAgICAgICAgKHJlcXVlc3RlZEFjdGlvbikgPT4gYWxsb3dlZEFjdGlvbnMuaW5jbHVkZXMocmVxdWVzdGVkQWN0aW9uKVxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiByZXF1ZXN0ZWRBY3Rpb25zID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICBjb25zdCBhY3Rpb25zID0gcmVxdWVzdGVkQWN0aW9ucztcbiAgICAgICAgICAgIGlmIChhY3Rpb25zLmNvbm5lY3RvciA9PT0gXCJPUlwiKSB7XG4gICAgICAgICAgICAgIHN1Y2Nlc3MgPSBhY3Rpb25zLmFjdGlvbnMuc29tZShcbiAgICAgICAgICAgICAgICAocmVxdWVzdGVkQWN0aW9uKSA9PiBhbGxvd2VkQWN0aW9ucy5pbmNsdWRlcyhyZXF1ZXN0ZWRBY3Rpb24pXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzdWNjZXNzID0gYWN0aW9ucy5hY3Rpb25zLmV2ZXJ5KFxuICAgICAgICAgICAgICAgIChyZXF1ZXN0ZWRBY3Rpb24pID0+IGFsbG93ZWRBY3Rpb25zLmluY2x1ZGVzKHJlcXVlc3RlZEFjdGlvbilcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEJldHRlckF1dGhFcnJvcihcIkludmFsaWQgYWNjZXNzIGNvbnRyb2wgcmVxdWVzdFwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN1Y2Nlc3MgJiYgY29ubmVjdG9yID09PSBcIk9SXCIpIHtcbiAgICAgICAgICByZXR1cm4geyBzdWNjZXNzIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzdWNjZXNzICYmIGNvbm5lY3RvciA9PT0gXCJBTkRcIikge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICAgIGVycm9yOiBgdW5hdXRob3JpemVkIHRvIGFjY2VzcyByZXNvdXJjZSBcIiR7cmVxdWVzdGVkUmVzb3VyY2V9XCJgXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHN1Y2Nlc3MpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzdWNjZXNzXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgZXJyb3I6IFwiTm90IGF1dGhvcml6ZWRcIlxuICAgICAgfTtcbiAgICB9LFxuICAgIHN0YXRlbWVudHNcbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUFjY2Vzc0NvbnRyb2wocykge1xuICByZXR1cm4ge1xuICAgIG5ld1JvbGUoc3RhdGVtZW50cykge1xuICAgICAgcmV0dXJuIHJvbGUoc3RhdGVtZW50cyk7XG4gICAgfSxcbiAgICBzdGF0ZW1lbnRzOiBzXG4gIH07XG59XG5cbmV4cG9ydCB7IGNyZWF0ZUFjY2Vzc0NvbnRyb2wsIHJvbGUgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/plugins/access/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/plugins/admin/access/index.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/better-auth/dist/plugins/admin/access/index.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   adminAc: () => (/* binding */ adminAc),\n/* harmony export */   defaultAc: () => (/* binding */ defaultAc),\n/* harmony export */   defaultRoles: () => (/* binding */ defaultRoles),\n/* harmony export */   defaultStatements: () => (/* binding */ defaultStatements),\n/* harmony export */   userAc: () => (/* binding */ userAc)\n/* harmony export */ });\n/* harmony import */ var _access_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../access/index.mjs */ \"(rsc)/./node_modules/better-auth/dist/plugins/access/index.mjs\");\n/* harmony import */ var _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../shared/better-auth.DdzSJf-n.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs\");\n\n\n\nconst defaultStatements = {\n  user: [\n    \"create\",\n    \"list\",\n    \"set-role\",\n    \"ban\",\n    \"impersonate\",\n    \"delete\",\n    \"set-password\",\n    \"get\",\n    \"update\"\n  ],\n  session: [\"list\", \"revoke\", \"delete\"]\n};\nconst defaultAc = (0,_access_index_mjs__WEBPACK_IMPORTED_MODULE_0__.createAccessControl)(defaultStatements);\nconst adminAc = defaultAc.newRole({\n  user: [\n    \"create\",\n    \"list\",\n    \"set-role\",\n    \"ban\",\n    \"impersonate\",\n    \"delete\",\n    \"set-password\",\n    \"get\",\n    \"update\"\n  ],\n  session: [\"list\", \"revoke\", \"delete\"]\n});\nconst userAc = defaultAc.newRole({\n  user: [],\n  session: []\n});\nconst defaultRoles = {\n  admin: adminAc,\n  user: userAc\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9wbHVnaW5zL2FkbWluL2FjY2Vzcy9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUE2RDtBQUNYOztBQUVsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHNFQUFtQjtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7O0FBRXVFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXV0b3BsYW5jYW0vLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9wbHVnaW5zL2FkbWluL2FjY2Vzcy9pbmRleC5tanM/ZjJiMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVBY2Nlc3NDb250cm9sIH0gZnJvbSAnLi4vLi4vYWNjZXNzL2luZGV4Lm1qcyc7XG5pbXBvcnQgJy4uLy4uLy4uL3NoYXJlZC9iZXR0ZXItYXV0aC5EZHpTSmYtbi5tanMnO1xuXG5jb25zdCBkZWZhdWx0U3RhdGVtZW50cyA9IHtcbiAgdXNlcjogW1xuICAgIFwiY3JlYXRlXCIsXG4gICAgXCJsaXN0XCIsXG4gICAgXCJzZXQtcm9sZVwiLFxuICAgIFwiYmFuXCIsXG4gICAgXCJpbXBlcnNvbmF0ZVwiLFxuICAgIFwiZGVsZXRlXCIsXG4gICAgXCJzZXQtcGFzc3dvcmRcIixcbiAgICBcImdldFwiLFxuICAgIFwidXBkYXRlXCJcbiAgXSxcbiAgc2Vzc2lvbjogW1wibGlzdFwiLCBcInJldm9rZVwiLCBcImRlbGV0ZVwiXVxufTtcbmNvbnN0IGRlZmF1bHRBYyA9IGNyZWF0ZUFjY2Vzc0NvbnRyb2woZGVmYXVsdFN0YXRlbWVudHMpO1xuY29uc3QgYWRtaW5BYyA9IGRlZmF1bHRBYy5uZXdSb2xlKHtcbiAgdXNlcjogW1xuICAgIFwiY3JlYXRlXCIsXG4gICAgXCJsaXN0XCIsXG4gICAgXCJzZXQtcm9sZVwiLFxuICAgIFwiYmFuXCIsXG4gICAgXCJpbXBlcnNvbmF0ZVwiLFxuICAgIFwiZGVsZXRlXCIsXG4gICAgXCJzZXQtcGFzc3dvcmRcIixcbiAgICBcImdldFwiLFxuICAgIFwidXBkYXRlXCJcbiAgXSxcbiAgc2Vzc2lvbjogW1wibGlzdFwiLCBcInJldm9rZVwiLCBcImRlbGV0ZVwiXVxufSk7XG5jb25zdCB1c2VyQWMgPSBkZWZhdWx0QWMubmV3Um9sZSh7XG4gIHVzZXI6IFtdLFxuICBzZXNzaW9uOiBbXVxufSk7XG5jb25zdCBkZWZhdWx0Um9sZXMgPSB7XG4gIGFkbWluOiBhZG1pbkFjLFxuICB1c2VyOiB1c2VyQWNcbn07XG5cbmV4cG9ydCB7IGFkbWluQWMsIGRlZmF1bHRBYywgZGVmYXVsdFJvbGVzLCBkZWZhdWx0U3RhdGVtZW50cywgdXNlckFjIH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/plugins/admin/access/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/plugins/custom-session/index.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/better-auth/dist/plugins/custom-session/index.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   customSession: () => (/* binding */ customSession)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/v4/classic/external.js\");\n/* harmony import */ var better_call__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! better-call */ \"(rsc)/./node_modules/better-call/dist/index.js\");\n/* harmony import */ var _shared_better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../shared/better-auth.C3-_8m-g.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.C3-_8m-g.mjs\");\n/* harmony import */ var _shared_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../shared/better-auth.C5vDERgF.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.C5vDERgF.mjs\");\n/* harmony import */ var _shared_better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../shared/better-auth.CiuwFiHM.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.CiuwFiHM.mjs\");\n/* harmony import */ var _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @better-auth/utils/base64 */ \"(rsc)/./node_modules/@better-auth/utils/dist/base64.mjs\");\n/* harmony import */ var _better_auth_utils_hmac__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @better-auth/utils/hmac */ \"(rsc)/./node_modules/@better-auth/utils/dist/hmac.mjs\");\n/* harmony import */ var _shared_better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../shared/better-auth.DgGir396.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DgGir396.mjs\");\n/* harmony import */ var _better_auth_utils_binary__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @better-auth/utils/binary */ \"(rsc)/./node_modules/@better-auth/utils/dist/binary.mjs\");\n/* harmony import */ var _better_auth_core_db__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @better-auth/core/db */ \"(rsc)/./node_modules/@better-auth/core/dist/db/index.mjs\");\n/* harmony import */ var _better_auth_utils_random__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @better-auth/utils/random */ \"(rsc)/./node_modules/@better-auth/utils/dist/random.mjs\");\n/* harmony import */ var _better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @better-auth/utils/hash */ \"(rsc)/./node_modules/@better-auth/utils/dist/hash.mjs\");\n/* harmony import */ var _better_auth_utils_hex__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @better-auth/utils/hex */ \"(rsc)/./node_modules/@better-auth/utils/dist/hex.mjs\");\n/* harmony import */ var _shared_better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../shared/better-auth.B4Qoxdgc.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs\");\n/* harmony import */ var _shared_better_auth_DQI8AD7d_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../shared/better-auth.DQI8AD7d.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DQI8AD7d.mjs\");\n/* harmony import */ var _shared_better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../shared/better-auth.CW6D9eSx.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.CW6D9eSx.mjs\");\n/* harmony import */ var _crypto_index_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../crypto/index.mjs */ \"(rsc)/./node_modules/better-auth/dist/crypto/index.mjs\");\n/* harmony import */ var _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../shared/better-auth.DdzSJf-n.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs\");\n/* harmony import */ var _better_fetch_fetch__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @better-fetch/fetch */ \"(rsc)/./node_modules/@better-fetch/fetch/dist/index.js\");\n/* harmony import */ var _shared_better_auth_BRFtaovt_mjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../shared/better-auth.BRFtaovt.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.BRFtaovt.mjs\");\n/* harmony import */ var _shared_better_auth_DiMXeqeq_mjs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../shared/better-auth.DiMXeqeq.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DiMXeqeq.mjs\");\n/* harmony import */ var _shared_better_auth_BTrSrKsi_mjs__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../shared/better-auth.BTrSrKsi.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.BTrSrKsi.mjs\");\n/* harmony import */ var _shared_better_auth_BUPPRXfK_mjs__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../../shared/better-auth.BUPPRXfK.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.BUPPRXfK.mjs\");\n/* harmony import */ var defu__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! defu */ \"(rsc)/./node_modules/defu/dist/defu.mjs\");\n/* harmony import */ var _shared_better_auth_D2xndZ2p_mjs__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../../shared/better-auth.D2xndZ2p.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.D2xndZ2p.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst getSessionQuerySchema = zod__WEBPACK_IMPORTED_MODULE_24__.optional(\n  zod__WEBPACK_IMPORTED_MODULE_24__.object({\n    /**\n     * If cookie cache is enabled, it will disable the cache\n     * and fetch the session from the database\n     */\n    disableCookieCache: zod__WEBPACK_IMPORTED_MODULE_24__.boolean().meta({\n      description: \"Disable cookie cache and fetch session from database\"\n    }).or(zod__WEBPACK_IMPORTED_MODULE_24__.string().transform((v) => v === \"true\")).optional(),\n    disableRefresh: zod__WEBPACK_IMPORTED_MODULE_24__.boolean().meta({\n      description: \"Disable session refresh. Useful for checking session status, without updating the session\"\n    }).optional()\n  })\n);\nconst customSession = (fn, options, pluginOptions) => {\n  return {\n    id: \"custom-session\",\n    hooks: {\n      after: [\n        {\n          matcher: (ctx) => ctx.path === \"/multi-session/list-device-sessions\" && (pluginOptions?.shouldMutateListDeviceSessionsEndpoint ?? false),\n          handler: (0,_shared_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_2__.c)(async (ctx) => {\n            const response = await (0,_shared_better_auth_DQI8AD7d_mjs__WEBPACK_IMPORTED_MODULE_13__.g)(ctx);\n            if (!response) return;\n            const newResponse = await Promise.all(\n              response.map(async (v) => await fn(v, ctx))\n            );\n            return ctx.json(newResponse);\n          })\n        }\n      ]\n    },\n    endpoints: {\n      getSession: (0,_shared_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_2__.a)(\n        \"/get-session\",\n        {\n          method: \"GET\",\n          query: getSessionQuerySchema,\n          metadata: {\n            CUSTOM_SESSION: true,\n            openapi: {\n              description: \"Get custom session data\",\n              responses: {\n                \"200\": {\n                  description: \"Success\",\n                  content: {\n                    \"application/json\": {\n                      schema: {\n                        type: \"array\",\n                        nullable: true,\n                        items: {\n                          $ref: \"#/components/schemas/Session\"\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          },\n          requireHeaders: true\n        },\n        async (ctx) => {\n          const session = await (0,_shared_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_2__.b)()({\n            ...ctx,\n            asResponse: false,\n            headers: ctx.headers,\n            returnHeaders: true\n          }).catch((e) => {\n            return null;\n          });\n          if (!session?.response) {\n            return ctx.json(null);\n          }\n          const fnResult = await fn(session.response, ctx);\n          const setCookie = session.headers.get(\"set-cookie\");\n          if (setCookie) {\n            ctx.setHeader(\"set-cookie\", setCookie);\n            session.headers.delete(\"set-cookie\");\n          }\n          session.headers.forEach((value, key) => {\n            ctx.setHeader(key, value);\n          });\n          return ctx.json(fnResult);\n        }\n      )\n    }\n  };\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9wbHVnaW5zL2N1c3RvbS1zZXNzaW9uL2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUF5QjtBQUNKO0FBQzBCO0FBQzZFO0FBQzdFO0FBQ1o7QUFDRjtBQUNjO0FBQ1o7QUFDTDtBQUNLO0FBQ0Y7QUFDQztBQUNEO0FBQ25CO0FBQ21CO0FBQ0Q7QUFDQTtBQUNlO0FBQy9CO0FBQ2lFO0FBQ2xDO0FBQ2Y7QUFDZTtBQUNsQjtBQUNrQjtBQUNBO0FBQ0E7QUFDMUI7QUFDMEI7QUFDakM7QUFDaUM7O0FBRS9DLDhCQUE4QiwwQ0FBVTtBQUN4QyxFQUFFLHdDQUFRO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IseUNBQVM7QUFDakM7QUFDQSxLQUFLLEtBQUssd0NBQVE7QUFDbEIsb0JBQW9CLHlDQUFTO0FBQzdCO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLG1FQUFvQjtBQUN2QyxtQ0FBbUMsb0VBQW1CO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLGtCQUFrQixtRUFBa0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxnQ0FBZ0MsbUVBQVU7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRXlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXV0b3BsYW5jYW0vLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9wbHVnaW5zL2N1c3RvbS1zZXNzaW9uL2luZGV4Lm1qcz8xZTRiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHogZnJvbSAnem9kJztcbmltcG9ydCAnYmV0dGVyLWNhbGwnO1xuaW1wb3J0ICcuLi8uLi9zaGFyZWQvYmV0dGVyLWF1dGguQzMtXzhtLWcubWpzJztcbmltcG9ydCB7IGEgYXMgY3JlYXRlQXV0aEVuZHBvaW50LCBjIGFzIGNyZWF0ZUF1dGhNaWRkbGV3YXJlLCBiIGFzIGdldFNlc3Npb24gfSBmcm9tICcuLi8uLi9zaGFyZWQvYmV0dGVyLWF1dGguQzV2REVSZ0YubWpzJztcbmltcG9ydCAnLi4vLi4vc2hhcmVkL2JldHRlci1hdXRoLkNpdXdGaUhNLm1qcyc7XG5pbXBvcnQgJ0BiZXR0ZXItYXV0aC91dGlscy9iYXNlNjQnO1xuaW1wb3J0ICdAYmV0dGVyLWF1dGgvdXRpbHMvaG1hYyc7XG5pbXBvcnQgJy4uLy4uL3NoYXJlZC9iZXR0ZXItYXV0aC5EZ0dpcjM5Ni5tanMnO1xuaW1wb3J0ICdAYmV0dGVyLWF1dGgvdXRpbHMvYmluYXJ5JztcbmltcG9ydCAnQGJldHRlci1hdXRoL2NvcmUvZGInO1xuaW1wb3J0ICdAYmV0dGVyLWF1dGgvdXRpbHMvcmFuZG9tJztcbmltcG9ydCAnQGJldHRlci1hdXRoL3V0aWxzL2hhc2gnO1xuaW1wb3J0ICdAbm9ibGUvY2lwaGVycy9jaGFjaGEuanMnO1xuaW1wb3J0ICdAbm9ibGUvY2lwaGVycy91dGlscy5qcyc7XG5pbXBvcnQgJ2pvc2UnO1xuaW1wb3J0ICdAbm9ibGUvaGFzaGVzL3NjcnlwdC5qcyc7XG5pbXBvcnQgJ0BiZXR0ZXItYXV0aC91dGlscy9oZXgnO1xuaW1wb3J0ICdAbm9ibGUvaGFzaGVzL3V0aWxzLmpzJztcbmltcG9ydCAnLi4vLi4vc2hhcmVkL2JldHRlci1hdXRoLkI0UW94ZGdjLm1qcyc7XG5pbXBvcnQgJ2t5c2VseSc7XG5pbXBvcnQgeyBnIGFzIGdldEVuZHBvaW50UmVzcG9uc2UgfSBmcm9tICcuLi8uLi9zaGFyZWQvYmV0dGVyLWF1dGguRFFJOEFEN2QubWpzJztcbmltcG9ydCAnLi4vLi4vc2hhcmVkL2JldHRlci1hdXRoLkNXNkQ5ZVN4Lm1qcyc7XG5pbXBvcnQgJy4uLy4uL2NyeXB0by9pbmRleC5tanMnO1xuaW1wb3J0ICcuLi8uLi9zaGFyZWQvYmV0dGVyLWF1dGguRGR6U0pmLW4ubWpzJztcbmltcG9ydCAnQGJldHRlci1mZXRjaC9mZXRjaCc7XG5pbXBvcnQgJy4uLy4uL3NoYXJlZC9iZXR0ZXItYXV0aC5CUkZ0YW92dC5tanMnO1xuaW1wb3J0ICcuLi8uLi9zaGFyZWQvYmV0dGVyLWF1dGguRGlNWGVxZXEubWpzJztcbmltcG9ydCAnLi4vLi4vc2hhcmVkL2JldHRlci1hdXRoLkJUclNyS3NpLm1qcyc7XG5pbXBvcnQgJ2pvc2UvZXJyb3JzJztcbmltcG9ydCAnLi4vLi4vc2hhcmVkL2JldHRlci1hdXRoLkJVUFBSWGZLLm1qcyc7XG5pbXBvcnQgJ2RlZnUnO1xuaW1wb3J0ICcuLi8uLi9zaGFyZWQvYmV0dGVyLWF1dGguRDJ4bmRaMnAubWpzJztcblxuY29uc3QgZ2V0U2Vzc2lvblF1ZXJ5U2NoZW1hID0gei5vcHRpb25hbChcbiAgei5vYmplY3Qoe1xuICAgIC8qKlxuICAgICAqIElmIGNvb2tpZSBjYWNoZSBpcyBlbmFibGVkLCBpdCB3aWxsIGRpc2FibGUgdGhlIGNhY2hlXG4gICAgICogYW5kIGZldGNoIHRoZSBzZXNzaW9uIGZyb20gdGhlIGRhdGFiYXNlXG4gICAgICovXG4gICAgZGlzYWJsZUNvb2tpZUNhY2hlOiB6LmJvb2xlYW4oKS5tZXRhKHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkRpc2FibGUgY29va2llIGNhY2hlIGFuZCBmZXRjaCBzZXNzaW9uIGZyb20gZGF0YWJhc2VcIlxuICAgIH0pLm9yKHouc3RyaW5nKCkudHJhbnNmb3JtKCh2KSA9PiB2ID09PSBcInRydWVcIikpLm9wdGlvbmFsKCksXG4gICAgZGlzYWJsZVJlZnJlc2g6IHouYm9vbGVhbigpLm1ldGEoe1xuICAgICAgZGVzY3JpcHRpb246IFwiRGlzYWJsZSBzZXNzaW9uIHJlZnJlc2guIFVzZWZ1bCBmb3IgY2hlY2tpbmcgc2Vzc2lvbiBzdGF0dXMsIHdpdGhvdXQgdXBkYXRpbmcgdGhlIHNlc3Npb25cIlxuICAgIH0pLm9wdGlvbmFsKClcbiAgfSlcbik7XG5jb25zdCBjdXN0b21TZXNzaW9uID0gKGZuLCBvcHRpb25zLCBwbHVnaW5PcHRpb25zKSA9PiB7XG4gIHJldHVybiB7XG4gICAgaWQ6IFwiY3VzdG9tLXNlc3Npb25cIixcbiAgICBob29rczoge1xuICAgICAgYWZ0ZXI6IFtcbiAgICAgICAge1xuICAgICAgICAgIG1hdGNoZXI6IChjdHgpID0+IGN0eC5wYXRoID09PSBcIi9tdWx0aS1zZXNzaW9uL2xpc3QtZGV2aWNlLXNlc3Npb25zXCIgJiYgKHBsdWdpbk9wdGlvbnM/LnNob3VsZE11dGF0ZUxpc3REZXZpY2VTZXNzaW9uc0VuZHBvaW50ID8/IGZhbHNlKSxcbiAgICAgICAgICBoYW5kbGVyOiBjcmVhdGVBdXRoTWlkZGxld2FyZShhc3luYyAoY3R4KSA9PiB7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGdldEVuZHBvaW50UmVzcG9uc2UoY3R4KTtcbiAgICAgICAgICAgIGlmICghcmVzcG9uc2UpIHJldHVybjtcbiAgICAgICAgICAgIGNvbnN0IG5ld1Jlc3BvbnNlID0gYXdhaXQgUHJvbWlzZS5hbGwoXG4gICAgICAgICAgICAgIHJlc3BvbnNlLm1hcChhc3luYyAodikgPT4gYXdhaXQgZm4odiwgY3R4KSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICByZXR1cm4gY3R4Lmpzb24obmV3UmVzcG9uc2UpO1xuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIGVuZHBvaW50czoge1xuICAgICAgZ2V0U2Vzc2lvbjogY3JlYXRlQXV0aEVuZHBvaW50KFxuICAgICAgICBcIi9nZXQtc2Vzc2lvblwiLFxuICAgICAgICB7XG4gICAgICAgICAgbWV0aG9kOiBcIkdFVFwiLFxuICAgICAgICAgIHF1ZXJ5OiBnZXRTZXNzaW9uUXVlcnlTY2hlbWEsXG4gICAgICAgICAgbWV0YWRhdGE6IHtcbiAgICAgICAgICAgIENVU1RPTV9TRVNTSU9OOiB0cnVlLFxuICAgICAgICAgICAgb3BlbmFwaToge1xuICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJHZXQgY3VzdG9tIHNlc3Npb24gZGF0YVwiLFxuICAgICAgICAgICAgICByZXNwb25zZXM6IHtcbiAgICAgICAgICAgICAgICBcIjIwMFwiOiB7XG4gICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJTdWNjZXNzXCIsXG4gICAgICAgICAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICAgICAgICAgIFwiYXBwbGljYXRpb24vanNvblwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgc2NoZW1hOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFycmF5XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBudWxsYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICRyZWY6IFwiIy9jb21wb25lbnRzL3NjaGVtYXMvU2Vzc2lvblwiXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICByZXF1aXJlSGVhZGVyczogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBhc3luYyAoY3R4KSA9PiB7XG4gICAgICAgICAgY29uc3Qgc2Vzc2lvbiA9IGF3YWl0IGdldFNlc3Npb24oKSh7XG4gICAgICAgICAgICAuLi5jdHgsXG4gICAgICAgICAgICBhc1Jlc3BvbnNlOiBmYWxzZSxcbiAgICAgICAgICAgIGhlYWRlcnM6IGN0eC5oZWFkZXJzLFxuICAgICAgICAgICAgcmV0dXJuSGVhZGVyczogdHJ1ZVxuICAgICAgICAgIH0pLmNhdGNoKChlKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBpZiAoIXNlc3Npb24/LnJlc3BvbnNlKSB7XG4gICAgICAgICAgICByZXR1cm4gY3R4Lmpzb24obnVsbCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IGZuUmVzdWx0ID0gYXdhaXQgZm4oc2Vzc2lvbi5yZXNwb25zZSwgY3R4KTtcbiAgICAgICAgICBjb25zdCBzZXRDb29raWUgPSBzZXNzaW9uLmhlYWRlcnMuZ2V0KFwic2V0LWNvb2tpZVwiKTtcbiAgICAgICAgICBpZiAoc2V0Q29va2llKSB7XG4gICAgICAgICAgICBjdHguc2V0SGVhZGVyKFwic2V0LWNvb2tpZVwiLCBzZXRDb29raWUpO1xuICAgICAgICAgICAgc2Vzc2lvbi5oZWFkZXJzLmRlbGV0ZShcInNldC1jb29raWVcIik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNlc3Npb24uaGVhZGVycy5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7XG4gICAgICAgICAgICBjdHguc2V0SGVhZGVyKGtleSwgdmFsdWUpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiBjdHguanNvbihmblJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgIClcbiAgICB9XG4gIH07XG59O1xuXG5leHBvcnQgeyBjdXN0b21TZXNzaW9uIH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/plugins/custom-session/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/plugins/device-authorization/index.mjs":
/*!******************************************************************************!*\
  !*** ./node_modules/better-auth/dist/plugins/device-authorization/index.mjs ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $deviceAuthorizationOptionsSchema: () => (/* binding */ $deviceAuthorizationOptionsSchema),\n/* harmony export */   deviceAuthorization: () => (/* binding */ deviceAuthorization),\n/* harmony export */   deviceAuthorizationClient: () => (/* reexport safe */ _shared_better_auth_BpA03GIs_mjs__WEBPACK_IMPORTED_MODULE_12__.d)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/v4/classic/external.js\");\n/* harmony import */ var better_call__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! better-call */ \"(rsc)/./node_modules/better-call/dist/index.js\");\n/* harmony import */ var _shared_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../shared/better-auth.C5vDERgF.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.C5vDERgF.mjs\");\n/* harmony import */ var _better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @better-auth/utils/hash */ \"(rsc)/./node_modules/@better-auth/utils/dist/hash.mjs\");\n/* harmony import */ var _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @better-auth/utils/base64 */ \"(rsc)/./node_modules/@better-auth/utils/dist/base64.mjs\");\n/* harmony import */ var _better_auth_utils_hex__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @better-auth/utils/hex */ \"(rsc)/./node_modules/@better-auth/utils/dist/hex.mjs\");\n/* harmony import */ var _shared_better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../shared/better-auth.B4Qoxdgc.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs\");\n/* harmony import */ var _shared_better_auth_DiMXeqeq_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../shared/better-auth.DiMXeqeq.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DiMXeqeq.mjs\");\n/* harmony import */ var _better_auth_core_db__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @better-auth/core/db */ \"(rsc)/./node_modules/@better-auth/core/dist/db/index.mjs\");\n/* harmony import */ var _shared_better_auth_BLnvK9hk_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../shared/better-auth.BLnvK9hk.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.BLnvK9hk.mjs\");\n/* harmony import */ var _shared_better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../shared/better-auth.CiuwFiHM.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.CiuwFiHM.mjs\");\n/* harmony import */ var _shared_better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../shared/better-auth.DgGir396.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DgGir396.mjs\");\n/* harmony import */ var _better_auth_utils_random__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @better-auth/utils/random */ \"(rsc)/./node_modules/@better-auth/utils/dist/random.mjs\");\n/* harmony import */ var _shared_better_auth_BpA03GIs_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../shared/better-auth.BpA03GIs.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.BpA03GIs.mjs\");\n/* harmony import */ var _shared_better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../shared/better-auth.CW6D9eSx.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.CW6D9eSx.mjs\");\n/* harmony import */ var _shared_better_auth_BTrSrKsi_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../shared/better-auth.BTrSrKsi.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.BTrSrKsi.mjs\");\n/* harmony import */ var _shared_better_auth_D2xndZ2p_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../shared/better-auth.D2xndZ2p.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.D2xndZ2p.mjs\");\n/* harmony import */ var _better_auth_utils_hmac__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @better-auth/utils/hmac */ \"(rsc)/./node_modules/@better-auth/utils/dist/hmac.mjs\");\n/* harmony import */ var _better_auth_utils_binary__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @better-auth/utils/binary */ \"(rsc)/./node_modules/@better-auth/utils/dist/binary.mjs\");\n/* harmony import */ var _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../shared/better-auth.DdzSJf-n.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs\");\n/* harmony import */ var _shared_better_auth_BRFtaovt_mjs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../shared/better-auth.BRFtaovt.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.BRFtaovt.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst schema = {\n  deviceCode: {\n    fields: {\n      deviceCode: {\n        type: \"string\",\n        required: true\n      },\n      userCode: {\n        type: \"string\",\n        required: true\n      },\n      userId: {\n        type: \"string\",\n        required: false\n      },\n      expiresAt: {\n        type: \"date\",\n        required: true\n      },\n      status: {\n        type: \"string\",\n        required: true\n      },\n      lastPolledAt: {\n        type: \"date\",\n        required: false\n      },\n      pollingInterval: {\n        type: \"number\",\n        required: false\n      },\n      clientId: {\n        type: \"string\",\n        required: false\n      },\n      scope: {\n        type: \"string\",\n        required: false\n      }\n    }\n  }\n};\nzod__WEBPACK_IMPORTED_MODULE_20__.object({\n  id: zod__WEBPACK_IMPORTED_MODULE_20__.string(),\n  deviceCode: zod__WEBPACK_IMPORTED_MODULE_20__.string(),\n  userCode: zod__WEBPACK_IMPORTED_MODULE_20__.string(),\n  userId: zod__WEBPACK_IMPORTED_MODULE_20__.string().optional(),\n  expiresAt: zod__WEBPACK_IMPORTED_MODULE_20__.date(),\n  status: zod__WEBPACK_IMPORTED_MODULE_20__.string(),\n  lastPolledAt: zod__WEBPACK_IMPORTED_MODULE_20__.date().optional(),\n  pollingInterval: zod__WEBPACK_IMPORTED_MODULE_20__.number().optional(),\n  clientId: zod__WEBPACK_IMPORTED_MODULE_20__.string().optional(),\n  scope: zod__WEBPACK_IMPORTED_MODULE_20__.string().optional()\n});\n\nconst msStringValueSchema = zod__WEBPACK_IMPORTED_MODULE_20__.custom(\n  (val) => {\n    try {\n      (0,_shared_better_auth_DiMXeqeq_mjs__WEBPACK_IMPORTED_MODULE_6__.m)(val);\n    } catch (e) {\n      return false;\n    }\n    return true;\n  },\n  {\n    message: \"Invalid time string format. Use formats like '30m', '5s', '1h', etc.\"\n  }\n);\nconst $deviceAuthorizationOptionsSchema = zod__WEBPACK_IMPORTED_MODULE_20__.object({\n  expiresIn: msStringValueSchema.default(\"30m\").describe(\n    \"Time in seconds until the device code expires. Use formats like '30m', '5s', '1h', etc.\"\n  ),\n  interval: msStringValueSchema.default(\"5s\").describe(\n    \"Time in seconds between polling attempts. Use formats like '30m', '5s', '1h', etc.\"\n  ),\n  deviceCodeLength: zod__WEBPACK_IMPORTED_MODULE_20__.number().int().positive().default(40).describe(\n    \"Length of the device code to be generated. Default is 40 characters.\"\n  ),\n  userCodeLength: zod__WEBPACK_IMPORTED_MODULE_20__.number().int().positive().default(8).describe(\n    \"Length of the user code to be generated. Default is 8 characters.\"\n  ),\n  generateDeviceCode: zod__WEBPACK_IMPORTED_MODULE_20__.custom(\n    (val) => typeof val === \"function\",\n    {\n      message: \"generateDeviceCode must be a function that returns a string or a promise that resolves to a string.\"\n    }\n  ).optional().describe(\n    \"Function to generate a device code. If not provided, a default random string generator will be used.\"\n  ),\n  generateUserCode: zod__WEBPACK_IMPORTED_MODULE_20__.custom(\n    (val) => typeof val === \"function\",\n    {\n      message: \"generateUserCode must be a function that returns a string or a promise that resolves to a string.\"\n    }\n  ).optional().describe(\n    \"Function to generate a user code. If not provided, a default random string generator will be used.\"\n  ),\n  validateClient: zod__WEBPACK_IMPORTED_MODULE_20__.custom(\n    (val) => typeof val === \"function\",\n    {\n      message: \"validateClient must be a function that returns a boolean or a promise that resolves to a boolean.\"\n    }\n  ).optional().describe(\n    \"Function to validate the client ID. If not provided, no validation will be performed.\"\n  ),\n  onDeviceAuthRequest: zod__WEBPACK_IMPORTED_MODULE_20__.custom((val) => typeof val === \"function\", {\n    message: \"onDeviceAuthRequest must be a function that returns void or a promise that resolves to void.\"\n  }).optional().describe(\n    \"Function to handle device authorization requests. If not provided, no additional actions will be taken.\"\n  ),\n  schema: zod__WEBPACK_IMPORTED_MODULE_20__.custom(() => true)\n});\nconst DEVICE_AUTHORIZATION_ERROR_CODES = {\n  INVALID_DEVICE_CODE: \"Invalid device code\",\n  EXPIRED_DEVICE_CODE: \"Device code has expired\",\n  EXPIRED_USER_CODE: \"User code has expired\",\n  AUTHORIZATION_PENDING: \"Authorization pending\",\n  ACCESS_DENIED: \"Access denied\",\n  INVALID_USER_CODE: \"Invalid user code\",\n  DEVICE_CODE_ALREADY_PROCESSED: \"Device code already processed\",\n  POLLING_TOO_FREQUENTLY: \"Polling too frequently\",\n  USER_NOT_FOUND: \"User not found\",\n  FAILED_TO_CREATE_SESSION: \"Failed to create session\",\n  INVALID_DEVICE_CODE_STATUS: \"Invalid device code status\",\n  AUTHENTICATION_REQUIRED: \"Authentication required\"\n};\nconst defaultCharset = \"ABCDEFGHJKLMNPQRSTUVWXYZ23456789\";\nconst defaultGenerateDeviceCode = (length) => {\n  return (0,_shared_better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_5__.g)(length, \"a-z\", \"A-Z\", \"0-9\");\n};\nconst defaultGenerateUserCode = (length) => {\n  const chars = new Uint8Array(length);\n  return Array.from(crypto.getRandomValues(chars)).map((byte) => defaultCharset[byte % defaultCharset.length]).join(\"\");\n};\nconst deviceAuthorization = (options = {}) => {\n  const opts = $deviceAuthorizationOptionsSchema.parse(options);\n  const generateDeviceCode = async () => {\n    if (opts.generateDeviceCode) {\n      return opts.generateDeviceCode();\n    }\n    return defaultGenerateDeviceCode(opts.deviceCodeLength);\n  };\n  const generateUserCode = async () => {\n    if (opts.generateUserCode) {\n      return opts.generateUserCode();\n    }\n    return defaultGenerateUserCode(opts.userCodeLength);\n  };\n  return {\n    id: \"device-authorization\",\n    schema: (0,_shared_better_auth_BLnvK9hk_mjs__WEBPACK_IMPORTED_MODULE_8__.m)(schema, options?.schema),\n    endpoints: {\n      deviceCode: (0,_shared_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(\n        \"/device/code\",\n        {\n          method: \"POST\",\n          body: zod__WEBPACK_IMPORTED_MODULE_20__.object({\n            client_id: zod__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n              description: \"The client ID of the application\"\n            }),\n            scope: zod__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n              description: \"Space-separated list of scopes\"\n            }).optional()\n          }),\n          error: zod__WEBPACK_IMPORTED_MODULE_20__.object({\n            error: zod__WEBPACK_IMPORTED_MODULE_20__[\"enum\"]([\"invalid_request\", \"invalid_client\"]).meta({\n              description: \"Error code\"\n            }),\n            error_description: zod__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n              description: \"Detailed error description\"\n            })\n          }),\n          metadata: {\n            openapi: {\n              description: `Request a device and user code\n\nFollow [rfc8628#section-3.2](https://datatracker.ietf.org/doc/html/rfc8628#section-3.2)`,\n              responses: {\n                200: {\n                  description: \"Success\",\n                  content: {\n                    \"application/json\": {\n                      schema: {\n                        type: \"object\",\n                        properties: {\n                          device_code: {\n                            type: \"string\",\n                            description: \"The device verification code\"\n                          },\n                          user_code: {\n                            type: \"string\",\n                            description: \"The user code to display\"\n                          },\n                          verification_uri: {\n                            type: \"string\",\n                            description: \"The URL for user verification\"\n                          },\n                          verification_uri_complete: {\n                            type: \"string\",\n                            description: \"The complete URL with user code\"\n                          },\n                          expires_in: {\n                            type: \"number\",\n                            description: \"Lifetime in seconds of the device code\"\n                          },\n                          interval: {\n                            type: \"number\",\n                            description: \"Minimum polling interval in seconds\"\n                          }\n                        }\n                      }\n                    }\n                  }\n                },\n                400: {\n                  description: \"Error response\",\n                  content: {\n                    \"application/json\": {\n                      schema: {\n                        type: \"object\",\n                        properties: {\n                          error: {\n                            type: \"string\",\n                            enum: [\"invalid_request\", \"invalid_client\"]\n                          },\n                          error_description: {\n                            type: \"string\"\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        async (ctx) => {\n          if (opts.validateClient) {\n            const isValid = await opts.validateClient(ctx.body.client_id);\n            if (!isValid) {\n              throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n                error: \"invalid_client\",\n                error_description: \"Invalid client ID\"\n              });\n            }\n          }\n          if (opts.onDeviceAuthRequest) {\n            await opts.onDeviceAuthRequest(ctx.body.client_id, ctx.body.scope);\n          }\n          const deviceCode = await generateDeviceCode();\n          const userCode = await generateUserCode();\n          const expiresIn = (0,_shared_better_auth_DiMXeqeq_mjs__WEBPACK_IMPORTED_MODULE_6__.m)(opts.expiresIn);\n          const expiresAt = new Date(Date.now() + expiresIn);\n          await ctx.context.adapter.create({\n            model: \"deviceCode\",\n            data: {\n              deviceCode,\n              userCode,\n              expiresAt,\n              status: \"pending\",\n              pollingInterval: (0,_shared_better_auth_DiMXeqeq_mjs__WEBPACK_IMPORTED_MODULE_6__.m)(opts.interval),\n              clientId: ctx.body.client_id,\n              scope: ctx.body.scope\n            }\n          });\n          const baseURL = new URL(ctx.context.baseURL);\n          const verification_uri = new URL(\"/device\", baseURL);\n          const verification_uri_complete = new URL(verification_uri);\n          verification_uri_complete.searchParams.set(\n            \"user_code\",\n            // should we support custom formatting function here?\n            encodeURIComponent(userCode)\n          );\n          return ctx.json(\n            {\n              device_code: deviceCode,\n              user_code: userCode,\n              verification_uri: verification_uri.toString(),\n              verification_uri_complete: verification_uri_complete.toString(),\n              expires_in: Math.floor(expiresIn / 1e3),\n              interval: Math.floor((0,_shared_better_auth_DiMXeqeq_mjs__WEBPACK_IMPORTED_MODULE_6__.m)(opts.interval) / 1e3)\n            },\n            {\n              headers: {\n                \"Cache-Control\": \"no-store\"\n              }\n            }\n          );\n        }\n      ),\n      deviceToken: (0,_shared_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(\n        \"/device/token\",\n        {\n          method: \"POST\",\n          body: zod__WEBPACK_IMPORTED_MODULE_20__.object({\n            grant_type: zod__WEBPACK_IMPORTED_MODULE_20__.literal(\"urn:ietf:params:oauth:grant-type:device_code\").meta({\n              description: \"The grant type for device flow\"\n            }),\n            device_code: zod__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n              description: \"The device verification code\"\n            }),\n            client_id: zod__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n              description: \"The client ID of the application\"\n            })\n          }),\n          error: zod__WEBPACK_IMPORTED_MODULE_20__.object({\n            error: zod__WEBPACK_IMPORTED_MODULE_20__[\"enum\"]([\n              \"authorization_pending\",\n              \"slow_down\",\n              \"expired_token\",\n              \"access_denied\",\n              \"invalid_request\",\n              \"invalid_grant\"\n            ]).meta({\n              description: \"Error code\"\n            }),\n            error_description: zod__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n              description: \"Detailed error description\"\n            })\n          }),\n          metadata: {\n            openapi: {\n              description: `Exchange device code for access token\n\nFollow [rfc8628#section-3.4](https://datatracker.ietf.org/doc/html/rfc8628#section-3.4)`,\n              responses: {\n                200: {\n                  description: \"Success\",\n                  content: {\n                    \"application/json\": {\n                      schema: {\n                        type: \"object\",\n                        properties: {\n                          session: {\n                            $ref: \"#/components/schemas/Session\"\n                          },\n                          user: {\n                            $ref: \"#/components/schemas/User\"\n                          }\n                        }\n                      }\n                    }\n                  }\n                },\n                400: {\n                  description: \"Error response\",\n                  content: {\n                    \"application/json\": {\n                      schema: {\n                        type: \"object\",\n                        properties: {\n                          error: {\n                            type: \"string\",\n                            enum: [\n                              \"authorization_pending\",\n                              \"slow_down\",\n                              \"expired_token\",\n                              \"access_denied\",\n                              \"invalid_request\",\n                              \"invalid_grant\"\n                            ]\n                          },\n                          error_description: {\n                            type: \"string\"\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        async (ctx) => {\n          const { device_code, client_id } = ctx.body;\n          if (opts.validateClient) {\n            const isValid = await opts.validateClient(client_id);\n            if (!isValid) {\n              throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n                error: \"invalid_grant\",\n                error_description: \"Invalid client ID\"\n              });\n            }\n          }\n          const deviceCodeRecord = await ctx.context.adapter.findOne({\n            model: \"deviceCode\",\n            where: [\n              {\n                field: \"deviceCode\",\n                value: device_code\n              }\n            ]\n          });\n          if (!deviceCodeRecord) {\n            throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n              error: \"invalid_grant\",\n              error_description: DEVICE_AUTHORIZATION_ERROR_CODES.INVALID_DEVICE_CODE\n            });\n          }\n          if (deviceCodeRecord.clientId && deviceCodeRecord.clientId !== client_id) {\n            throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n              error: \"invalid_grant\",\n              error_description: \"Client ID mismatch\"\n            });\n          }\n          if (deviceCodeRecord.lastPolledAt && deviceCodeRecord.pollingInterval) {\n            const timeSinceLastPoll = Date.now() - new Date(deviceCodeRecord.lastPolledAt).getTime();\n            const minInterval = deviceCodeRecord.pollingInterval;\n            if (timeSinceLastPoll < minInterval) {\n              throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n                error: \"slow_down\",\n                error_description: DEVICE_AUTHORIZATION_ERROR_CODES.POLLING_TOO_FREQUENTLY\n              });\n            }\n          }\n          await ctx.context.adapter.update({\n            model: \"deviceCode\",\n            where: [\n              {\n                field: \"id\",\n                value: deviceCodeRecord.id\n              }\n            ],\n            update: {\n              lastPolledAt: /* @__PURE__ */ new Date()\n            }\n          });\n          if (deviceCodeRecord.expiresAt < /* @__PURE__ */ new Date()) {\n            await ctx.context.adapter.delete({\n              model: \"deviceCode\",\n              where: [\n                {\n                  field: \"id\",\n                  value: deviceCodeRecord.id\n                }\n              ]\n            });\n            throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n              error: \"expired_token\",\n              error_description: DEVICE_AUTHORIZATION_ERROR_CODES.EXPIRED_DEVICE_CODE\n            });\n          }\n          if (deviceCodeRecord.status === \"pending\") {\n            throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n              error: \"authorization_pending\",\n              error_description: DEVICE_AUTHORIZATION_ERROR_CODES.AUTHORIZATION_PENDING\n            });\n          }\n          if (deviceCodeRecord.status === \"denied\") {\n            await ctx.context.adapter.delete({\n              model: \"deviceCode\",\n              where: [\n                {\n                  field: \"id\",\n                  value: deviceCodeRecord.id\n                }\n              ]\n            });\n            throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n              error: \"access_denied\",\n              error_description: DEVICE_AUTHORIZATION_ERROR_CODES.ACCESS_DENIED\n            });\n          }\n          if (deviceCodeRecord.status === \"approved\" && deviceCodeRecord.userId) {\n            await ctx.context.adapter.delete({\n              model: \"deviceCode\",\n              where: [\n                {\n                  field: \"id\",\n                  value: deviceCodeRecord.id\n                }\n              ]\n            });\n            const user = await ctx.context.internalAdapter.findUserById(\n              deviceCodeRecord.userId\n            );\n            if (!user) {\n              throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"INTERNAL_SERVER_ERROR\", {\n                error: \"server_error\",\n                error_description: DEVICE_AUTHORIZATION_ERROR_CODES.USER_NOT_FOUND\n              });\n            }\n            const session = await ctx.context.internalAdapter.createSession(\n              user.id,\n              ctx\n            );\n            if (!session) {\n              throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"INTERNAL_SERVER_ERROR\", {\n                error: \"server_error\",\n                error_description: DEVICE_AUTHORIZATION_ERROR_CODES.FAILED_TO_CREATE_SESSION\n              });\n            }\n            ctx.context.setNewSession({\n              session,\n              user\n            });\n            if (ctx.context.options.secondaryStorage) {\n              await ctx.context.secondaryStorage?.set(\n                session.token,\n                JSON.stringify({\n                  user,\n                  session\n                }),\n                Math.floor(\n                  (new Date(session.expiresAt).getTime() - Date.now()) / 1e3\n                )\n              );\n            }\n            return ctx.json(\n              {\n                access_token: session.token,\n                token_type: \"Bearer\",\n                expires_in: Math.floor(\n                  (new Date(session.expiresAt).getTime() - Date.now()) / 1e3\n                ),\n                scope: deviceCodeRecord.scope || \"\"\n              },\n              {\n                headers: {\n                  \"Cache-Control\": \"no-store\",\n                  Pragma: \"no-cache\"\n                }\n              }\n            );\n          }\n          throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"INTERNAL_SERVER_ERROR\", {\n            error: \"server_error\",\n            error_description: DEVICE_AUTHORIZATION_ERROR_CODES.INVALID_DEVICE_CODE_STATUS\n          });\n        }\n      ),\n      deviceVerify: (0,_shared_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(\n        \"/device\",\n        {\n          method: \"GET\",\n          query: zod__WEBPACK_IMPORTED_MODULE_20__.object({\n            user_code: zod__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n              description: \"The user code to verify\"\n            })\n          }),\n          error: zod__WEBPACK_IMPORTED_MODULE_20__.object({\n            error: zod__WEBPACK_IMPORTED_MODULE_20__[\"enum\"]([\"invalid_request\"]).meta({\n              description: \"Error code\"\n            }),\n            error_description: zod__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n              description: \"Detailed error description\"\n            })\n          }),\n          metadata: {\n            openapi: {\n              description: \"Display device verification page\",\n              responses: {\n                200: {\n                  description: \"Verification page HTML\",\n                  content: {\n                    \"application/json\": {\n                      schema: {\n                        type: \"object\",\n                        properties: {\n                          user_code: {\n                            type: \"string\",\n                            description: \"The user code to verify\"\n                          },\n                          status: {\n                            type: \"string\",\n                            enum: [\"pending\", \"approved\", \"denied\"],\n                            description: \"Current status of the device authorization\"\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        async (ctx) => {\n          const { user_code } = ctx.query;\n          const cleanUserCode = user_code.replace(/-/g, \"\");\n          const deviceCodeRecord = await ctx.context.adapter.findOne({\n            model: \"deviceCode\",\n            where: [\n              {\n                field: \"userCode\",\n                value: cleanUserCode\n              }\n            ]\n          });\n          if (!deviceCodeRecord) {\n            throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n              error: \"invalid_request\",\n              error_description: DEVICE_AUTHORIZATION_ERROR_CODES.INVALID_USER_CODE\n            });\n          }\n          if (deviceCodeRecord.expiresAt < /* @__PURE__ */ new Date()) {\n            throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n              error: \"expired_token\",\n              error_description: DEVICE_AUTHORIZATION_ERROR_CODES.EXPIRED_USER_CODE\n            });\n          }\n          return ctx.json({\n            user_code,\n            status: deviceCodeRecord.status\n          });\n        }\n      ),\n      deviceApprove: (0,_shared_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(\n        \"/device/approve\",\n        {\n          method: \"POST\",\n          body: zod__WEBPACK_IMPORTED_MODULE_20__.object({\n            userCode: zod__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n              description: \"The user code to approve\"\n            })\n          }),\n          error: zod__WEBPACK_IMPORTED_MODULE_20__.object({\n            error: zod__WEBPACK_IMPORTED_MODULE_20__[\"enum\"]([\n              \"invalid_request\",\n              \"expired_token\",\n              \"device_code_already_processed\"\n            ]).meta({\n              description: \"Error code\"\n            }),\n            error_description: zod__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n              description: \"Detailed error description\"\n            })\n          }),\n          requireHeaders: true,\n          metadata: {\n            openapi: {\n              description: \"Approve device authorization\",\n              responses: {\n                200: {\n                  description: \"Success\",\n                  content: {\n                    \"application/json\": {\n                      schema: {\n                        type: \"object\",\n                        properties: {\n                          success: {\n                            type: \"boolean\"\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        async (ctx) => {\n          const session = await (0,_shared_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(ctx);\n          if (!session) {\n            throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNAUTHORIZED\", {\n              error: \"unauthorized\",\n              error_description: DEVICE_AUTHORIZATION_ERROR_CODES.AUTHENTICATION_REQUIRED\n            });\n          }\n          const { userCode } = ctx.body;\n          const deviceCodeRecord = await ctx.context.adapter.findOne({\n            model: \"deviceCode\",\n            where: [\n              {\n                field: \"userCode\",\n                value: userCode\n              }\n            ]\n          });\n          if (!deviceCodeRecord) {\n            throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n              error: \"invalid_request\",\n              error_description: DEVICE_AUTHORIZATION_ERROR_CODES.INVALID_USER_CODE\n            });\n          }\n          if (deviceCodeRecord.expiresAt < /* @__PURE__ */ new Date()) {\n            throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n              error: \"expired_token\",\n              error_description: DEVICE_AUTHORIZATION_ERROR_CODES.EXPIRED_USER_CODE\n            });\n          }\n          if (deviceCodeRecord.status !== \"pending\") {\n            throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n              error: \"invalid_request\",\n              error_description: DEVICE_AUTHORIZATION_ERROR_CODES.DEVICE_CODE_ALREADY_PROCESSED\n            });\n          }\n          await ctx.context.adapter.update({\n            model: \"deviceCode\",\n            where: [\n              {\n                field: \"id\",\n                value: deviceCodeRecord.id\n              }\n            ],\n            update: {\n              status: \"approved\",\n              userId: session.user.id\n            }\n          });\n          return ctx.json({\n            success: true\n          });\n        }\n      ),\n      deviceDeny: (0,_shared_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(\n        \"/device/deny\",\n        {\n          method: \"POST\",\n          body: zod__WEBPACK_IMPORTED_MODULE_20__.object({\n            userCode: zod__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n              description: \"The user code to deny\"\n            })\n          }),\n          error: zod__WEBPACK_IMPORTED_MODULE_20__.object({\n            error: zod__WEBPACK_IMPORTED_MODULE_20__[\"enum\"]([\"invalid_request\", \"expired_token\"]).meta({\n              description: \"Error code\"\n            }),\n            error_description: zod__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n              description: \"Detailed error description\"\n            })\n          }),\n          metadata: {\n            openapi: {\n              description: \"Deny device authorization\",\n              responses: {\n                200: {\n                  description: \"Success\",\n                  content: {\n                    \"application/json\": {\n                      schema: {\n                        type: \"object\",\n                        properties: {\n                          success: {\n                            type: \"boolean\"\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        async (ctx) => {\n          const { userCode } = ctx.body;\n          const cleanUserCode = userCode.replace(/-/g, \"\");\n          const deviceCodeRecord = await ctx.context.adapter.findOne({\n            model: \"deviceCode\",\n            where: [\n              {\n                field: \"userCode\",\n                value: cleanUserCode\n              }\n            ]\n          });\n          if (!deviceCodeRecord) {\n            throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n              error: \"invalid_request\",\n              error_description: DEVICE_AUTHORIZATION_ERROR_CODES.INVALID_USER_CODE\n            });\n          }\n          if (deviceCodeRecord.expiresAt < /* @__PURE__ */ new Date()) {\n            throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n              error: \"expired_token\",\n              error_description: DEVICE_AUTHORIZATION_ERROR_CODES.EXPIRED_USER_CODE\n            });\n          }\n          if (deviceCodeRecord.status !== \"pending\") {\n            throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n              error: \"invalid_request\",\n              error_description: DEVICE_AUTHORIZATION_ERROR_CODES.DEVICE_CODE_ALREADY_PROCESSED\n            });\n          }\n          await ctx.context.adapter.update({\n            model: \"deviceCode\",\n            where: [\n              {\n                field: \"id\",\n                value: deviceCodeRecord.id\n              }\n            ],\n            update: {\n              status: \"denied\"\n            }\n          });\n          return ctx.json({\n            success: true\n          });\n        }\n      )\n    },\n    $ERROR_CODES: DEVICE_AUTHORIZATION_ERROR_CODES\n  };\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/plugins/device-authorization/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/plugins/organization/access/index.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/better-auth/dist/plugins/organization/access/index.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   adminAc: () => (/* binding */ adminAc),\n/* harmony export */   defaultAc: () => (/* binding */ defaultAc),\n/* harmony export */   defaultRoles: () => (/* binding */ defaultRoles),\n/* harmony export */   defaultStatements: () => (/* binding */ defaultStatements),\n/* harmony export */   memberAc: () => (/* binding */ memberAc),\n/* harmony export */   ownerAc: () => (/* binding */ ownerAc)\n/* harmony export */ });\n/* harmony import */ var _access_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../access/index.mjs */ \"(rsc)/./node_modules/better-auth/dist/plugins/access/index.mjs\");\n/* harmony import */ var _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../shared/better-auth.DdzSJf-n.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs\");\n\n\n\nconst defaultStatements = {\n  organization: [\"update\", \"delete\"],\n  member: [\"create\", \"update\", \"delete\"],\n  invitation: [\"create\", \"cancel\"],\n  team: [\"create\", \"update\", \"delete\"],\n  ac: [\"create\", \"read\", \"update\", \"delete\"]\n};\nconst defaultAc = (0,_access_index_mjs__WEBPACK_IMPORTED_MODULE_0__.createAccessControl)(defaultStatements);\nconst adminAc = defaultAc.newRole({\n  organization: [\"update\"],\n  invitation: [\"create\", \"cancel\"],\n  member: [\"create\", \"update\", \"delete\"],\n  team: [\"create\", \"update\", \"delete\"],\n  ac: [\"create\", \"read\", \"update\", \"delete\"]\n});\nconst ownerAc = defaultAc.newRole({\n  organization: [\"update\", \"delete\"],\n  member: [\"create\", \"update\", \"delete\"],\n  invitation: [\"create\", \"cancel\"],\n  team: [\"create\", \"update\", \"delete\"],\n  ac: [\"create\", \"read\", \"update\", \"delete\"]\n});\nconst memberAc = defaultAc.newRole({\n  organization: [],\n  member: [],\n  invitation: [],\n  team: [],\n  ac: [\"read\"]\n  // Allow members to see all roles for their org.\n});\nconst defaultRoles = {\n  admin: adminAc,\n  owner: ownerAc,\n  member: memberAc\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9wbHVnaW5zL29yZ2FuaXphdGlvbi9hY2Nlc3MvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQTZEO0FBQ1g7O0FBRWxEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHNFQUFtQjtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWtGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXV0b3BsYW5jYW0vLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9wbHVnaW5zL29yZ2FuaXphdGlvbi9hY2Nlc3MvaW5kZXgubWpzPzljNzMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlQWNjZXNzQ29udHJvbCB9IGZyb20gJy4uLy4uL2FjY2Vzcy9pbmRleC5tanMnO1xuaW1wb3J0ICcuLi8uLi8uLi9zaGFyZWQvYmV0dGVyLWF1dGguRGR6U0pmLW4ubWpzJztcblxuY29uc3QgZGVmYXVsdFN0YXRlbWVudHMgPSB7XG4gIG9yZ2FuaXphdGlvbjogW1widXBkYXRlXCIsIFwiZGVsZXRlXCJdLFxuICBtZW1iZXI6IFtcImNyZWF0ZVwiLCBcInVwZGF0ZVwiLCBcImRlbGV0ZVwiXSxcbiAgaW52aXRhdGlvbjogW1wiY3JlYXRlXCIsIFwiY2FuY2VsXCJdLFxuICB0ZWFtOiBbXCJjcmVhdGVcIiwgXCJ1cGRhdGVcIiwgXCJkZWxldGVcIl0sXG4gIGFjOiBbXCJjcmVhdGVcIiwgXCJyZWFkXCIsIFwidXBkYXRlXCIsIFwiZGVsZXRlXCJdXG59O1xuY29uc3QgZGVmYXVsdEFjID0gY3JlYXRlQWNjZXNzQ29udHJvbChkZWZhdWx0U3RhdGVtZW50cyk7XG5jb25zdCBhZG1pbkFjID0gZGVmYXVsdEFjLm5ld1JvbGUoe1xuICBvcmdhbml6YXRpb246IFtcInVwZGF0ZVwiXSxcbiAgaW52aXRhdGlvbjogW1wiY3JlYXRlXCIsIFwiY2FuY2VsXCJdLFxuICBtZW1iZXI6IFtcImNyZWF0ZVwiLCBcInVwZGF0ZVwiLCBcImRlbGV0ZVwiXSxcbiAgdGVhbTogW1wiY3JlYXRlXCIsIFwidXBkYXRlXCIsIFwiZGVsZXRlXCJdLFxuICBhYzogW1wiY3JlYXRlXCIsIFwicmVhZFwiLCBcInVwZGF0ZVwiLCBcImRlbGV0ZVwiXVxufSk7XG5jb25zdCBvd25lckFjID0gZGVmYXVsdEFjLm5ld1JvbGUoe1xuICBvcmdhbml6YXRpb246IFtcInVwZGF0ZVwiLCBcImRlbGV0ZVwiXSxcbiAgbWVtYmVyOiBbXCJjcmVhdGVcIiwgXCJ1cGRhdGVcIiwgXCJkZWxldGVcIl0sXG4gIGludml0YXRpb246IFtcImNyZWF0ZVwiLCBcImNhbmNlbFwiXSxcbiAgdGVhbTogW1wiY3JlYXRlXCIsIFwidXBkYXRlXCIsIFwiZGVsZXRlXCJdLFxuICBhYzogW1wiY3JlYXRlXCIsIFwicmVhZFwiLCBcInVwZGF0ZVwiLCBcImRlbGV0ZVwiXVxufSk7XG5jb25zdCBtZW1iZXJBYyA9IGRlZmF1bHRBYy5uZXdSb2xlKHtcbiAgb3JnYW5pemF0aW9uOiBbXSxcbiAgbWVtYmVyOiBbXSxcbiAgaW52aXRhdGlvbjogW10sXG4gIHRlYW06IFtdLFxuICBhYzogW1wicmVhZFwiXVxuICAvLyBBbGxvdyBtZW1iZXJzIHRvIHNlZSBhbGwgcm9sZXMgZm9yIHRoZWlyIG9yZy5cbn0pO1xuY29uc3QgZGVmYXVsdFJvbGVzID0ge1xuICBhZG1pbjogYWRtaW5BYyxcbiAgb3duZXI6IG93bmVyQWMsXG4gIG1lbWJlcjogbWVtYmVyQWNcbn07XG5cbmV4cG9ydCB7IGFkbWluQWMsIGRlZmF1bHRBYywgZGVmYXVsdFJvbGVzLCBkZWZhdWx0U3RhdGVtZW50cywgbWVtYmVyQWMsIG93bmVyQWMgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/plugins/organization/access/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   g: () => (/* binding */ generateRandomString)\n/* harmony export */ });\n/* harmony import */ var _better_auth_utils_random__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @better-auth/utils/random */ \"(rsc)/./node_modules/@better-auth/utils/dist/random.mjs\");\n\n\nconst generateRandomString = (0,_better_auth_utils_random__WEBPACK_IMPORTED_MODULE_0__.createRandomStringGenerator)(\n  \"a-z\",\n  \"0-9\",\n  \"A-Z\",\n  \"-_\"\n);\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguQjRRb3hkZ2MubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXdFOztBQUV4RSw2QkFBNkIsc0ZBQTJCO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXV0b3BsYW5jYW0vLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguQjRRb3hkZ2MubWpzP2MyNmIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlUmFuZG9tU3RyaW5nR2VuZXJhdG9yIH0gZnJvbSAnQGJldHRlci1hdXRoL3V0aWxzL3JhbmRvbSc7XG5cbmNvbnN0IGdlbmVyYXRlUmFuZG9tU3RyaW5nID0gY3JlYXRlUmFuZG9tU3RyaW5nR2VuZXJhdG9yKFxuICBcImEtelwiLFxuICBcIjAtOVwiLFxuICBcIkEtWlwiLFxuICBcIi1fXCJcbik7XG5cbmV4cG9ydCB7IGdlbmVyYXRlUmFuZG9tU3RyaW5nIGFzIGcgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.BAk2ZmIN.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.BAk2ZmIN.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   c: () => (/* binding */ createKyselyAdapter),\n/* harmony export */   g: () => (/* binding */ getKyselyDatabaseType),\n/* harmony export */   k: () => (/* binding */ kyselyAdapter)\n/* harmony export */ });\n/* harmony import */ var kysely__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! kysely */ \"(rsc)/./node_modules/kysely/dist/esm/dialect/sqlite/sqlite-dialect.js\");\n/* harmony import */ var kysely__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! kysely */ \"(rsc)/./node_modules/kysely/dist/esm/dialect/mysql/mysql-dialect.js\");\n/* harmony import */ var kysely__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! kysely */ \"(rsc)/./node_modules/kysely/dist/esm/dialect/postgres/postgres-dialect.js\");\n/* harmony import */ var kysely__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! kysely */ \"(rsc)/./node_modules/kysely/dist/esm/dialect/mssql/mssql-dialect.js\");\n/* harmony import */ var kysely__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! kysely */ \"(rsc)/./node_modules/kysely/dist/esm/kysely.js\");\n/* harmony import */ var _better_auth_BvvYEWCP_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./better-auth.BvvYEWCP.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.BvvYEWCP.mjs\");\n\n\n\nfunction getKyselyDatabaseType(db) {\n  if (!db) {\n    return null;\n  }\n  if (\"dialect\" in db) {\n    return getKyselyDatabaseType(db.dialect);\n  }\n  if (\"createDriver\" in db) {\n    if (db instanceof kysely__WEBPACK_IMPORTED_MODULE_1__.SqliteDialect) {\n      return \"sqlite\";\n    }\n    if (db instanceof kysely__WEBPACK_IMPORTED_MODULE_2__.MysqlDialect) {\n      return \"mysql\";\n    }\n    if (db instanceof kysely__WEBPACK_IMPORTED_MODULE_3__.PostgresDialect) {\n      return \"postgres\";\n    }\n    if (db instanceof kysely__WEBPACK_IMPORTED_MODULE_4__.MssqlDialect) {\n      return \"mssql\";\n    }\n  }\n  if (\"aggregate\" in db) {\n    return \"sqlite\";\n  }\n  if (\"getConnection\" in db) {\n    return \"mysql\";\n  }\n  if (\"connect\" in db) {\n    return \"postgres\";\n  }\n  if (\"fileControl\" in db) {\n    return \"sqlite\";\n  }\n  if (\"open\" in db && \"close\" in db && \"prepare\" in db) {\n    return \"sqlite\";\n  }\n  return null;\n}\nconst createKyselyAdapter = async (config) => {\n  const db = config.database;\n  if (!db) {\n    return {\n      kysely: null,\n      databaseType: null,\n      transaction: void 0\n    };\n  }\n  if (\"db\" in db) {\n    return {\n      kysely: db.db,\n      databaseType: db.type,\n      transaction: db.transaction\n    };\n  }\n  if (\"dialect\" in db) {\n    return {\n      kysely: new kysely__WEBPACK_IMPORTED_MODULE_5__.Kysely({ dialect: db.dialect }),\n      databaseType: db.type,\n      transaction: db.transaction\n    };\n  }\n  let dialect = void 0;\n  const databaseType = getKyselyDatabaseType(db);\n  if (\"createDriver\" in db) {\n    dialect = db;\n  }\n  if (\"aggregate\" in db && !(\"createSession\" in db)) {\n    dialect = new kysely__WEBPACK_IMPORTED_MODULE_1__.SqliteDialect({\n      database: db\n    });\n  }\n  if (\"getConnection\" in db) {\n    dialect = new kysely__WEBPACK_IMPORTED_MODULE_2__.MysqlDialect(db);\n  }\n  if (\"connect\" in db) {\n    dialect = new kysely__WEBPACK_IMPORTED_MODULE_3__.PostgresDialect({\n      pool: db\n    });\n  }\n  if (\"fileControl\" in db) {\n    const { BunSqliteDialect } = await __webpack_require__.e(/*! import() */ \"vendor-chunks/better-auth\").then(__webpack_require__.bind(__webpack_require__, /*! ../chunks/bun-sqlite-dialect.mjs */ \"(rsc)/./node_modules/better-auth/dist/chunks/bun-sqlite-dialect.mjs\"));\n    dialect = new BunSqliteDialect({\n      database: db\n    });\n  }\n  if (\"createSession\" in db && typeof window === \"undefined\") {\n    let DatabaseSync = void 0;\n    try {\n      let nodeSqlite = \"node:sqlite\";\n      ({ DatabaseSync } = await import(\n        /* @vite-ignore */\n        /* webpackIgnore: true */\n        nodeSqlite\n      ));\n    } catch (error) {\n      if (error !== null && typeof error === \"object\" && \"code\" in error && error.code !== \"ERR_UNKNOWN_BUILTIN_MODULE\") {\n        throw error;\n      }\n    }\n    if (DatabaseSync && db instanceof DatabaseSync) {\n      const { NodeSqliteDialect } = await __webpack_require__.e(/*! import() */ \"vendor-chunks/better-auth\").then(__webpack_require__.bind(__webpack_require__, /*! ../chunks/node-sqlite-dialect.mjs */ \"(rsc)/./node_modules/better-auth/dist/chunks/node-sqlite-dialect.mjs\"));\n      dialect = new NodeSqliteDialect({\n        database: db\n      });\n    }\n  }\n  return {\n    kysely: dialect ? new kysely__WEBPACK_IMPORTED_MODULE_5__.Kysely({ dialect }) : null,\n    databaseType,\n    transaction: void 0\n  };\n};\n\nconst kyselyAdapter = (db, config) => {\n  let lazyOptions = null;\n  const createCustomAdapter = (db2) => {\n    return ({ getFieldName, schema, getDefaultModelName }) => {\n      const withReturning = async (values, builder, model, where) => {\n        let res;\n        if (config?.type === \"mysql\") {\n          await builder.execute();\n          const field = values.id ? \"id\" : where.length > 0 && where[0]?.field ? where[0].field : \"id\";\n          if (!values.id && where.length === 0) {\n            res = await db2.selectFrom(model).selectAll().orderBy(getFieldName({ model, field }), \"desc\").limit(1).executeTakeFirst();\n            return res;\n          }\n          const value = values[field] || where[0]?.value;\n          res = await db2.selectFrom(model).selectAll().orderBy(getFieldName({ model, field }), \"desc\").where(getFieldName({ model, field }), \"=\", value).limit(1).executeTakeFirst();\n          return res;\n        }\n        if (config?.type === \"mssql\") {\n          res = await builder.outputAll(\"inserted\").executeTakeFirst();\n          return res;\n        }\n        res = await builder.returningAll().executeTakeFirst();\n        return res;\n      };\n      function transformValueToDB(value, model, field) {\n        if (field === \"id\") {\n          return value;\n        }\n        const { type = \"sqlite\" } = config || {};\n        let f = schema[model]?.fields[field];\n        if (!f) {\n          f = Object.values(schema).find((f2) => f2.modelName === model);\n        }\n        if (f.type === \"boolean\" && (type === \"sqlite\" || type === \"mssql\") && value !== null && value !== void 0) {\n          return value ? 1 : 0;\n        }\n        if (f.type === \"date\" && value && value instanceof Date) {\n          if (type === \"sqlite\") return value.toISOString();\n          return value;\n        }\n        return value;\n      }\n      function transformValueFromDB(value) {\n        function transformObject(obj) {\n          for (const key in obj) {\n            if (!Object.prototype.hasOwnProperty.call(obj, key)) continue;\n            const field = obj[key];\n            if (field instanceof Date && config?.type === \"mysql\") ; else if (typeof field === \"object\" && field !== null) {\n              transformObject(field);\n            }\n          }\n        }\n        if (Array.isArray(value)) {\n          for (let i = 0; i < value.length; i++) {\n            const item = value[i];\n            if (typeof item === \"object\" && item !== null) {\n              transformObject(item);\n            }\n          }\n        } else if (typeof value === \"object\" && value !== null) {\n          transformObject(value);\n        }\n        return value;\n      }\n      function convertWhereClause(model, w) {\n        if (!w)\n          return {\n            and: null,\n            or: null\n          };\n        const conditions = {\n          and: [],\n          or: []\n        };\n        w.forEach((condition) => {\n          let {\n            field: _field,\n            value,\n            operator = \"=\",\n            connector = \"AND\"\n          } = condition;\n          const field = getFieldName({ model, field: _field });\n          value = transformValueToDB(value, model, _field);\n          const expr = (eb) => {\n            if (operator.toLowerCase() === \"in\") {\n              return eb(field, \"in\", Array.isArray(value) ? value : [value]);\n            }\n            if (operator.toLowerCase() === \"not_in\") {\n              return eb(\n                field,\n                \"not in\",\n                Array.isArray(value) ? value : [value]\n              );\n            }\n            if (operator === \"contains\") {\n              return eb(field, \"like\", `%${value}%`);\n            }\n            if (operator === \"starts_with\") {\n              return eb(field, \"like\", `${value}%`);\n            }\n            if (operator === \"ends_with\") {\n              return eb(field, \"like\", `%${value}`);\n            }\n            if (operator === \"eq\") {\n              return eb(field, \"=\", value);\n            }\n            if (operator === \"ne\") {\n              return eb(field, \"<>\", value);\n            }\n            if (operator === \"gt\") {\n              return eb(field, \">\", value);\n            }\n            if (operator === \"gte\") {\n              return eb(field, \">=\", value);\n            }\n            if (operator === \"lt\") {\n              return eb(field, \"<\", value);\n            }\n            if (operator === \"lte\") {\n              return eb(field, \"<=\", value);\n            }\n            return eb(field, operator, value);\n          };\n          if (connector === \"OR\") {\n            conditions.or.push(expr);\n          } else {\n            conditions.and.push(expr);\n          }\n        });\n        return {\n          and: conditions.and.length ? conditions.and : null,\n          or: conditions.or.length ? conditions.or : null\n        };\n      }\n      return {\n        async create({ data, model }) {\n          const builder = db2.insertInto(model).values(data);\n          const returned = await withReturning(data, builder, model, []);\n          return transformValueFromDB(returned);\n        },\n        async findOne({ model, where, select }) {\n          const { and, or } = convertWhereClause(model, where);\n          let query = db2.selectFrom(model).selectAll();\n          if (and) {\n            query = query.where((eb) => eb.and(and.map((expr) => expr(eb))));\n          }\n          if (or) {\n            query = query.where((eb) => eb.or(or.map((expr) => expr(eb))));\n          }\n          const res = await query.executeTakeFirst();\n          if (!res) return null;\n          return transformValueFromDB(res);\n        },\n        async findMany({ model, where, limit, offset, sortBy }) {\n          const { and, or } = convertWhereClause(model, where);\n          let query = db2.selectFrom(model);\n          if (and) {\n            query = query.where((eb) => eb.and(and.map((expr) => expr(eb))));\n          }\n          if (or) {\n            query = query.where((eb) => eb.or(or.map((expr) => expr(eb))));\n          }\n          if (config?.type === \"mssql\") {\n            if (!offset) {\n              query = query.top(limit || 100);\n            }\n          } else {\n            query = query.limit(limit || 100);\n          }\n          if (sortBy) {\n            query = query.orderBy(\n              getFieldName({ model, field: sortBy.field }),\n              sortBy.direction\n            );\n          }\n          if (offset) {\n            if (config?.type === \"mssql\") {\n              if (!sortBy) {\n                query = query.orderBy(getFieldName({ model, field: \"id\" }));\n              }\n              query = query.offset(offset).fetch(limit || 100);\n            } else {\n              query = query.offset(offset);\n            }\n          }\n          const res = await query.selectAll().execute();\n          if (!res) return [];\n          return transformValueFromDB(res);\n        },\n        async update({ model, where, update: values }) {\n          const { and, or } = convertWhereClause(model, where);\n          let query = db2.updateTable(model).set(values);\n          if (and) {\n            query = query.where((eb) => eb.and(and.map((expr) => expr(eb))));\n          }\n          if (or) {\n            query = query.where((eb) => eb.or(or.map((expr) => expr(eb))));\n          }\n          return transformValueFromDB(\n            await withReturning(values, query, model, where)\n          );\n        },\n        async updateMany({ model, where, update: values }) {\n          const { and, or } = convertWhereClause(model, where);\n          let query = db2.updateTable(model).set(values);\n          if (and) {\n            query = query.where((eb) => eb.and(and.map((expr) => expr(eb))));\n          }\n          if (or) {\n            query = query.where((eb) => eb.or(or.map((expr) => expr(eb))));\n          }\n          const res = await query.execute();\n          return res.length;\n        },\n        async count({ model, where }) {\n          const { and, or } = convertWhereClause(model, where);\n          let query = db2.selectFrom(model).select(db2.fn.count(\"id\").as(\"count\"));\n          if (and) {\n            query = query.where((eb) => eb.and(and.map((expr) => expr(eb))));\n          }\n          if (or) {\n            query = query.where((eb) => eb.or(or.map((expr) => expr(eb))));\n          }\n          const res = await query.execute();\n          if (typeof res[0].count === \"number\") {\n            return res[0].count;\n          }\n          if (typeof res[0].count === \"bigint\") {\n            return Number(res[0].count);\n          }\n          return parseInt(res[0].count);\n        },\n        async delete({ model, where }) {\n          const { and, or } = convertWhereClause(model, where);\n          let query = db2.deleteFrom(model);\n          if (and) {\n            query = query.where((eb) => eb.and(and.map((expr) => expr(eb))));\n          }\n          if (or) {\n            query = query.where((eb) => eb.or(or.map((expr) => expr(eb))));\n          }\n          await query.execute();\n        },\n        async deleteMany({ model, where }) {\n          const { and, or } = convertWhereClause(model, where);\n          let query = db2.deleteFrom(model);\n          if (and) {\n            query = query.where((eb) => eb.and(and.map((expr) => expr(eb))));\n          }\n          if (or) {\n            query = query.where((eb) => eb.or(or.map((expr) => expr(eb))));\n          }\n          return (await query.execute()).length;\n        },\n        options: config\n      };\n    };\n  };\n  let adapterOptions = null;\n  adapterOptions = {\n    config: {\n      adapterId: \"kysely\",\n      adapterName: \"Kysely Adapter\",\n      usePlural: config?.usePlural,\n      debugLogs: config?.debugLogs,\n      supportsBooleans: config?.type === \"sqlite\" || config?.type === \"mssql\" || config?.type === \"mysql\" || !config?.type ? false : true,\n      supportsDates: config?.type === \"sqlite\" || config?.type === \"mssql\" || !config?.type ? false : true,\n      supportsJSON: false,\n      transaction: config?.transaction ?? false ? (cb) => db.transaction().execute((trx) => {\n        const adapter2 = (0,_better_auth_BvvYEWCP_mjs__WEBPACK_IMPORTED_MODULE_0__.c)({\n          config: adapterOptions.config,\n          adapter: createCustomAdapter(trx)\n        })(lazyOptions);\n        return cb(adapter2);\n      }) : false\n    },\n    adapter: createCustomAdapter(db)\n  };\n  const adapter = (0,_better_auth_BvvYEWCP_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(adapterOptions);\n  return (options) => {\n    lazyOptions = options;\n    return adapter(options);\n  };\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.BAk2ZmIN.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.BLnvK9hk.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.BLnvK9hk.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ parseAccountOutput),\n/* harmony export */   b: () => (/* binding */ parseSessionOutput),\n/* harmony export */   c: () => (/* binding */ parseInputData),\n/* harmony export */   d: () => (/* binding */ parseUserInput),\n/* harmony export */   e: () => (/* binding */ parseAdditionalUserInput),\n/* harmony export */   f: () => (/* binding */ parseAccountInput),\n/* harmony export */   g: () => (/* binding */ parseSessionInput),\n/* harmony export */   m: () => (/* binding */ mergeSchema),\n/* harmony export */   p: () => (/* binding */ parseUserOutput)\n/* harmony export */ });\n/* harmony import */ var better_call__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! better-call */ \"(rsc)/./node_modules/better-call/dist/index.js\");\n\n\nconst cache = /* @__PURE__ */ new WeakMap();\nfunction parseOutputData(data, schema) {\n  const fields = schema.fields;\n  const parsedData = {};\n  for (const key in data) {\n    const field = fields[key];\n    if (!field) {\n      parsedData[key] = data[key];\n      continue;\n    }\n    if (field.returned === false) {\n      continue;\n    }\n    parsedData[key] = data[key];\n  }\n  return parsedData;\n}\nfunction getAllFields(options, table) {\n  if (!cache.has(options)) {\n    cache.set(options, /* @__PURE__ */ new Map());\n  }\n  const tableCache = cache.get(options);\n  if (tableCache.has(table)) {\n    return tableCache.get(table);\n  }\n  let schema = {\n    ...table === \"user\" ? options.user?.additionalFields : {},\n    ...table === \"session\" ? options.session?.additionalFields : {}\n  };\n  for (const plugin of options.plugins || []) {\n    if (plugin.schema && plugin.schema[table]) {\n      schema = {\n        ...schema,\n        ...plugin.schema[table].fields\n      };\n    }\n  }\n  cache.get(options).set(table, schema);\n  return schema;\n}\nfunction parseUserOutput(options, user) {\n  const schema = getAllFields(options, \"user\");\n  return parseOutputData(user, { fields: schema });\n}\nfunction parseAccountOutput(options, account) {\n  const schema = getAllFields(options, \"account\");\n  return parseOutputData(account, { fields: schema });\n}\nfunction parseSessionOutput(options, session) {\n  const schema = getAllFields(options, \"session\");\n  return parseOutputData(session, { fields: schema });\n}\nfunction parseInputData(data, schema) {\n  const action = schema.action || \"create\";\n  const fields = schema.fields;\n  const parsedData = Object.assign(\n    /* @__PURE__ */ Object.create(null),\n    null\n  );\n  for (const key in fields) {\n    if (key in data) {\n      if (fields[key].input === false) {\n        if (fields[key].defaultValue) {\n          parsedData[key] = fields[key].defaultValue;\n          continue;\n        }\n        if (parsedData[key]) {\n          throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n            message: `${key} is not allowed to be set`\n          });\n        }\n        continue;\n      }\n      if (fields[key].validator?.input && data[key] !== void 0) {\n        parsedData[key] = fields[key].validator.input.parse(data[key]);\n        continue;\n      }\n      if (fields[key].transform?.input && data[key] !== void 0) {\n        parsedData[key] = fields[key].transform?.input(data[key]);\n        continue;\n      }\n      parsedData[key] = data[key];\n      continue;\n    }\n    if (fields[key].defaultValue && action === \"create\") {\n      parsedData[key] = fields[key].defaultValue;\n      continue;\n    }\n    if (fields[key].required && action === \"create\") {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: `${key} is required`\n      });\n    }\n  }\n  return parsedData;\n}\nfunction parseUserInput(options, user = {}, action) {\n  const schema = getAllFields(options, \"user\");\n  return parseInputData(user, { fields: schema, action });\n}\nfunction parseAdditionalUserInput(options, user) {\n  const schema = getAllFields(options, \"user\");\n  return parseInputData(user || {}, { fields: schema });\n}\nfunction parseAccountInput(options, account) {\n  const schema = getAllFields(options, \"account\");\n  return parseInputData(account, { fields: schema });\n}\nfunction parseSessionInput(options, session) {\n  const schema = getAllFields(options, \"session\");\n  return parseInputData(session, { fields: schema });\n}\nfunction mergeSchema(schema, newSchema) {\n  if (!newSchema) {\n    return schema;\n  }\n  for (const table in newSchema) {\n    const newModelName = newSchema[table]?.modelName;\n    if (newModelName) {\n      schema[table].modelName = newModelName;\n    }\n    for (const field in schema[table].fields) {\n      const newField = newSchema[table]?.fields?.[field];\n      if (!newField) {\n        continue;\n      }\n      schema[table].fields[field].fieldName = newField;\n    }\n  }\n  return schema;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguQkxudks5aGsubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBdUM7O0FBRXZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2REFBNkQ7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLGdCQUFnQjtBQUNqRDtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsZ0JBQWdCO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxnQkFBZ0I7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsaURBQVE7QUFDNUIsd0JBQXdCLEtBQUs7QUFDN0IsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGlEQUFRO0FBQ3hCLG9CQUFvQixLQUFLO0FBQ3pCLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQztBQUMxQztBQUNBLGdDQUFnQyx3QkFBd0I7QUFDeEQ7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLElBQUksZ0JBQWdCO0FBQ3REO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxnQkFBZ0I7QUFDbkQ7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLGdCQUFnQjtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUU2TiIsInNvdXJjZXMiOlsid2VicGFjazovL2F1dG9wbGFuY2FtLy4vbm9kZV9tb2R1bGVzL2JldHRlci1hdXRoL2Rpc3Qvc2hhcmVkL2JldHRlci1hdXRoLkJMbnZLOWhrLm1qcz9hY2Q5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFQSUVycm9yIH0gZnJvbSAnYmV0dGVyLWNhbGwnO1xuXG5jb25zdCBjYWNoZSA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpO1xuZnVuY3Rpb24gcGFyc2VPdXRwdXREYXRhKGRhdGEsIHNjaGVtYSkge1xuICBjb25zdCBmaWVsZHMgPSBzY2hlbWEuZmllbGRzO1xuICBjb25zdCBwYXJzZWREYXRhID0ge307XG4gIGZvciAoY29uc3Qga2V5IGluIGRhdGEpIHtcbiAgICBjb25zdCBmaWVsZCA9IGZpZWxkc1trZXldO1xuICAgIGlmICghZmllbGQpIHtcbiAgICAgIHBhcnNlZERhdGFba2V5XSA9IGRhdGFba2V5XTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoZmllbGQucmV0dXJuZWQgPT09IGZhbHNlKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgcGFyc2VkRGF0YVtrZXldID0gZGF0YVtrZXldO1xuICB9XG4gIHJldHVybiBwYXJzZWREYXRhO1xufVxuZnVuY3Rpb24gZ2V0QWxsRmllbGRzKG9wdGlvbnMsIHRhYmxlKSB7XG4gIGlmICghY2FjaGUuaGFzKG9wdGlvbnMpKSB7XG4gICAgY2FjaGUuc2V0KG9wdGlvbnMsIC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCkpO1xuICB9XG4gIGNvbnN0IHRhYmxlQ2FjaGUgPSBjYWNoZS5nZXQob3B0aW9ucyk7XG4gIGlmICh0YWJsZUNhY2hlLmhhcyh0YWJsZSkpIHtcbiAgICByZXR1cm4gdGFibGVDYWNoZS5nZXQodGFibGUpO1xuICB9XG4gIGxldCBzY2hlbWEgPSB7XG4gICAgLi4udGFibGUgPT09IFwidXNlclwiID8gb3B0aW9ucy51c2VyPy5hZGRpdGlvbmFsRmllbGRzIDoge30sXG4gICAgLi4udGFibGUgPT09IFwic2Vzc2lvblwiID8gb3B0aW9ucy5zZXNzaW9uPy5hZGRpdGlvbmFsRmllbGRzIDoge31cbiAgfTtcbiAgZm9yIChjb25zdCBwbHVnaW4gb2Ygb3B0aW9ucy5wbHVnaW5zIHx8IFtdKSB7XG4gICAgaWYgKHBsdWdpbi5zY2hlbWEgJiYgcGx1Z2luLnNjaGVtYVt0YWJsZV0pIHtcbiAgICAgIHNjaGVtYSA9IHtcbiAgICAgICAgLi4uc2NoZW1hLFxuICAgICAgICAuLi5wbHVnaW4uc2NoZW1hW3RhYmxlXS5maWVsZHNcbiAgICAgIH07XG4gICAgfVxuICB9XG4gIGNhY2hlLmdldChvcHRpb25zKS5zZXQodGFibGUsIHNjaGVtYSk7XG4gIHJldHVybiBzY2hlbWE7XG59XG5mdW5jdGlvbiBwYXJzZVVzZXJPdXRwdXQob3B0aW9ucywgdXNlcikge1xuICBjb25zdCBzY2hlbWEgPSBnZXRBbGxGaWVsZHMob3B0aW9ucywgXCJ1c2VyXCIpO1xuICByZXR1cm4gcGFyc2VPdXRwdXREYXRhKHVzZXIsIHsgZmllbGRzOiBzY2hlbWEgfSk7XG59XG5mdW5jdGlvbiBwYXJzZUFjY291bnRPdXRwdXQob3B0aW9ucywgYWNjb3VudCkge1xuICBjb25zdCBzY2hlbWEgPSBnZXRBbGxGaWVsZHMob3B0aW9ucywgXCJhY2NvdW50XCIpO1xuICByZXR1cm4gcGFyc2VPdXRwdXREYXRhKGFjY291bnQsIHsgZmllbGRzOiBzY2hlbWEgfSk7XG59XG5mdW5jdGlvbiBwYXJzZVNlc3Npb25PdXRwdXQob3B0aW9ucywgc2Vzc2lvbikge1xuICBjb25zdCBzY2hlbWEgPSBnZXRBbGxGaWVsZHMob3B0aW9ucywgXCJzZXNzaW9uXCIpO1xuICByZXR1cm4gcGFyc2VPdXRwdXREYXRhKHNlc3Npb24sIHsgZmllbGRzOiBzY2hlbWEgfSk7XG59XG5mdW5jdGlvbiBwYXJzZUlucHV0RGF0YShkYXRhLCBzY2hlbWEpIHtcbiAgY29uc3QgYWN0aW9uID0gc2NoZW1hLmFjdGlvbiB8fCBcImNyZWF0ZVwiO1xuICBjb25zdCBmaWVsZHMgPSBzY2hlbWEuZmllbGRzO1xuICBjb25zdCBwYXJzZWREYXRhID0gT2JqZWN0LmFzc2lnbihcbiAgICAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKSxcbiAgICBudWxsXG4gICk7XG4gIGZvciAoY29uc3Qga2V5IGluIGZpZWxkcykge1xuICAgIGlmIChrZXkgaW4gZGF0YSkge1xuICAgICAgaWYgKGZpZWxkc1trZXldLmlucHV0ID09PSBmYWxzZSkge1xuICAgICAgICBpZiAoZmllbGRzW2tleV0uZGVmYXVsdFZhbHVlKSB7XG4gICAgICAgICAgcGFyc2VkRGF0YVtrZXldID0gZmllbGRzW2tleV0uZGVmYXVsdFZhbHVlO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJzZWREYXRhW2tleV0pIHtcbiAgICAgICAgICB0aHJvdyBuZXcgQVBJRXJyb3IoXCJCQURfUkVRVUVTVFwiLCB7XG4gICAgICAgICAgICBtZXNzYWdlOiBgJHtrZXl9IGlzIG5vdCBhbGxvd2VkIHRvIGJlIHNldGBcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmIChmaWVsZHNba2V5XS52YWxpZGF0b3I/LmlucHV0ICYmIGRhdGFba2V5XSAhPT0gdm9pZCAwKSB7XG4gICAgICAgIHBhcnNlZERhdGFba2V5XSA9IGZpZWxkc1trZXldLnZhbGlkYXRvci5pbnB1dC5wYXJzZShkYXRhW2tleV0pO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmIChmaWVsZHNba2V5XS50cmFuc2Zvcm0/LmlucHV0ICYmIGRhdGFba2V5XSAhPT0gdm9pZCAwKSB7XG4gICAgICAgIHBhcnNlZERhdGFba2V5XSA9IGZpZWxkc1trZXldLnRyYW5zZm9ybT8uaW5wdXQoZGF0YVtrZXldKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBwYXJzZWREYXRhW2tleV0gPSBkYXRhW2tleV07XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKGZpZWxkc1trZXldLmRlZmF1bHRWYWx1ZSAmJiBhY3Rpb24gPT09IFwiY3JlYXRlXCIpIHtcbiAgICAgIHBhcnNlZERhdGFba2V5XSA9IGZpZWxkc1trZXldLmRlZmF1bHRWYWx1ZTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoZmllbGRzW2tleV0ucmVxdWlyZWQgJiYgYWN0aW9uID09PSBcImNyZWF0ZVwiKSB7XG4gICAgICB0aHJvdyBuZXcgQVBJRXJyb3IoXCJCQURfUkVRVUVTVFwiLCB7XG4gICAgICAgIG1lc3NhZ2U6IGAke2tleX0gaXMgcmVxdWlyZWRgXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHBhcnNlZERhdGE7XG59XG5mdW5jdGlvbiBwYXJzZVVzZXJJbnB1dChvcHRpb25zLCB1c2VyID0ge30sIGFjdGlvbikge1xuICBjb25zdCBzY2hlbWEgPSBnZXRBbGxGaWVsZHMob3B0aW9ucywgXCJ1c2VyXCIpO1xuICByZXR1cm4gcGFyc2VJbnB1dERhdGEodXNlciwgeyBmaWVsZHM6IHNjaGVtYSwgYWN0aW9uIH0pO1xufVxuZnVuY3Rpb24gcGFyc2VBZGRpdGlvbmFsVXNlcklucHV0KG9wdGlvbnMsIHVzZXIpIHtcbiAgY29uc3Qgc2NoZW1hID0gZ2V0QWxsRmllbGRzKG9wdGlvbnMsIFwidXNlclwiKTtcbiAgcmV0dXJuIHBhcnNlSW5wdXREYXRhKHVzZXIgfHwge30sIHsgZmllbGRzOiBzY2hlbWEgfSk7XG59XG5mdW5jdGlvbiBwYXJzZUFjY291bnRJbnB1dChvcHRpb25zLCBhY2NvdW50KSB7XG4gIGNvbnN0IHNjaGVtYSA9IGdldEFsbEZpZWxkcyhvcHRpb25zLCBcImFjY291bnRcIik7XG4gIHJldHVybiBwYXJzZUlucHV0RGF0YShhY2NvdW50LCB7IGZpZWxkczogc2NoZW1hIH0pO1xufVxuZnVuY3Rpb24gcGFyc2VTZXNzaW9uSW5wdXQob3B0aW9ucywgc2Vzc2lvbikge1xuICBjb25zdCBzY2hlbWEgPSBnZXRBbGxGaWVsZHMob3B0aW9ucywgXCJzZXNzaW9uXCIpO1xuICByZXR1cm4gcGFyc2VJbnB1dERhdGEoc2Vzc2lvbiwgeyBmaWVsZHM6IHNjaGVtYSB9KTtcbn1cbmZ1bmN0aW9uIG1lcmdlU2NoZW1hKHNjaGVtYSwgbmV3U2NoZW1hKSB7XG4gIGlmICghbmV3U2NoZW1hKSB7XG4gICAgcmV0dXJuIHNjaGVtYTtcbiAgfVxuICBmb3IgKGNvbnN0IHRhYmxlIGluIG5ld1NjaGVtYSkge1xuICAgIGNvbnN0IG5ld01vZGVsTmFtZSA9IG5ld1NjaGVtYVt0YWJsZV0/Lm1vZGVsTmFtZTtcbiAgICBpZiAobmV3TW9kZWxOYW1lKSB7XG4gICAgICBzY2hlbWFbdGFibGVdLm1vZGVsTmFtZSA9IG5ld01vZGVsTmFtZTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBmaWVsZCBpbiBzY2hlbWFbdGFibGVdLmZpZWxkcykge1xuICAgICAgY29uc3QgbmV3RmllbGQgPSBuZXdTY2hlbWFbdGFibGVdPy5maWVsZHM/LltmaWVsZF07XG4gICAgICBpZiAoIW5ld0ZpZWxkKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgc2NoZW1hW3RhYmxlXS5maWVsZHNbZmllbGRdLmZpZWxkTmFtZSA9IG5ld0ZpZWxkO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc2NoZW1hO1xufVxuXG5leHBvcnQgeyBwYXJzZUFjY291bnRPdXRwdXQgYXMgYSwgcGFyc2VTZXNzaW9uT3V0cHV0IGFzIGIsIHBhcnNlSW5wdXREYXRhIGFzIGMsIHBhcnNlVXNlcklucHV0IGFzIGQsIHBhcnNlQWRkaXRpb25hbFVzZXJJbnB1dCBhcyBlLCBwYXJzZUFjY291bnRJbnB1dCBhcyBmLCBwYXJzZVNlc3Npb25JbnB1dCBhcyBnLCBtZXJnZVNjaGVtYSBhcyBtLCBwYXJzZVVzZXJPdXRwdXQgYXMgcCB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.BLnvK9hk.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.BQOp-6ij.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.BQOp-6ij.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   g: () => (/* binding */ getIp)\n/* harmony export */ });\n/* harmony import */ var _better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./better-auth.CiuwFiHM.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.CiuwFiHM.mjs\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/v4/classic/external.js\");\n\n\n\nfunction getIp(req, options) {\n  if (options.advanced?.ipAddress?.disableIpTracking) {\n    return null;\n  }\n  if ((0,_better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_0__.i)()) {\n    return \"127.0.0.1\";\n  }\n  if (_better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_0__.a) {\n    return \"127.0.0.1\";\n  }\n  const headers = \"headers\" in req ? req.headers : req;\n  const defaultHeaders = [\"x-forwarded-for\"];\n  const ipHeaders = options.advanced?.ipAddress?.ipAddressHeaders || defaultHeaders;\n  for (const key of ipHeaders) {\n    const value = \"get\" in headers ? headers.get(key) : headers[key];\n    if (typeof value === \"string\") {\n      const ip = value.split(\",\")[0].trim();\n      if (isValidIP(ip)) {\n        return ip;\n      }\n    }\n  }\n  return null;\n}\nfunction isValidIP(ip) {\n  const ipv4 = zod__WEBPACK_IMPORTED_MODULE_1__.ipv4().safeParse(ip);\n  if (ipv4.success) {\n    return true;\n  }\n  const ipv6 = zod__WEBPACK_IMPORTED_MODULE_1__.ipv6().safeParse(ip);\n  if (ipv6.success) {\n    return true;\n  }\n  return false;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguQlFPcC02aWoubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE2RTtBQUNyRDs7QUFFeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLDREQUFNO0FBQ1o7QUFDQTtBQUNBLE1BQU0sd0RBQWE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUscUNBQU07QUFDckI7QUFDQTtBQUNBO0FBQ0EsZUFBZSxxQ0FBTTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVzQiIsInNvdXJjZXMiOlsid2VicGFjazovL2F1dG9wbGFuY2FtLy4vbm9kZV9tb2R1bGVzL2JldHRlci1hdXRoL2Rpc3Qvc2hhcmVkL2JldHRlci1hdXRoLkJRT3AtNmlqLm1qcz84MWE5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGkgYXMgaXNUZXN0LCBhIGFzIGlzRGV2ZWxvcG1lbnQgfSBmcm9tICcuL2JldHRlci1hdXRoLkNpdXdGaUhNLm1qcyc7XG5pbXBvcnQgeyB6IH0gZnJvbSAnem9kJztcblxuZnVuY3Rpb24gZ2V0SXAocmVxLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zLmFkdmFuY2VkPy5pcEFkZHJlc3M/LmRpc2FibGVJcFRyYWNraW5nKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgaWYgKGlzVGVzdCgpKSB7XG4gICAgcmV0dXJuIFwiMTI3LjAuMC4xXCI7XG4gIH1cbiAgaWYgKGlzRGV2ZWxvcG1lbnQpIHtcbiAgICByZXR1cm4gXCIxMjcuMC4wLjFcIjtcbiAgfVxuICBjb25zdCBoZWFkZXJzID0gXCJoZWFkZXJzXCIgaW4gcmVxID8gcmVxLmhlYWRlcnMgOiByZXE7XG4gIGNvbnN0IGRlZmF1bHRIZWFkZXJzID0gW1wieC1mb3J3YXJkZWQtZm9yXCJdO1xuICBjb25zdCBpcEhlYWRlcnMgPSBvcHRpb25zLmFkdmFuY2VkPy5pcEFkZHJlc3M/LmlwQWRkcmVzc0hlYWRlcnMgfHwgZGVmYXVsdEhlYWRlcnM7XG4gIGZvciAoY29uc3Qga2V5IG9mIGlwSGVhZGVycykge1xuICAgIGNvbnN0IHZhbHVlID0gXCJnZXRcIiBpbiBoZWFkZXJzID8gaGVhZGVycy5nZXQoa2V5KSA6IGhlYWRlcnNba2V5XTtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBjb25zdCBpcCA9IHZhbHVlLnNwbGl0KFwiLFwiKVswXS50cmltKCk7XG4gICAgICBpZiAoaXNWYWxpZElQKGlwKSkge1xuICAgICAgICByZXR1cm4gaXA7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gaXNWYWxpZElQKGlwKSB7XG4gIGNvbnN0IGlwdjQgPSB6LmlwdjQoKS5zYWZlUGFyc2UoaXApO1xuICBpZiAoaXB2NC5zdWNjZXNzKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgY29uc3QgaXB2NiA9IHouaXB2NigpLnNhZmVQYXJzZShpcCk7XG4gIGlmIChpcHY2LnN1Y2Nlc3MpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCB7IGdldElwIGFzIGcgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.BQOp-6ij.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.BRFtaovt.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.BRFtaovt.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ getBaseURL),\n/* harmony export */   b: () => (/* binding */ getHost),\n/* harmony export */   c: () => (/* binding */ getProtocol),\n/* harmony export */   g: () => (/* binding */ getOrigin)\n/* harmony export */ });\n/* harmony import */ var _better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./better-auth.CiuwFiHM.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.CiuwFiHM.mjs\");\n/* harmony import */ var _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./better-auth.DdzSJf-n.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs\");\n\n\n\nfunction checkHasPath(url) {\n  try {\n    const parsedUrl = new URL(url);\n    const pathname = parsedUrl.pathname.replace(/\\/+$/, \"\") || \"/\";\n    return pathname !== \"/\";\n  } catch (error) {\n    throw new _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_1__.B(\n      `Invalid base URL: ${url}. Please provide a valid base URL.`\n    );\n  }\n}\nfunction withPath(url, path = \"/api/auth\") {\n  const hasPath = checkHasPath(url);\n  if (hasPath) {\n    return url;\n  }\n  const trimmedUrl = url.replace(/\\/+$/, \"\");\n  if (!path || path === \"/\") {\n    return trimmedUrl;\n  }\n  path = path.startsWith(\"/\") ? path : `/${path}`;\n  return `${trimmedUrl}${path}`;\n}\nfunction getBaseURL(url, path, request, loadEnv) {\n  if (url) {\n    return withPath(url, path);\n  }\n  if (loadEnv !== false) {\n    const fromEnv = _better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_0__.e.BETTER_AUTH_URL || _better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_0__.e.NEXT_PUBLIC_BETTER_AUTH_URL || _better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_0__.e.PUBLIC_BETTER_AUTH_URL || _better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_0__.e.NUXT_PUBLIC_BETTER_AUTH_URL || _better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_0__.e.NUXT_PUBLIC_AUTH_URL || (_better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_0__.e.BASE_URL !== \"/\" ? _better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_0__.e.BASE_URL : void 0);\n    if (fromEnv) {\n      return withPath(fromEnv, path);\n    }\n  }\n  const fromRequest = request?.headers.get(\"x-forwarded-host\");\n  const fromRequestProto = request?.headers.get(\"x-forwarded-proto\");\n  if (fromRequest && fromRequestProto) {\n    return withPath(`${fromRequestProto}://${fromRequest}`, path);\n  }\n  if (request) {\n    const url2 = getOrigin(request.url);\n    if (!url2) {\n      throw new _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_1__.B(\n        \"Could not get origin from request. Please provide a valid base URL.\"\n      );\n    }\n    return withPath(url2, path);\n  }\n  if (typeof window !== \"undefined\" && window.location) {\n    return withPath(window.location.origin, path);\n  }\n  return void 0;\n}\nfunction getOrigin(url) {\n  try {\n    const parsedUrl = new URL(url);\n    return parsedUrl.origin;\n  } catch (error) {\n    return null;\n  }\n}\nfunction getProtocol(url) {\n  try {\n    const parsedUrl = new URL(url);\n    return parsedUrl.protocol;\n  } catch (error) {\n    return null;\n  }\n}\nfunction getHost(url) {\n  try {\n    const parsedUrl = new URL(url);\n    return parsedUrl.host;\n  } catch (error) {\n    return url;\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguQlJGdGFvdnQubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFzRDtBQUNZOztBQUVsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLGNBQWMsd0RBQWU7QUFDN0IsMkJBQTJCLElBQUk7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLEtBQUs7QUFDaEQsWUFBWSxXQUFXLEVBQUUsS0FBSztBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0Isd0RBQUcsb0JBQW9CLHdEQUFHLGdDQUFnQyx3REFBRywyQkFBMkIsd0RBQUcsZ0NBQWdDLHdEQUFHLDBCQUEwQix3REFBRyxvQkFBb0Isd0RBQUc7QUFDdE07QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsaUJBQWlCLEtBQUssWUFBWTtBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQix3REFBZTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFMkUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hdXRvcGxhbmNhbS8uL25vZGVfbW9kdWxlcy9iZXR0ZXItYXV0aC9kaXN0L3NoYXJlZC9iZXR0ZXItYXV0aC5CUkZ0YW92dC5tanM/YWQzNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBlIGFzIGVudiB9IGZyb20gJy4vYmV0dGVyLWF1dGguQ2l1d0ZpSE0ubWpzJztcbmltcG9ydCB7IEIgYXMgQmV0dGVyQXV0aEVycm9yIH0gZnJvbSAnLi9iZXR0ZXItYXV0aC5EZHpTSmYtbi5tanMnO1xuXG5mdW5jdGlvbiBjaGVja0hhc1BhdGgodXJsKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgcGFyc2VkVXJsID0gbmV3IFVSTCh1cmwpO1xuICAgIGNvbnN0IHBhdGhuYW1lID0gcGFyc2VkVXJsLnBhdGhuYW1lLnJlcGxhY2UoL1xcLyskLywgXCJcIikgfHwgXCIvXCI7XG4gICAgcmV0dXJuIHBhdGhuYW1lICE9PSBcIi9cIjtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICB0aHJvdyBuZXcgQmV0dGVyQXV0aEVycm9yKFxuICAgICAgYEludmFsaWQgYmFzZSBVUkw6ICR7dXJsfS4gUGxlYXNlIHByb3ZpZGUgYSB2YWxpZCBiYXNlIFVSTC5gXG4gICAgKTtcbiAgfVxufVxuZnVuY3Rpb24gd2l0aFBhdGgodXJsLCBwYXRoID0gXCIvYXBpL2F1dGhcIikge1xuICBjb25zdCBoYXNQYXRoID0gY2hlY2tIYXNQYXRoKHVybCk7XG4gIGlmIChoYXNQYXRoKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuICBjb25zdCB0cmltbWVkVXJsID0gdXJsLnJlcGxhY2UoL1xcLyskLywgXCJcIik7XG4gIGlmICghcGF0aCB8fCBwYXRoID09PSBcIi9cIikge1xuICAgIHJldHVybiB0cmltbWVkVXJsO1xuICB9XG4gIHBhdGggPSBwYXRoLnN0YXJ0c1dpdGgoXCIvXCIpID8gcGF0aCA6IGAvJHtwYXRofWA7XG4gIHJldHVybiBgJHt0cmltbWVkVXJsfSR7cGF0aH1gO1xufVxuZnVuY3Rpb24gZ2V0QmFzZVVSTCh1cmwsIHBhdGgsIHJlcXVlc3QsIGxvYWRFbnYpIHtcbiAgaWYgKHVybCkge1xuICAgIHJldHVybiB3aXRoUGF0aCh1cmwsIHBhdGgpO1xuICB9XG4gIGlmIChsb2FkRW52ICE9PSBmYWxzZSkge1xuICAgIGNvbnN0IGZyb21FbnYgPSBlbnYuQkVUVEVSX0FVVEhfVVJMIHx8IGVudi5ORVhUX1BVQkxJQ19CRVRURVJfQVVUSF9VUkwgfHwgZW52LlBVQkxJQ19CRVRURVJfQVVUSF9VUkwgfHwgZW52Lk5VWFRfUFVCTElDX0JFVFRFUl9BVVRIX1VSTCB8fCBlbnYuTlVYVF9QVUJMSUNfQVVUSF9VUkwgfHwgKGVudi5CQVNFX1VSTCAhPT0gXCIvXCIgPyBlbnYuQkFTRV9VUkwgOiB2b2lkIDApO1xuICAgIGlmIChmcm9tRW52KSB7XG4gICAgICByZXR1cm4gd2l0aFBhdGgoZnJvbUVudiwgcGF0aCk7XG4gICAgfVxuICB9XG4gIGNvbnN0IGZyb21SZXF1ZXN0ID0gcmVxdWVzdD8uaGVhZGVycy5nZXQoXCJ4LWZvcndhcmRlZC1ob3N0XCIpO1xuICBjb25zdCBmcm9tUmVxdWVzdFByb3RvID0gcmVxdWVzdD8uaGVhZGVycy5nZXQoXCJ4LWZvcndhcmRlZC1wcm90b1wiKTtcbiAgaWYgKGZyb21SZXF1ZXN0ICYmIGZyb21SZXF1ZXN0UHJvdG8pIHtcbiAgICByZXR1cm4gd2l0aFBhdGgoYCR7ZnJvbVJlcXVlc3RQcm90b306Ly8ke2Zyb21SZXF1ZXN0fWAsIHBhdGgpO1xuICB9XG4gIGlmIChyZXF1ZXN0KSB7XG4gICAgY29uc3QgdXJsMiA9IGdldE9yaWdpbihyZXF1ZXN0LnVybCk7XG4gICAgaWYgKCF1cmwyKSB7XG4gICAgICB0aHJvdyBuZXcgQmV0dGVyQXV0aEVycm9yKFxuICAgICAgICBcIkNvdWxkIG5vdCBnZXQgb3JpZ2luIGZyb20gcmVxdWVzdC4gUGxlYXNlIHByb3ZpZGUgYSB2YWxpZCBiYXNlIFVSTC5cIlxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHdpdGhQYXRoKHVybDIsIHBhdGgpO1xuICB9XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5sb2NhdGlvbikge1xuICAgIHJldHVybiB3aXRoUGF0aCh3aW5kb3cubG9jYXRpb24ub3JpZ2luLCBwYXRoKTtcbiAgfVxuICByZXR1cm4gdm9pZCAwO1xufVxuZnVuY3Rpb24gZ2V0T3JpZ2luKHVybCkge1xuICB0cnkge1xuICAgIGNvbnN0IHBhcnNlZFVybCA9IG5ldyBVUkwodXJsKTtcbiAgICByZXR1cm4gcGFyc2VkVXJsLm9yaWdpbjtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0UHJvdG9jb2wodXJsKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgcGFyc2VkVXJsID0gbmV3IFVSTCh1cmwpO1xuICAgIHJldHVybiBwYXJzZWRVcmwucHJvdG9jb2w7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldEhvc3QodXJsKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgcGFyc2VkVXJsID0gbmV3IFVSTCh1cmwpO1xuICAgIHJldHVybiBwYXJzZWRVcmwuaG9zdDtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG59XG5cbmV4cG9ydCB7IGdldEJhc2VVUkwgYXMgYSwgZ2V0SG9zdCBhcyBiLCBnZXRQcm90b2NvbCBhcyBjLCBnZXRPcmlnaW4gYXMgZyB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.BRFtaovt.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.BTrSrKsi.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.BTrSrKsi.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   s: () => (/* binding */ safeJSONParse)\n/* harmony export */ });\n/* harmony import */ var _better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./better-auth.DgGir396.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DgGir396.mjs\");\n\n\nfunction safeJSONParse(data) {\n  function reviver(_, value) {\n    if (typeof value === \"string\") {\n      const iso8601Regex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?Z$/;\n      if (iso8601Regex.test(value)) {\n        const date = new Date(value);\n        if (!isNaN(date.getTime())) {\n          return date;\n        }\n      }\n    }\n    return value;\n  }\n  try {\n    if (typeof data !== \"string\") {\n      return data;\n    }\n    return JSON.parse(data, reviver);\n  } catch (e) {\n    _better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_0__.a.error(\"Error parsing JSON\", { error: e });\n    return null;\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguQlRyU3JLc2kubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXlEOztBQUV6RDtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0osSUFBSSx3REFBTSwrQkFBK0IsVUFBVTtBQUNuRDtBQUNBO0FBQ0E7O0FBRThCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXV0b3BsYW5jYW0vLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguQlRyU3JLc2kubWpzPzk4MGMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYSBhcyBsb2dnZXIgfSBmcm9tICcuL2JldHRlci1hdXRoLkRnR2lyMzk2Lm1qcyc7XG5cbmZ1bmN0aW9uIHNhZmVKU09OUGFyc2UoZGF0YSkge1xuICBmdW5jdGlvbiByZXZpdmVyKF8sIHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgY29uc3QgaXNvODYwMVJlZ2V4ID0gL15cXGR7NH0tXFxkezJ9LVxcZHsyfVRcXGR7Mn06XFxkezJ9OlxcZHsyfSg/OlxcLlxcZCspP1okLztcbiAgICAgIGlmIChpc284NjAxUmVnZXgudGVzdCh2YWx1ZSkpIHtcbiAgICAgICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKHZhbHVlKTtcbiAgICAgICAgaWYgKCFpc05hTihkYXRlLmdldFRpbWUoKSkpIHtcbiAgICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgdHJ5IHtcbiAgICBpZiAodHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICByZXR1cm4gSlNPTi5wYXJzZShkYXRhLCByZXZpdmVyKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGxvZ2dlci5lcnJvcihcIkVycm9yIHBhcnNpbmcgSlNPTlwiLCB7IGVycm9yOiBlIH0pO1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbmV4cG9ydCB7IHNhZmVKU09OUGFyc2UgYXMgcyB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.BTrSrKsi.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.BUPPRXfK.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.BUPPRXfK.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   g: () => (/* binding */ generateId)\n/* harmony export */ });\n/* harmony import */ var _better_auth_utils_random__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @better-auth/utils/random */ \"(rsc)/./node_modules/@better-auth/utils/dist/random.mjs\");\n\n\nconst generateId = (size) => {\n  return (0,_better_auth_utils_random__WEBPACK_IMPORTED_MODULE_0__.createRandomStringGenerator)(\"a-z\", \"A-Z\", \"0-9\")(size || 32);\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguQlVQUFJYZksubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXdFOztBQUV4RTtBQUNBLFNBQVMsc0ZBQTJCO0FBQ3BDOztBQUUyQiIsInNvdXJjZXMiOlsid2VicGFjazovL2F1dG9wbGFuY2FtLy4vbm9kZV9tb2R1bGVzL2JldHRlci1hdXRoL2Rpc3Qvc2hhcmVkL2JldHRlci1hdXRoLkJVUFBSWGZLLm1qcz8yOGU0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZVJhbmRvbVN0cmluZ0dlbmVyYXRvciB9IGZyb20gJ0BiZXR0ZXItYXV0aC91dGlscy9yYW5kb20nO1xuXG5jb25zdCBnZW5lcmF0ZUlkID0gKHNpemUpID0+IHtcbiAgcmV0dXJuIGNyZWF0ZVJhbmRvbVN0cmluZ0dlbmVyYXRvcihcImEtelwiLCBcIkEtWlwiLCBcIjAtOVwiKShzaXplIHx8IDMyKTtcbn07XG5cbmV4cG9ydCB7IGdlbmVyYXRlSWQgYXMgZyB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.BUPPRXfK.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.BpA03GIs.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.BpA03GIs.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   d: () => (/* binding */ deviceAuthorizationClient)\n/* harmony export */ });\nconst deviceAuthorizationClient = () => {\n  return {\n    id: \"device-authorization\",\n    $InferServerPlugin: {},\n    pathMethods: {\n      \"/device/code\": \"POST\",\n      \"/device/token\": \"POST\",\n      \"/device\": \"GET\",\n      \"/device/approve\": \"POST\",\n      \"/device/deny\": \"POST\"\n    }\n  };\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguQnBBMDNHSXMubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUUwQyIsInNvdXJjZXMiOlsid2VicGFjazovL2F1dG9wbGFuY2FtLy4vbm9kZV9tb2R1bGVzL2JldHRlci1hdXRoL2Rpc3Qvc2hhcmVkL2JldHRlci1hdXRoLkJwQTAzR0lzLm1qcz8xNjM1Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGRldmljZUF1dGhvcml6YXRpb25DbGllbnQgPSAoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgaWQ6IFwiZGV2aWNlLWF1dGhvcml6YXRpb25cIixcbiAgICAkSW5mZXJTZXJ2ZXJQbHVnaW46IHt9LFxuICAgIHBhdGhNZXRob2RzOiB7XG4gICAgICBcIi9kZXZpY2UvY29kZVwiOiBcIlBPU1RcIixcbiAgICAgIFwiL2RldmljZS90b2tlblwiOiBcIlBPU1RcIixcbiAgICAgIFwiL2RldmljZVwiOiBcIkdFVFwiLFxuICAgICAgXCIvZGV2aWNlL2FwcHJvdmVcIjogXCJQT1NUXCIsXG4gICAgICBcIi9kZXZpY2UvZGVueVwiOiBcIlBPU1RcIlxuICAgIH1cbiAgfTtcbn07XG5cbmV4cG9ydCB7IGRldmljZUF1dGhvcml6YXRpb25DbGllbnQgYXMgZCB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.BpA03GIs.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.BvvYEWCP.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.BvvYEWCP.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   c: () => (/* binding */ createAdapterFactory)\n/* harmony export */ });\n/* harmony import */ var _better_auth_BTrSrKsi_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./better-auth.BTrSrKsi.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.BTrSrKsi.mjs\");\n/* harmony import */ var _better_auth_DhziC0ap_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./better-auth.DhziC0ap.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DhziC0ap.mjs\");\n/* harmony import */ var _better_auth_BUPPRXfK_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./better-auth.BUPPRXfK.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.BUPPRXfK.mjs\");\n/* harmony import */ var better_call__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! better-call */ \"(rsc)/./node_modules/better-call/dist/index.js\");\n/* harmony import */ var _better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @better-auth/utils/hash */ \"(rsc)/./node_modules/@better-auth/utils/dist/hash.mjs\");\n/* harmony import */ var _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @better-auth/utils/base64 */ \"(rsc)/./node_modules/@better-auth/utils/dist/base64.mjs\");\n/* harmony import */ var _better_auth_utils_hex__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @better-auth/utils/hex */ \"(rsc)/./node_modules/@better-auth/utils/dist/hex.mjs\");\n/* harmony import */ var _better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./better-auth.B4Qoxdgc.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs\");\n/* harmony import */ var _better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./better-auth.DgGir396.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DgGir396.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction withApplyDefault(value, field, action) {\n  if (action === \"update\") {\n    if (value === void 0 && field.onUpdate !== void 0) {\n      if (typeof field.onUpdate === \"function\") {\n        return field.onUpdate();\n      }\n      return field.onUpdate;\n    }\n    return value;\n  }\n  if (value === void 0 || value === null) {\n    if (field.defaultValue !== void 0) {\n      if (typeof field.defaultValue === \"function\") {\n        return field.defaultValue();\n      }\n      return field.defaultValue;\n    }\n  }\n  return value;\n}\n\nlet debugLogs = [];\nlet transactionId = -1;\nconst createAsIsTransaction = (adapter) => (fn) => fn(adapter);\nconst createAdapterFactory = ({\n  adapter: customAdapter,\n  config: cfg\n}) => (options) => {\n  const uniqueAdapterFactoryInstanceId = Math.random().toString(36).substring(2, 15);\n  const config = {\n    ...cfg,\n    supportsBooleans: cfg.supportsBooleans ?? true,\n    supportsDates: cfg.supportsDates ?? true,\n    supportsJSON: cfg.supportsJSON ?? false,\n    adapterName: cfg.adapterName ?? cfg.adapterId,\n    supportsNumericIds: cfg.supportsNumericIds ?? true,\n    transaction: cfg.transaction ?? false,\n    disableTransformInput: cfg.disableTransformInput ?? false,\n    disableTransformOutput: cfg.disableTransformOutput ?? false\n  };\n  if (options.advanced?.database?.useNumberId === true && config.supportsNumericIds === false) {\n    throw new Error(\n      `[${config.adapterName}] Your database or database adapter does not support numeric ids. Please disable \"useNumberId\" in your config.`\n    );\n  }\n  const schema = (0,_better_auth_DhziC0ap_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(options);\n  const getDefaultFieldName = ({\n    field,\n    model: unsafe_model\n  }) => {\n    if (field === \"id\" || field === \"_id\") {\n      return \"id\";\n    }\n    const model = getDefaultModelName(unsafe_model);\n    let f = schema[model]?.fields[field];\n    if (!f) {\n      const result = Object.entries(schema[model].fields).find(\n        ([_, f2]) => f2.fieldName === field\n      );\n      if (result) {\n        f = result[1];\n        field = result[0];\n      }\n    }\n    if (!f) {\n      debugLog(`Field ${field} not found in model ${model}`);\n      debugLog(`Schema:`, schema);\n      throw new Error(`Field ${field} not found in model ${model}`);\n    }\n    return field;\n  };\n  const getDefaultModelName = (model) => {\n    if (config.usePlural && model.charAt(model.length - 1) === \"s\") {\n      let pluralessModel = model.slice(0, -1);\n      let m2 = schema[pluralessModel] ? pluralessModel : void 0;\n      if (!m2) {\n        m2 = Object.entries(schema).find(\n          ([_, f]) => f.modelName === pluralessModel\n        )?.[0];\n      }\n      if (m2) {\n        return m2;\n      }\n    }\n    let m = schema[model] ? model : void 0;\n    if (!m) {\n      m = Object.entries(schema).find(([_, f]) => f.modelName === model)?.[0];\n    }\n    if (!m) {\n      debugLog(`Model \"${model}\" not found in schema`);\n      debugLog(`Schema:`, schema);\n      throw new Error(`Model \"${model}\" not found in schema`);\n    }\n    return m;\n  };\n  const getModelName = (model) => {\n    const defaultModelKey = getDefaultModelName(model);\n    const usePlural = config && config.usePlural;\n    const useCustomModelName = schema && schema[defaultModelKey] && schema[defaultModelKey].modelName !== model;\n    if (useCustomModelName) {\n      return usePlural ? `${schema[defaultModelKey].modelName}s` : schema[defaultModelKey].modelName;\n    }\n    return usePlural ? `${model}s` : model;\n  };\n  function getFieldName({\n    model: model_name,\n    field: field_name\n  }) {\n    const model = getDefaultModelName(model_name);\n    const field = getDefaultFieldName({ model, field: field_name });\n    return schema[model]?.fields[field]?.fieldName || field;\n  }\n  const debugLog = (...args) => {\n    if (config.debugLogs === true || typeof config.debugLogs === \"object\") {\n      if (typeof config.debugLogs === \"object\" && \"isRunningAdapterTests\" in config.debugLogs) {\n        if (config.debugLogs.isRunningAdapterTests) {\n          args.shift();\n          debugLogs.push({ instance: uniqueAdapterFactoryInstanceId, args });\n        }\n        return;\n      }\n      if (typeof config.debugLogs === \"object\" && config.debugLogs.logCondition && !config.debugLogs.logCondition?.()) {\n        return;\n      }\n      if (typeof args[0] === \"object\" && \"method\" in args[0]) {\n        const method = args.shift().method;\n        if (typeof config.debugLogs === \"object\") {\n          if (method === \"create\" && !config.debugLogs.create) {\n            return;\n          } else if (method === \"update\" && !config.debugLogs.update) {\n            return;\n          } else if (method === \"updateMany\" && !config.debugLogs.updateMany) {\n            return;\n          } else if (method === \"findOne\" && !config.debugLogs.findOne) {\n            return;\n          } else if (method === \"findMany\" && !config.debugLogs.findMany) {\n            return;\n          } else if (method === \"delete\" && !config.debugLogs.delete) {\n            return;\n          } else if (method === \"deleteMany\" && !config.debugLogs.deleteMany) {\n            return;\n          } else if (method === \"count\" && !config.debugLogs.count) {\n            return;\n          }\n        }\n        _better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_8__.a.info(`[${config.adapterName}]`, ...args);\n      } else {\n        _better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_8__.a.info(`[${config.adapterName}]`, ...args);\n      }\n    }\n  };\n  const idField = ({\n    customModelName,\n    forceAllowId\n  }) => {\n    const shouldGenerateId = !config.disableIdGeneration && !options.advanced?.database?.useNumberId && !forceAllowId;\n    const model = getDefaultModelName(customModelName ?? \"id\");\n    return {\n      type: options.advanced?.database?.useNumberId ? \"number\" : \"string\",\n      required: shouldGenerateId ? true : false,\n      ...shouldGenerateId ? {\n        defaultValue() {\n          if (config.disableIdGeneration) return void 0;\n          const useNumberId = options.advanced?.database?.useNumberId;\n          let generateId$1 = options.advanced?.database?.generateId;\n          if (options.advanced?.generateId !== void 0) {\n            _better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_8__.a.warn(\n              \"Your Better Auth config includes advanced.generateId which is deprecated. Please use advanced.database.generateId instead. This will be removed in future releases.\"\n            );\n            generateId$1 = options.advanced?.generateId;\n          }\n          if (generateId$1 === false || useNumberId) return void 0;\n          if (generateId$1) {\n            return generateId$1({\n              model\n            });\n          }\n          if (config.customIdGenerator) {\n            return config.customIdGenerator({ model });\n          }\n          return (0,_better_auth_BUPPRXfK_mjs__WEBPACK_IMPORTED_MODULE_2__.g)();\n        }\n      } : {}\n    };\n  };\n  const getFieldAttributes = ({\n    model,\n    field\n  }) => {\n    const defaultModelName = getDefaultModelName(model);\n    const defaultFieldName = getDefaultFieldName({\n      field,\n      model: defaultModelName\n    });\n    const fields = schema[defaultModelName].fields;\n    fields.id = idField({ customModelName: defaultModelName });\n    return fields[defaultFieldName];\n  };\n  const transformInput = async (data, defaultModelName, action, forceAllowId) => {\n    const transformedData = {};\n    const fields = schema[defaultModelName].fields;\n    const newMappedKeys = config.mapKeysTransformInput ?? {};\n    if (!config.disableIdGeneration && !options.advanced?.database?.useNumberId) {\n      fields.id = idField({\n        customModelName: defaultModelName,\n        forceAllowId: forceAllowId && \"id\" in data\n      });\n    }\n    for (const field in fields) {\n      const value = data[field];\n      const fieldAttributes = fields[field];\n      let newFieldName = newMappedKeys[field] || fields[field].fieldName || field;\n      if (value === void 0 && (fieldAttributes.defaultValue === void 0 && !fieldAttributes.transform?.input && !(action === \"update\" && fieldAttributes.onUpdate) || action === \"update\" && !fieldAttributes.onUpdate)) {\n        continue;\n      }\n      let newValue = withApplyDefault(value, fieldAttributes, action);\n      if (fieldAttributes.transform?.input) {\n        newValue = await fieldAttributes.transform.input(newValue);\n      }\n      if (fieldAttributes.references?.field === \"id\" && options.advanced?.database?.useNumberId) {\n        if (Array.isArray(newValue)) {\n          newValue = newValue.map((x) => x !== null ? Number(x) : null);\n        } else {\n          newValue = newValue !== null ? Number(newValue) : null;\n        }\n      } else if (config.supportsJSON === false && typeof newValue === \"object\" && fieldAttributes.type === \"json\") {\n        newValue = JSON.stringify(newValue);\n      } else if (config.supportsDates === false && newValue instanceof Date && fieldAttributes.type === \"date\") {\n        newValue = newValue.toISOString();\n      } else if (config.supportsBooleans === false && typeof newValue === \"boolean\") {\n        newValue = newValue ? 1 : 0;\n      }\n      if (config.customTransformInput) {\n        newValue = config.customTransformInput({\n          data: newValue,\n          action,\n          field: newFieldName,\n          fieldAttributes,\n          model: defaultModelName,\n          schema,\n          options\n        });\n      }\n      if (newValue !== void 0) {\n        transformedData[newFieldName] = newValue;\n      }\n    }\n    return transformedData;\n  };\n  const transformOutput = async (data, unsafe_model, select = []) => {\n    if (!data) return null;\n    const newMappedKeys = config.mapKeysTransformOutput ?? {};\n    const transformedData = {};\n    const tableSchema = schema[unsafe_model].fields;\n    const idKey = Object.entries(newMappedKeys).find(\n      ([_, v]) => v === \"id\"\n    )?.[0];\n    tableSchema[idKey ?? \"id\"] = {\n      type: options.advanced?.database?.useNumberId ? \"number\" : \"string\"\n    };\n    for (const key in tableSchema) {\n      if (select.length && !select.includes(key)) {\n        continue;\n      }\n      const field = tableSchema[key];\n      if (field) {\n        const originalKey = field.fieldName || key;\n        let newValue = data[Object.entries(newMappedKeys).find(\n          ([_, v]) => v === originalKey\n        )?.[0] || originalKey];\n        if (field.transform?.output) {\n          newValue = await field.transform.output(newValue);\n        }\n        let newFieldName = newMappedKeys[key] || key;\n        if (originalKey === \"id\" || field.references?.field === \"id\") {\n          if (typeof newValue !== \"undefined\" && newValue !== null)\n            newValue = String(newValue);\n        } else if (config.supportsJSON === false && typeof newValue === \"string\" && field.type === \"json\") {\n          newValue = (0,_better_auth_BTrSrKsi_mjs__WEBPACK_IMPORTED_MODULE_0__.s)(newValue);\n        } else if (config.supportsDates === false && typeof newValue === \"string\" && field.type === \"date\") {\n          newValue = new Date(newValue);\n        } else if (config.supportsBooleans === false && typeof newValue === \"number\" && field.type === \"boolean\") {\n          newValue = newValue === 1;\n        }\n        if (config.customTransformOutput) {\n          newValue = config.customTransformOutput({\n            data: newValue,\n            field: newFieldName,\n            fieldAttributes: field,\n            select,\n            model: unsafe_model,\n            schema,\n            options\n          });\n        }\n        transformedData[newFieldName] = newValue;\n      }\n    }\n    return transformedData;\n  };\n  const transformWhereClause = ({\n    model,\n    where\n  }) => {\n    if (!where) return void 0;\n    const newMappedKeys = config.mapKeysTransformInput ?? {};\n    return where.map((w) => {\n      const {\n        field: unsafe_field,\n        value,\n        operator = \"eq\",\n        connector = \"AND\"\n      } = w;\n      if (operator === \"in\") {\n        if (!Array.isArray(value)) {\n          throw new Error(\"Value must be an array\");\n        }\n      }\n      const defaultModelName = getDefaultModelName(model);\n      const defaultFieldName = getDefaultFieldName({\n        field: unsafe_field,\n        model\n      });\n      const fieldName = newMappedKeys[defaultFieldName] || getFieldName({\n        field: defaultFieldName,\n        model: defaultModelName\n      });\n      const fieldAttr = getFieldAttributes({\n        field: defaultFieldName,\n        model: defaultModelName\n      });\n      if (defaultFieldName === \"id\" || fieldAttr.references?.field === \"id\") {\n        if (options.advanced?.database?.useNumberId) {\n          if (Array.isArray(value)) {\n            return {\n              operator,\n              connector,\n              field: fieldName,\n              value: value.map(Number)\n            };\n          }\n          return {\n            operator,\n            connector,\n            field: fieldName,\n            value: Number(value)\n          };\n        }\n      }\n      return {\n        operator,\n        connector,\n        field: fieldName,\n        value\n      };\n    });\n  };\n  const adapterInstance = customAdapter({\n    options,\n    schema,\n    debugLog,\n    getFieldName,\n    getModelName,\n    getDefaultModelName,\n    getDefaultFieldName,\n    getFieldAttributes,\n    transformInput,\n    transformOutput,\n    transformWhereClause\n  });\n  let lazyLoadTransaction = null;\n  const adapter = {\n    transaction: async (cb) => {\n      if (!lazyLoadTransaction) {\n        if (!config.transaction) {\n          if (typeof config.debugLogs === \"object\" && \"isRunningAdapterTests\" in config.debugLogs && config.debugLogs.isRunningAdapterTests) ; else {\n            _better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_8__.a.warn(\n              `[${config.adapterName}] - Transactions are not supported. Executing operations sequentially.`\n            );\n          }\n          lazyLoadTransaction = createAsIsTransaction(adapter);\n        } else {\n          _better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_8__.a.debug(\n            `[${config.adapterName}] - Using provided transaction implementation.`\n          );\n          lazyLoadTransaction = config.transaction;\n        }\n      }\n      return lazyLoadTransaction(cb);\n    },\n    create: async ({\n      data: unsafeData,\n      model: unsafeModel,\n      select,\n      forceAllowId = false\n    }) => {\n      transactionId++;\n      let thisTransactionId = transactionId;\n      const model = getModelName(unsafeModel);\n      unsafeModel = getDefaultModelName(unsafeModel);\n      if (\"id\" in unsafeData && !forceAllowId) {\n        _better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_8__.a.warn(\n          `[${config.adapterName}] - You are trying to create a record with an id. This is not allowed as we handle id generation for you, unless you pass in the \\`forceAllowId\\` parameter. The id will be ignored.`\n        );\n        const err = new Error();\n        const stack = err.stack?.split(\"\\n\").filter((_, i) => i !== 1).join(\"\\n\").replace(\"Error:\", \"Create method with `id` being called at:\");\n        console.log(stack);\n        unsafeData.id = void 0;\n      }\n      debugLog(\n        { method: \"create\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(1, 4)}`,\n        `${formatMethod(\"create\")} ${formatAction(\"Unsafe Input\")}:`,\n        { model, data: unsafeData }\n      );\n      let data = unsafeData;\n      if (!config.disableTransformInput) {\n        data = await transformInput(\n          unsafeData,\n          unsafeModel,\n          \"create\",\n          forceAllowId\n        );\n      }\n      debugLog(\n        { method: \"create\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(2, 4)}`,\n        `${formatMethod(\"create\")} ${formatAction(\"Parsed Input\")}:`,\n        { model, data }\n      );\n      const res = await adapterInstance.create({ data, model });\n      debugLog(\n        { method: \"create\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(3, 4)}`,\n        `${formatMethod(\"create\")} ${formatAction(\"DB Result\")}:`,\n        { model, res }\n      );\n      let transformed = res;\n      if (!config.disableTransformOutput) {\n        transformed = await transformOutput(res, unsafeModel, select);\n      }\n      debugLog(\n        { method: \"create\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(4, 4)}`,\n        `${formatMethod(\"create\")} ${formatAction(\"Parsed Result\")}:`,\n        { model, data: transformed }\n      );\n      return transformed;\n    },\n    update: async ({\n      model: unsafeModel,\n      where: unsafeWhere,\n      update: unsafeData\n    }) => {\n      transactionId++;\n      let thisTransactionId = transactionId;\n      unsafeModel = getDefaultModelName(unsafeModel);\n      const model = getModelName(unsafeModel);\n      const where = transformWhereClause({\n        model: unsafeModel,\n        where: unsafeWhere\n      });\n      debugLog(\n        { method: \"update\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(1, 4)}`,\n        `${formatMethod(\"update\")} ${formatAction(\"Unsafe Input\")}:`,\n        { model, data: unsafeData }\n      );\n      let data = unsafeData;\n      if (!config.disableTransformInput) {\n        data = await transformInput(unsafeData, unsafeModel, \"update\");\n      }\n      debugLog(\n        { method: \"update\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(2, 4)}`,\n        `${formatMethod(\"update\")} ${formatAction(\"Parsed Input\")}:`,\n        { model, data }\n      );\n      const res = await adapterInstance.update({\n        model,\n        where,\n        update: data\n      });\n      debugLog(\n        { method: \"update\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(3, 4)}`,\n        `${formatMethod(\"update\")} ${formatAction(\"DB Result\")}:`,\n        { model, data: res }\n      );\n      let transformed = res;\n      if (!config.disableTransformOutput) {\n        transformed = await transformOutput(res, unsafeModel);\n      }\n      debugLog(\n        { method: \"update\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(4, 4)}`,\n        `${formatMethod(\"update\")} ${formatAction(\"Parsed Result\")}:`,\n        { model, data: transformed }\n      );\n      return transformed;\n    },\n    updateMany: async ({\n      model: unsafeModel,\n      where: unsafeWhere,\n      update: unsafeData\n    }) => {\n      transactionId++;\n      let thisTransactionId = transactionId;\n      const model = getModelName(unsafeModel);\n      const where = transformWhereClause({\n        model: unsafeModel,\n        where: unsafeWhere\n      });\n      unsafeModel = getDefaultModelName(unsafeModel);\n      debugLog(\n        { method: \"updateMany\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(1, 4)}`,\n        `${formatMethod(\"updateMany\")} ${formatAction(\"Unsafe Input\")}:`,\n        { model, data: unsafeData }\n      );\n      let data = unsafeData;\n      if (!config.disableTransformInput) {\n        data = await transformInput(unsafeData, unsafeModel, \"update\");\n      }\n      debugLog(\n        { method: \"updateMany\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(2, 4)}`,\n        `${formatMethod(\"updateMany\")} ${formatAction(\"Parsed Input\")}:`,\n        { model, data }\n      );\n      const updatedCount = await adapterInstance.updateMany({\n        model,\n        where,\n        update: data\n      });\n      debugLog(\n        { method: \"updateMany\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(3, 4)}`,\n        `${formatMethod(\"updateMany\")} ${formatAction(\"DB Result\")}:`,\n        { model, data: updatedCount }\n      );\n      debugLog(\n        { method: \"updateMany\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(4, 4)}`,\n        `${formatMethod(\"updateMany\")} ${formatAction(\"Parsed Result\")}:`,\n        { model, data: updatedCount }\n      );\n      return updatedCount;\n    },\n    findOne: async ({\n      model: unsafeModel,\n      where: unsafeWhere,\n      select\n    }) => {\n      transactionId++;\n      let thisTransactionId = transactionId;\n      const model = getModelName(unsafeModel);\n      const where = transformWhereClause({\n        model: unsafeModel,\n        where: unsafeWhere\n      });\n      unsafeModel = getDefaultModelName(unsafeModel);\n      debugLog(\n        { method: \"findOne\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(1, 3)}`,\n        `${formatMethod(\"findOne\")}:`,\n        { model, where, select }\n      );\n      const res = await adapterInstance.findOne({\n        model,\n        where,\n        select\n      });\n      debugLog(\n        { method: \"findOne\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(2, 3)}`,\n        `${formatMethod(\"findOne\")} ${formatAction(\"DB Result\")}:`,\n        { model, data: res }\n      );\n      let transformed = res;\n      if (!config.disableTransformOutput) {\n        transformed = await transformOutput(res, unsafeModel, select);\n      }\n      debugLog(\n        { method: \"findOne\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(3, 3)}`,\n        `${formatMethod(\"findOne\")} ${formatAction(\"Parsed Result\")}:`,\n        { model, data: transformed }\n      );\n      return transformed;\n    },\n    findMany: async ({\n      model: unsafeModel,\n      where: unsafeWhere,\n      limit: unsafeLimit,\n      sortBy,\n      offset\n    }) => {\n      transactionId++;\n      let thisTransactionId = transactionId;\n      const limit = unsafeLimit ?? options.advanced?.database?.defaultFindManyLimit ?? 100;\n      const model = getModelName(unsafeModel);\n      const where = transformWhereClause({\n        model: unsafeModel,\n        where: unsafeWhere\n      });\n      unsafeModel = getDefaultModelName(unsafeModel);\n      debugLog(\n        { method: \"findMany\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(1, 3)}`,\n        `${formatMethod(\"findMany\")}:`,\n        { model, where, limit, sortBy, offset }\n      );\n      const res = await adapterInstance.findMany({\n        model,\n        where,\n        limit,\n        sortBy,\n        offset\n      });\n      debugLog(\n        { method: \"findMany\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(2, 3)}`,\n        `${formatMethod(\"findMany\")} ${formatAction(\"DB Result\")}:`,\n        { model, data: res }\n      );\n      let transformed = res;\n      if (!config.disableTransformOutput) {\n        transformed = await Promise.all(\n          res.map(async (r) => await transformOutput(r, unsafeModel))\n        );\n      }\n      debugLog(\n        { method: \"findMany\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(3, 3)}`,\n        `${formatMethod(\"findMany\")} ${formatAction(\"Parsed Result\")}:`,\n        { model, data: transformed }\n      );\n      return transformed;\n    },\n    delete: async ({\n      model: unsafeModel,\n      where: unsafeWhere\n    }) => {\n      transactionId++;\n      let thisTransactionId = transactionId;\n      const model = getModelName(unsafeModel);\n      const where = transformWhereClause({\n        model: unsafeModel,\n        where: unsafeWhere\n      });\n      unsafeModel = getDefaultModelName(unsafeModel);\n      debugLog(\n        { method: \"delete\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(1, 2)}`,\n        `${formatMethod(\"delete\")}:`,\n        { model, where }\n      );\n      await adapterInstance.delete({\n        model,\n        where\n      });\n      debugLog(\n        { method: \"delete\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(2, 2)}`,\n        `${formatMethod(\"delete\")} ${formatAction(\"DB Result\")}:`,\n        { model }\n      );\n    },\n    deleteMany: async ({\n      model: unsafeModel,\n      where: unsafeWhere\n    }) => {\n      transactionId++;\n      let thisTransactionId = transactionId;\n      const model = getModelName(unsafeModel);\n      const where = transformWhereClause({\n        model: unsafeModel,\n        where: unsafeWhere\n      });\n      unsafeModel = getDefaultModelName(unsafeModel);\n      debugLog(\n        { method: \"deleteMany\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(1, 2)}`,\n        `${formatMethod(\"deleteMany\")} ${formatAction(\"DeleteMany\")}:`,\n        { model, where }\n      );\n      const res = await adapterInstance.deleteMany({\n        model,\n        where\n      });\n      debugLog(\n        { method: \"deleteMany\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(2, 2)}`,\n        `${formatMethod(\"deleteMany\")} ${formatAction(\"DB Result\")}:`,\n        { model, data: res }\n      );\n      return res;\n    },\n    count: async ({\n      model: unsafeModel,\n      where: unsafeWhere\n    }) => {\n      transactionId++;\n      let thisTransactionId = transactionId;\n      const model = getModelName(unsafeModel);\n      const where = transformWhereClause({\n        model: unsafeModel,\n        where: unsafeWhere\n      });\n      unsafeModel = getDefaultModelName(unsafeModel);\n      debugLog(\n        { method: \"count\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(1, 2)}`,\n        `${formatMethod(\"count\")}:`,\n        {\n          model,\n          where\n        }\n      );\n      const res = await adapterInstance.count({\n        model,\n        where\n      });\n      debugLog(\n        { method: \"count\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(2, 2)}`,\n        `${formatMethod(\"count\")}:`,\n        {\n          model,\n          data: res\n        }\n      );\n      return res;\n    },\n    createSchema: adapterInstance.createSchema ? async (_, file) => {\n      const tables = (0,_better_auth_DhziC0ap_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(options);\n      if (options.secondaryStorage && !options.session?.storeSessionInDatabase) {\n        delete tables.session;\n      }\n      if (options.rateLimit && options.rateLimit.storage === \"database\" && // rate-limit will default to enabled in production,\n      // and given storage is database, it will try to use the rate-limit table,\n      // so we should make sure to generate rate-limit table schema\n      (typeof options.rateLimit.enabled === \"undefined\" || // and of course if they forcefully set to true, then they want rate-limit,\n      // thus we should also generate rate-limit table schema\n      options.rateLimit.enabled === true)) {\n        tables.ratelimit = {\n          modelName: options.rateLimit.modelName ?? \"ratelimit\",\n          fields: {\n            key: {\n              type: \"string\",\n              unique: true,\n              required: true,\n              fieldName: options.rateLimit.fields?.key ?? \"key\"\n            },\n            count: {\n              type: \"number\",\n              required: true,\n              fieldName: options.rateLimit.fields?.count ?? \"count\"\n            },\n            lastRequest: {\n              type: \"number\",\n              required: true,\n              bigint: true,\n              defaultValue: () => Date.now(),\n              fieldName: options.rateLimit.fields?.lastRequest ?? \"lastRequest\"\n            }\n          }\n        };\n      }\n      return adapterInstance.createSchema({ file, tables });\n    } : void 0,\n    options: {\n      adapterConfig: config,\n      ...adapterInstance.options ?? {}\n    },\n    id: config.adapterId,\n    // Secretly export values ONLY if this adapter has enabled adapter-test-debug-logs.\n    // This would then be used during our adapter-tests to help print debug logs if a test fails.\n    //@ts-expect-error - ^^\n    ...config.debugLogs?.isRunningAdapterTests ? {\n      adapterTestDebugLogs: {\n        resetDebugLogs() {\n          debugLogs = debugLogs.filter(\n            (log) => log.instance !== uniqueAdapterFactoryInstanceId\n          );\n        },\n        printDebugLogs() {\n          const separator = `\\u2500`.repeat(80);\n          const logs = debugLogs.filter(\n            (log2) => log2.instance === uniqueAdapterFactoryInstanceId\n          );\n          if (logs.length === 0) {\n            return;\n          }\n          let log = logs.reverse().map((log2) => {\n            log2.args[0] = `\n${log2.args[0]}`;\n            return [...log2.args, \"\\n\"];\n          }).reduce(\n            (prev, curr) => {\n              return [...curr, ...prev];\n            },\n            [`\n${separator}`]\n          );\n          console.log(...log);\n        }\n      }\n    } : {}\n  };\n  return adapter;\n};\nfunction formatTransactionId(transactionId2) {\n  return `${_better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_8__.b.fg.magenta}#${transactionId2}${_better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_8__.b.reset}`;\n}\nfunction formatStep(step, total) {\n  return `${_better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_8__.b.bg.black}${_better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_8__.b.fg.yellow}[${step}/${total}]${_better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_8__.b.reset}`;\n}\nfunction formatMethod(method) {\n  return `${_better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_8__.b.bright}${method}${_better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_8__.b.reset}`;\n}\nfunction formatAction(action) {\n  return `${_better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_8__.b.dim}(${action})${_better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_8__.b.reset}`;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.BvvYEWCP.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.C3-_8m-g.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.C3-_8m-g.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $: () => (/* binding */ getCognitoPublicKey),\n/* harmony export */   A: () => (/* binding */ deleteUserCallback),\n/* harmony export */   B: () => (/* binding */ listUserAccounts),\n/* harmony export */   C: () => (/* binding */ linkSocialAccount),\n/* harmony export */   D: () => (/* binding */ requestPasswordResetCallback),\n/* harmony export */   E: () => (/* binding */ requestPasswordReset),\n/* harmony export */   F: () => (/* binding */ forgetPasswordCallback),\n/* harmony export */   G: () => (/* binding */ deleteUser),\n/* harmony export */   H: () => (/* binding */ HIDE_METADATA),\n/* harmony export */   I: () => (/* binding */ setPassword),\n/* harmony export */   J: () => (/* binding */ changePassword),\n/* harmony export */   K: () => (/* binding */ changeEmail),\n/* harmony export */   L: () => (/* binding */ sendVerificationEmail),\n/* harmony export */   M: () => (/* binding */ verifyEmail),\n/* harmony export */   N: () => (/* binding */ resetPassword),\n/* harmony export */   O: () => (/* binding */ forgetPassword),\n/* harmony export */   P: () => (/* binding */ signInEmail),\n/* harmony export */   Q: () => (/* binding */ signOut),\n/* harmony export */   R: () => (/* binding */ callbackOAuth),\n/* harmony export */   S: () => (/* binding */ signInSocial),\n/* harmony export */   T: () => (/* binding */ sendVerificationEmailFn),\n/* harmony export */   U: () => (/* binding */ socialProviders),\n/* harmony export */   V: () => (/* binding */ socialProviderList),\n/* harmony export */   W: () => (/* binding */ SocialProviderListEnum),\n/* harmony export */   X: () => (/* binding */ apple),\n/* harmony export */   Y: () => (/* binding */ getApplePublicKey),\n/* harmony export */   Z: () => (/* binding */ atlassian),\n/* harmony export */   _: () => (/* binding */ cognito),\n/* harmony export */   a: () => (/* binding */ createAuthorizationCodeRequest),\n/* harmony export */   a0: () => (/* binding */ discord),\n/* harmony export */   a1: () => (/* binding */ dropbox),\n/* harmony export */   a2: () => (/* binding */ facebook),\n/* harmony export */   a3: () => (/* binding */ figma),\n/* harmony export */   a4: () => (/* binding */ github),\n/* harmony export */   a5: () => (/* binding */ linear),\n/* harmony export */   a6: () => (/* binding */ linkedin),\n/* harmony export */   a7: () => (/* binding */ gitlab),\n/* harmony export */   a8: () => (/* binding */ google),\n/* harmony export */   a9: () => (/* binding */ kick),\n/* harmony export */   aa: () => (/* binding */ microsoft),\n/* harmony export */   ab: () => (/* binding */ notion),\n/* harmony export */   ac: () => (/* binding */ reddit),\n/* harmony export */   ad: () => (/* binding */ roblox),\n/* harmony export */   ae: () => (/* binding */ salesforce),\n/* harmony export */   af: () => (/* binding */ spotify),\n/* harmony export */   ag: () => (/* binding */ tiktok),\n/* harmony export */   ah: () => (/* binding */ twitch),\n/* harmony export */   ai: () => (/* binding */ twitter),\n/* harmony export */   aj: () => (/* binding */ vk),\n/* harmony export */   ak: () => (/* binding */ zoom),\n/* harmony export */   al: () => (/* binding */ huggingface),\n/* harmony export */   am: () => (/* binding */ slack),\n/* harmony export */   an: () => (/* binding */ kakao),\n/* harmony export */   ao: () => (/* binding */ naver),\n/* harmony export */   ap: () => (/* binding */ line),\n/* harmony export */   aq: () => (/* binding */ paypal),\n/* harmony export */   b: () => (/* binding */ validateToken),\n/* harmony export */   c: () => (/* binding */ createAuthorizationURL),\n/* harmony export */   d: () => (/* binding */ createRefreshAccessTokenRequest),\n/* harmony export */   e: () => (/* binding */ generateCodeChallenge),\n/* harmony export */   f: () => (/* binding */ getOAuth2Tokens),\n/* harmony export */   g: () => (/* binding */ generateState),\n/* harmony export */   h: () => (/* binding */ encodeOAuthParameter),\n/* harmony export */   i: () => (/* binding */ decryptOAuthToken),\n/* harmony export */   j: () => (/* binding */ handleOAuthUserInfo),\n/* harmony export */   k: () => (/* binding */ createEmailVerificationToken),\n/* harmony export */   l: () => (/* binding */ originCheckMiddleware),\n/* harmony export */   m: () => (/* binding */ error),\n/* harmony export */   n: () => (/* binding */ ok),\n/* harmony export */   o: () => (/* binding */ originCheck),\n/* harmony export */   p: () => (/* binding */ parseState),\n/* harmony export */   q: () => (/* binding */ accountInfo),\n/* harmony export */   r: () => (/* binding */ refreshAccessToken),\n/* harmony export */   s: () => (/* binding */ setTokenUtil),\n/* harmony export */   t: () => (/* binding */ toAuthEndpoints),\n/* harmony export */   u: () => (/* binding */ updateUser),\n/* harmony export */   v: () => (/* binding */ validateAuthorizationCode),\n/* harmony export */   w: () => (/* binding */ wildcardMatch),\n/* harmony export */   x: () => (/* binding */ getAccessToken),\n/* harmony export */   y: () => (/* binding */ refreshToken),\n/* harmony export */   z: () => (/* binding */ unlinkAccount)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/v4/classic/external.js\");\n/* harmony import */ var _better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./better-auth.C5vDERgF.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.C5vDERgF.mjs\");\n/* harmony import */ var better_call__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! better-call */ \"(rsc)/./node_modules/better-call/dist/index.js\");\n/* harmony import */ var _better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./better-auth.CW6D9eSx.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.CW6D9eSx.mjs\");\n/* harmony import */ var _better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @better-auth/utils/hash */ \"(rsc)/./node_modules/@better-auth/utils/dist/hash.mjs\");\n/* harmony import */ var _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @better-auth/utils/base64 */ \"(rsc)/./node_modules/@better-auth/utils/dist/base64.mjs\");\n/* harmony import */ var _crypto_index_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../crypto/index.mjs */ \"(rsc)/./node_modules/better-auth/dist/crypto/index.mjs\");\n/* harmony import */ var _better_fetch_fetch__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @better-fetch/fetch */ \"(rsc)/./node_modules/@better-fetch/fetch/dist/index.js\");\n/* harmony import */ var jose__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! jose */ \"(rsc)/./node_modules/jose/dist/webapi/jwt/verify.js\");\n/* harmony import */ var jose__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! jose */ \"(rsc)/./node_modules/jose/dist/webapi/util/decode_protected_header.js\");\n/* harmony import */ var jose__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! jose */ \"(rsc)/./node_modules/jose/dist/webapi/util/decode_jwt.js\");\n/* harmony import */ var jose__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! jose */ \"(rsc)/./node_modules/jose/dist/webapi/key/import.js\");\n/* harmony import */ var jose__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! jose */ \"(rsc)/./node_modules/jose/dist/webapi/jwks/remote.js\");\n/* harmony import */ var _better_auth_utils_hex__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @better-auth/utils/hex */ \"(rsc)/./node_modules/@better-auth/utils/dist/hex.mjs\");\n/* harmony import */ var _better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./better-auth.B4Qoxdgc.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs\");\n/* harmony import */ var _better_auth_BRFtaovt_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./better-auth.BRFtaovt.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.BRFtaovt.mjs\");\n/* harmony import */ var _better_auth_DiMXeqeq_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./better-auth.DiMXeqeq.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DiMXeqeq.mjs\");\n/* harmony import */ var jose_errors__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! jose/errors */ \"(rsc)/./node_modules/jose/dist/webapi/util/errors.js\");\n/* harmony import */ var _better_auth_utils_random__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @better-auth/utils/random */ \"(rsc)/./node_modules/@better-auth/utils/dist/random.mjs\");\n/* harmony import */ var _better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./better-auth.DgGir396.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DgGir396.mjs\");\n/* harmony import */ var _better_auth_BTrSrKsi_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./better-auth.BTrSrKsi.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.BTrSrKsi.mjs\");\n/* harmony import */ var _better_auth_BUPPRXfK_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./better-auth.BUPPRXfK.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.BUPPRXfK.mjs\");\n/* harmony import */ var _better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./better-auth.CiuwFiHM.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.CiuwFiHM.mjs\");\n/* harmony import */ var _better_auth_utils_hmac__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @better-auth/utils/hmac */ \"(rsc)/./node_modules/@better-auth/utils/dist/hmac.mjs\");\n/* harmony import */ var _better_auth_utils_binary__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @better-auth/utils/binary */ \"(rsc)/./node_modules/@better-auth/utils/dist/binary.mjs\");\n/* harmony import */ var _better_auth_core_db__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @better-auth/core/db */ \"(rsc)/./node_modules/@better-auth/core/dist/db/index.mjs\");\n/* harmony import */ var defu__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! defu */ \"(rsc)/./node_modules/defu/dist/defu.mjs\");\n/* harmony import */ var _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./better-auth.DdzSJf-n.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction escapeRegExpChar(char) {\n  if (char === \"-\" || char === \"^\" || char === \"$\" || char === \"+\" || char === \".\" || char === \"(\" || char === \")\" || char === \"|\" || char === \"[\" || char === \"]\" || char === \"{\" || char === \"}\" || char === \"*\" || char === \"?\" || char === \"\\\\\") {\n    return `\\\\${char}`;\n  } else {\n    return char;\n  }\n}\nfunction escapeRegExpString(str) {\n  let result = \"\";\n  for (let i = 0; i < str.length; i++) {\n    result += escapeRegExpChar(str[i]);\n  }\n  return result;\n}\nfunction transform(pattern, separator = true) {\n  if (Array.isArray(pattern)) {\n    let regExpPatterns = pattern.map((p) => `^${transform(p, separator)}$`);\n    return `(?:${regExpPatterns.join(\"|\")})`;\n  }\n  let separatorSplitter = \"\";\n  let separatorMatcher = \"\";\n  let wildcard = \".\";\n  if (separator === true) {\n    separatorSplitter = \"/\";\n    separatorMatcher = \"[/\\\\\\\\]\";\n    wildcard = \"[^/\\\\\\\\]\";\n  } else if (separator) {\n    separatorSplitter = separator;\n    separatorMatcher = escapeRegExpString(separatorSplitter);\n    if (separatorMatcher.length > 1) {\n      separatorMatcher = `(?:${separatorMatcher})`;\n      wildcard = `((?!${separatorMatcher}).)`;\n    } else {\n      wildcard = `[^${separatorMatcher}]`;\n    }\n  }\n  let requiredSeparator = separator ? `${separatorMatcher}+?` : \"\";\n  let optionalSeparator = separator ? `${separatorMatcher}*?` : \"\";\n  let segments = separator ? pattern.split(separatorSplitter) : [pattern];\n  let result = \"\";\n  for (let s = 0; s < segments.length; s++) {\n    let segment = segments[s];\n    let nextSegment = segments[s + 1];\n    let currentSeparator = \"\";\n    if (!segment && s > 0) {\n      continue;\n    }\n    if (separator) {\n      if (s === segments.length - 1) {\n        currentSeparator = optionalSeparator;\n      } else if (nextSegment !== \"**\") {\n        currentSeparator = requiredSeparator;\n      } else {\n        currentSeparator = \"\";\n      }\n    }\n    if (separator && segment === \"**\") {\n      if (currentSeparator) {\n        result += s === 0 ? \"\" : currentSeparator;\n        result += `(?:${wildcard}*?${currentSeparator})*?`;\n      }\n      continue;\n    }\n    for (let c = 0; c < segment.length; c++) {\n      let char = segment[c];\n      if (char === \"\\\\\") {\n        if (c < segment.length - 1) {\n          result += escapeRegExpChar(segment[c + 1]);\n          c++;\n        }\n      } else if (char === \"?\") {\n        result += wildcard;\n      } else if (char === \"*\") {\n        result += `${wildcard}*?`;\n      } else {\n        result += escapeRegExpChar(char);\n      }\n    }\n    result += currentSeparator;\n  }\n  return result;\n}\nfunction isMatch(regexp, sample) {\n  if (typeof sample !== \"string\") {\n    throw new TypeError(`Sample must be a string, but ${typeof sample} given`);\n  }\n  return regexp.test(sample);\n}\nfunction wildcardMatch(pattern, options) {\n  if (typeof pattern !== \"string\" && !Array.isArray(pattern)) {\n    throw new TypeError(\n      `The first argument must be a single pattern string or an array of patterns, but ${typeof pattern} given`\n    );\n  }\n  if (typeof options === \"string\" || typeof options === \"boolean\") {\n    options = { separator: options };\n  }\n  if (arguments.length === 2 && !(typeof options === \"undefined\" || typeof options === \"object\" && options !== null && !Array.isArray(options))) {\n    throw new TypeError(\n      `The second argument must be an options object or a string/boolean separator, but ${typeof options} given`\n    );\n  }\n  options = options || {};\n  if (options.separator === \"\\\\\") {\n    throw new Error(\n      \"\\\\ is not a valid separator because it is used for escaping. Try setting the separator to `true` instead\"\n    );\n  }\n  let regexpPattern = transform(pattern, options.separator);\n  let regexp = new RegExp(`^${regexpPattern}$`, options.flags);\n  let fn = isMatch.bind(null, regexp);\n  fn.options = options;\n  fn.pattern = pattern;\n  fn.regexp = regexp;\n  return fn;\n}\n\nconst originCheckMiddleware = (0,_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(async (ctx) => {\n  if (ctx.request?.method !== \"POST\" || !ctx.request) {\n    return;\n  }\n  const { body, query, context } = ctx;\n  const originHeader = ctx.headers?.get(\"origin\") || ctx.headers?.get(\"referer\") || \"\";\n  const callbackURL = body?.callbackURL || query?.callbackURL;\n  const redirectURL = body?.redirectTo;\n  const errorCallbackURL = body?.errorCallbackURL;\n  const newUserCallbackURL = body?.newUserCallbackURL;\n  const trustedOrigins = Array.isArray(context.options.trustedOrigins) ? context.trustedOrigins : [\n    ...context.trustedOrigins,\n    ...await context.options.trustedOrigins?.(ctx.request) || []\n  ];\n  const usesCookies = ctx.headers?.has(\"cookie\");\n  const matchesPattern = (url, pattern) => {\n    if (url.startsWith(\"/\")) {\n      return false;\n    }\n    if (pattern.includes(\"*\")) {\n      if (pattern.includes(\"://\")) {\n        return wildcardMatch(pattern)((0,_better_auth_BRFtaovt_mjs__WEBPACK_IMPORTED_MODULE_9__.g)(url) || url);\n      }\n      return wildcardMatch(pattern)((0,_better_auth_BRFtaovt_mjs__WEBPACK_IMPORTED_MODULE_9__.b)(url));\n    }\n    const protocol = (0,_better_auth_BRFtaovt_mjs__WEBPACK_IMPORTED_MODULE_9__.c)(url);\n    return protocol === \"http:\" || protocol === \"https:\" || !protocol ? pattern === (0,_better_auth_BRFtaovt_mjs__WEBPACK_IMPORTED_MODULE_9__.g)(url) : url.startsWith(pattern);\n  };\n  const validateURL = (url, label) => {\n    if (!url) {\n      return;\n    }\n    const isTrustedOrigin = trustedOrigins.some(\n      (origin) => matchesPattern(url, origin) || url?.startsWith(\"/\") && label !== \"origin\" && /^\\/(?!\\/|\\\\|%2f|%5c)[\\w\\-.\\+/@]*(?:\\?[\\w\\-.\\+/=&%@]*)?$/.test(url)\n    );\n    if (!isTrustedOrigin) {\n      ctx.context.logger.error(`Invalid ${label}: ${url}`);\n      ctx.context.logger.info(\n        `If it's a valid URL, please add ${url} to trustedOrigins in your auth config\n`,\n        `Current list of trustedOrigins: ${trustedOrigins}`\n      );\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"FORBIDDEN\", { message: `Invalid ${label}` });\n    }\n  };\n  if (usesCookies && !ctx.context.options.advanced?.disableCSRFCheck) {\n    validateURL(originHeader, \"origin\");\n  }\n  callbackURL && validateURL(callbackURL, \"callbackURL\");\n  redirectURL && validateURL(redirectURL, \"redirectURL\");\n  errorCallbackURL && validateURL(errorCallbackURL, \"errorCallbackURL\");\n  newUserCallbackURL && validateURL(newUserCallbackURL, \"newUserCallbackURL\");\n});\nconst originCheck = (getValue) => (0,_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(async (ctx) => {\n  if (!ctx.request) {\n    return;\n  }\n  const { context } = ctx;\n  const callbackURL = getValue(ctx);\n  const trustedOrigins = Array.isArray(\n    context.options.trustedOrigins\n  ) ? context.trustedOrigins : [\n    ...context.trustedOrigins,\n    ...await context.options.trustedOrigins?.(ctx.request) || []\n  ];\n  const matchesPattern = (url, pattern) => {\n    if (url.startsWith(\"/\")) {\n      return false;\n    }\n    if (pattern.includes(\"*\")) {\n      if (pattern.includes(\"://\")) {\n        return wildcardMatch(pattern)((0,_better_auth_BRFtaovt_mjs__WEBPACK_IMPORTED_MODULE_9__.g)(url) || url);\n      }\n      return wildcardMatch(pattern)((0,_better_auth_BRFtaovt_mjs__WEBPACK_IMPORTED_MODULE_9__.b)(url));\n    }\n    const protocol = (0,_better_auth_BRFtaovt_mjs__WEBPACK_IMPORTED_MODULE_9__.c)(url);\n    return protocol === \"http:\" || protocol === \"https:\" || !protocol ? pattern === (0,_better_auth_BRFtaovt_mjs__WEBPACK_IMPORTED_MODULE_9__.g)(url) : url.startsWith(pattern);\n  };\n  const validateURL = (url, label) => {\n    if (!url) {\n      return;\n    }\n    const isTrustedOrigin = trustedOrigins.some(\n      (origin) => matchesPattern(url, origin) || url?.startsWith(\"/\") && label !== \"origin\" && /^\\/(?!\\/|\\\\|%2f|%5c)[\\w\\-.\\+/@]*(?:\\?[\\w\\-.\\+/=&%@]*)?$/.test(\n        url\n      )\n    );\n    if (!isTrustedOrigin) {\n      ctx.context.logger.error(`Invalid ${label}: ${url}`);\n      ctx.context.logger.info(\n        `If it's a valid URL, please add ${url} to trustedOrigins in your auth config\n`,\n        `Current list of trustedOrigins: ${trustedOrigins}`\n      );\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"FORBIDDEN\", { message: `Invalid ${label}` });\n    }\n  };\n  const callbacks = Array.isArray(callbackURL) ? callbackURL : [callbackURL];\n  for (const url of callbacks) {\n    validateURL(url, \"callbackURL\");\n  }\n});\n\nasync function createEmailVerificationToken(secret, email, updateTo, expiresIn = 3600) {\n  const token = await (0,_crypto_index_mjs__WEBPACK_IMPORTED_MODULE_5__.signJWT)(\n    {\n      email: email.toLowerCase(),\n      updateTo\n    },\n    secret,\n    expiresIn\n  );\n  return token;\n}\nasync function sendVerificationEmailFn(ctx, user) {\n  if (!ctx.context.options.emailVerification?.sendVerificationEmail) {\n    ctx.context.logger.error(\"Verification email isn't enabled.\");\n    throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n      message: \"Verification email isn't enabled\"\n    });\n  }\n  const token = await createEmailVerificationToken(\n    ctx.context.secret,\n    user.email,\n    void 0,\n    ctx.context.options.emailVerification?.expiresIn\n  );\n  const url = `${ctx.context.baseURL}/verify-email?token=${token}&callbackURL=${ctx.body.callbackURL || \"/\"}`;\n  await ctx.context.options.emailVerification.sendVerificationEmail(\n    {\n      user,\n      url,\n      token\n    },\n    ctx.request\n  );\n}\nconst sendVerificationEmail = (0,_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.a)(\n  \"/send-verification-email\",\n  {\n    method: \"POST\",\n    body: zod__WEBPACK_IMPORTED_MODULE_21__.object({\n      email: zod__WEBPACK_IMPORTED_MODULE_21__.email().meta({\n        description: \"The email to send the verification email to\"\n      }),\n      callbackURL: zod__WEBPACK_IMPORTED_MODULE_21__.string().meta({\n        description: \"The URL to use for email verification callback\"\n      }).optional()\n    }),\n    metadata: {\n      openapi: {\n        description: \"Send a verification email to the user\",\n        requestBody: {\n          content: {\n            \"application/json\": {\n              schema: {\n                type: \"object\",\n                properties: {\n                  email: {\n                    type: \"string\",\n                    description: \"The email to send the verification email to\",\n                    example: \"user@example.com\"\n                  },\n                  callbackURL: {\n                    type: \"string\",\n                    description: \"The URL to use for email verification callback\",\n                    example: \"https://example.com/callback\",\n                    nullable: true\n                  }\n                },\n                required: [\"email\"]\n              }\n            }\n          }\n        },\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\",\n                      description: \"Indicates if the email was sent successfully\",\n                      example: true\n                    }\n                  }\n                }\n              }\n            }\n          },\n          \"400\": {\n            description: \"Bad Request\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    message: {\n                      type: \"string\",\n                      description: \"Error message\",\n                      example: \"Verification email isn't enabled\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    if (!ctx.context.options.emailVerification?.sendVerificationEmail) {\n      ctx.context.logger.error(\"Verification email isn't enabled.\");\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: \"Verification email isn't enabled\"\n      });\n    }\n    const { email } = ctx.body;\n    const session = await (0,_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(ctx);\n    if (!session) {\n      const user = await ctx.context.internalAdapter.findUserByEmail(email);\n      if (!user) {\n        return ctx.json({\n          status: true\n        });\n      }\n      await sendVerificationEmailFn(ctx, user.user);\n      return ctx.json({\n        status: true\n      });\n    }\n    if (session?.user.emailVerified) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: \"You can only send a verification email to an unverified email\"\n      });\n    }\n    if (session?.user.email !== email) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: \"You can only send a verification email to your own email\"\n      });\n    }\n    await sendVerificationEmailFn(ctx, session.user);\n    return ctx.json({\n      status: true\n    });\n  }\n);\nconst verifyEmail = (0,_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.a)(\n  \"/verify-email\",\n  {\n    method: \"GET\",\n    query: zod__WEBPACK_IMPORTED_MODULE_21__.object({\n      token: zod__WEBPACK_IMPORTED_MODULE_21__.string().meta({\n        description: \"The token to verify the email\"\n      }),\n      callbackURL: zod__WEBPACK_IMPORTED_MODULE_21__.string().meta({\n        description: \"The URL to redirect to after email verification\"\n      }).optional()\n    }),\n    use: [originCheck((ctx) => ctx.query.callbackURL)],\n    metadata: {\n      openapi: {\n        description: \"Verify the email of the user\",\n        parameters: [\n          {\n            name: \"token\",\n            in: \"query\",\n            description: \"The token to verify the email\",\n            required: true,\n            schema: {\n              type: \"string\"\n            }\n          },\n          {\n            name: \"callbackURL\",\n            in: \"query\",\n            description: \"The URL to redirect to after email verification\",\n            required: false,\n            schema: {\n              type: \"string\"\n            }\n          }\n        ],\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    user: {\n                      type: \"object\",\n                      properties: {\n                        id: {\n                          type: \"string\",\n                          description: \"User ID\"\n                        },\n                        email: {\n                          type: \"string\",\n                          description: \"User email\"\n                        },\n                        name: {\n                          type: \"string\",\n                          description: \"User name\"\n                        },\n                        image: {\n                          type: \"string\",\n                          description: \"User image URL\"\n                        },\n                        emailVerified: {\n                          type: \"boolean\",\n                          description: \"Indicates if the user email is verified\"\n                        },\n                        createdAt: {\n                          type: \"string\",\n                          description: \"User creation date\"\n                        },\n                        updatedAt: {\n                          type: \"string\",\n                          description: \"User update date\"\n                        }\n                      },\n                      required: [\n                        \"id\",\n                        \"email\",\n                        \"name\",\n                        \"image\",\n                        \"emailVerified\",\n                        \"createdAt\",\n                        \"updatedAt\"\n                      ]\n                    },\n                    status: {\n                      type: \"boolean\",\n                      description: \"Indicates if the email was verified successfully\"\n                    }\n                  },\n                  required: [\"user\", \"status\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    function redirectOnError(error) {\n      if (ctx.query.callbackURL) {\n        if (ctx.query.callbackURL.includes(\"?\")) {\n          throw ctx.redirect(`${ctx.query.callbackURL}&error=${error}`);\n        }\n        throw ctx.redirect(`${ctx.query.callbackURL}?error=${error}`);\n      }\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"UNAUTHORIZED\", {\n        message: error\n      });\n    }\n    const { token } = ctx.query;\n    let jwt;\n    try {\n      jwt = await (0,jose__WEBPACK_IMPORTED_MODULE_22__.jwtVerify)(\n        token,\n        new TextEncoder().encode(ctx.context.secret),\n        {\n          algorithms: [\"HS256\"]\n        }\n      );\n    } catch (e) {\n      if (e instanceof jose_errors__WEBPACK_IMPORTED_MODULE_23__.JWTExpired) {\n        return redirectOnError(\"token_expired\");\n      }\n      return redirectOnError(\"invalid_token\");\n    }\n    const schema = zod__WEBPACK_IMPORTED_MODULE_21__.object({\n      email: zod__WEBPACK_IMPORTED_MODULE_21__.string().email(),\n      updateTo: zod__WEBPACK_IMPORTED_MODULE_21__.string().optional()\n    });\n    const parsed = schema.parse(jwt.payload);\n    const user = await ctx.context.internalAdapter.findUserByEmail(\n      parsed.email\n    );\n    if (!user) {\n      return redirectOnError(\"user_not_found\");\n    }\n    if (parsed.updateTo) {\n      const session = await (0,_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(ctx);\n      if (!session) {\n        if (ctx.query.callbackURL) {\n          throw ctx.redirect(`${ctx.query.callbackURL}?error=unauthorized`);\n        }\n        return redirectOnError(\"unauthorized\");\n      }\n      if (session.user.email !== parsed.email) {\n        if (ctx.query.callbackURL) {\n          throw ctx.redirect(`${ctx.query.callbackURL}?error=unauthorized`);\n        }\n        return redirectOnError(\"unauthorized\");\n      }\n      const updatedUser2 = await ctx.context.internalAdapter.updateUserByEmail(\n        parsed.email,\n        {\n          email: parsed.updateTo,\n          emailVerified: false\n        },\n        ctx\n      );\n      const newToken = await createEmailVerificationToken(\n        ctx.context.secret,\n        parsed.updateTo\n      );\n      await ctx.context.options.emailVerification?.sendVerificationEmail?.(\n        {\n          user: updatedUser2,\n          url: `${ctx.context.baseURL}/verify-email?token=${newToken}&callbackURL=${ctx.query.callbackURL || \"/\"}`,\n          token: newToken\n        },\n        ctx.request\n      );\n      await (0,_better_auth_DiMXeqeq_mjs__WEBPACK_IMPORTED_MODULE_10__.s)(ctx, {\n        session: session.session,\n        user: {\n          ...session.user,\n          email: parsed.updateTo,\n          emailVerified: false\n        }\n      });\n      if (ctx.query.callbackURL) {\n        throw ctx.redirect(ctx.query.callbackURL);\n      }\n      return ctx.json({\n        status: true,\n        user: {\n          id: updatedUser2.id,\n          email: updatedUser2.email,\n          name: updatedUser2.name,\n          image: updatedUser2.image,\n          emailVerified: updatedUser2.emailVerified,\n          createdAt: updatedUser2.createdAt,\n          updatedAt: updatedUser2.updatedAt\n        }\n      });\n    }\n    if (ctx.context.options.emailVerification?.onEmailVerification) {\n      await ctx.context.options.emailVerification.onEmailVerification(\n        user.user,\n        ctx.request\n      );\n    }\n    const updatedUser = await ctx.context.internalAdapter.updateUserByEmail(\n      parsed.email,\n      {\n        emailVerified: true\n      },\n      ctx\n    );\n    if (ctx.context.options.emailVerification?.afterEmailVerification) {\n      await ctx.context.options.emailVerification.afterEmailVerification(\n        updatedUser,\n        ctx.request\n      );\n    }\n    if (ctx.context.options.emailVerification?.autoSignInAfterVerification) {\n      const currentSession = await (0,_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(ctx);\n      if (!currentSession || currentSession.user.email !== parsed.email) {\n        const session = await ctx.context.internalAdapter.createSession(\n          user.user.id,\n          ctx\n        );\n        if (!session) {\n          throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"INTERNAL_SERVER_ERROR\", {\n            message: \"Failed to create session\"\n          });\n        }\n        await (0,_better_auth_DiMXeqeq_mjs__WEBPACK_IMPORTED_MODULE_10__.s)(ctx, {\n          session,\n          user: {\n            ...user.user,\n            emailVerified: true\n          }\n        });\n      } else {\n        await (0,_better_auth_DiMXeqeq_mjs__WEBPACK_IMPORTED_MODULE_10__.s)(ctx, {\n          session: currentSession.session,\n          user: {\n            ...currentSession.user,\n            emailVerified: true\n          }\n        });\n      }\n    }\n    if (ctx.query.callbackURL) {\n      throw ctx.redirect(ctx.query.callbackURL);\n    }\n    return ctx.json({\n      status: true,\n      user: null\n    });\n  }\n);\n\nconst HIDE_METADATA = {\n  isAction: false\n};\n\nasync function generateState(c, link) {\n  const callbackURL = c.body?.callbackURL || c.context.options.baseURL;\n  if (!callbackURL) {\n    throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n      message: \"callbackURL is required\"\n    });\n  }\n  const codeVerifier = (0,_better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_8__.g)(128);\n  const state = (0,_better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_8__.g)(32);\n  const stateCookie = c.context.createAuthCookie(\"state\", {\n    maxAge: 5 * 60 * 1e3\n    // 5 minutes\n  });\n  await c.setSignedCookie(\n    stateCookie.name,\n    state,\n    c.context.secret,\n    stateCookie.attributes\n  );\n  const data = JSON.stringify({\n    callbackURL,\n    codeVerifier,\n    errorURL: c.body?.errorCallbackURL,\n    newUserURL: c.body?.newUserCallbackURL,\n    link,\n    /**\n     * This is the actual expiry time of the state\n     */\n    expiresAt: Date.now() + 10 * 60 * 1e3,\n    requestSignUp: c.body?.requestSignUp\n  });\n  const expiresAt = /* @__PURE__ */ new Date();\n  expiresAt.setMinutes(expiresAt.getMinutes() + 10);\n  const verification = await c.context.internalAdapter.createVerificationValue(\n    {\n      value: data,\n      identifier: state,\n      expiresAt\n    },\n    c\n  );\n  if (!verification) {\n    c.context.logger.error(\n      \"Unable to create verification. Make sure the database adapter is properly working and there is a verification table in the database\"\n    );\n    throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"INTERNAL_SERVER_ERROR\", {\n      message: \"Unable to create verification\"\n    });\n  }\n  return {\n    state: verification.identifier,\n    codeVerifier\n  };\n}\nasync function parseState(c) {\n  const state = c.query.state || c.body.state;\n  const data = await c.context.internalAdapter.findVerificationValue(state);\n  if (!data) {\n    c.context.logger.error(\"State Mismatch. Verification not found\", {\n      state\n    });\n    const errorURL = c.context.options.onAPIError?.errorURL || `${c.context.baseURL}/error`;\n    throw c.redirect(`${errorURL}?error=please_restart_the_process`);\n  }\n  const parsedData = zod__WEBPACK_IMPORTED_MODULE_21__.object({\n    callbackURL: zod__WEBPACK_IMPORTED_MODULE_21__.string(),\n    codeVerifier: zod__WEBPACK_IMPORTED_MODULE_21__.string(),\n    errorURL: zod__WEBPACK_IMPORTED_MODULE_21__.string().optional(),\n    newUserURL: zod__WEBPACK_IMPORTED_MODULE_21__.string().optional(),\n    expiresAt: zod__WEBPACK_IMPORTED_MODULE_21__.number(),\n    link: zod__WEBPACK_IMPORTED_MODULE_21__.object({\n      email: zod__WEBPACK_IMPORTED_MODULE_21__.string(),\n      userId: zod__WEBPACK_IMPORTED_MODULE_21__.coerce.string()\n    }).optional(),\n    requestSignUp: zod__WEBPACK_IMPORTED_MODULE_21__.boolean().optional()\n  }).parse(JSON.parse(data.value));\n  if (!parsedData.errorURL) {\n    parsedData.errorURL = `${c.context.baseURL}/error`;\n  }\n  const stateCookie = c.context.createAuthCookie(\"state\");\n  const stateCookieValue = await c.getSignedCookie(\n    stateCookie.name,\n    c.context.secret\n  );\n  const skipStateCookieCheck = c.context.oauthConfig?.skipStateCookieCheck;\n  if (!skipStateCookieCheck && (!stateCookieValue || stateCookieValue !== state)) {\n    const errorURL = c.context.options.onAPIError?.errorURL || `${c.context.baseURL}/error`;\n    throw c.redirect(`${errorURL}?error=state_mismatch`);\n  }\n  c.setCookie(stateCookie.name, \"\", {\n    maxAge: 0\n  });\n  if (parsedData.expiresAt < Date.now()) {\n    await c.context.internalAdapter.deleteVerificationValue(data.id);\n    const errorURL = c.context.options.onAPIError?.errorURL || `${c.context.baseURL}/error`;\n    throw c.redirect(`${errorURL}?error=please_restart_the_process`);\n  }\n  await c.context.internalAdapter.deleteVerificationValue(data.id);\n  return parsedData;\n}\n\nasync function generateCodeChallenge(codeVerifier) {\n  const codeChallengeBytes = await (0,_better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_3__.createHash)(\"SHA-256\").digest(codeVerifier);\n  return _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_4__.base64Url.encode(new Uint8Array(codeChallengeBytes), {\n    padding: false\n  });\n}\nfunction getOAuth2Tokens(data) {\n  return {\n    tokenType: data.token_type,\n    accessToken: data.access_token,\n    refreshToken: data.refresh_token,\n    accessTokenExpiresAt: data.expires_in ? (0,_better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_2__.g)(data.expires_in, \"sec\") : void 0,\n    refreshTokenExpiresAt: data.refresh_token_expires_in ? (0,_better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_2__.g)(data.refresh_token_expires_in, \"sec\") : void 0,\n    scopes: data?.scope ? typeof data.scope === \"string\" ? data.scope.split(\" \") : data.scope : [],\n    idToken: data.id_token\n  };\n}\nconst encodeOAuthParameter = (value) => encodeURIComponent(value).replace(/%20/g, \"+\");\nfunction decryptOAuthToken(token, ctx) {\n  if (!token) return token;\n  if (ctx.options.account?.encryptOAuthTokens) {\n    return (0,_crypto_index_mjs__WEBPACK_IMPORTED_MODULE_5__.symmetricDecrypt)({\n      key: ctx.secret,\n      data: token\n    });\n  }\n  return token;\n}\nfunction setTokenUtil(token, ctx) {\n  if (ctx.options.account?.encryptOAuthTokens && token) {\n    return (0,_crypto_index_mjs__WEBPACK_IMPORTED_MODULE_5__.symmetricEncrypt)({\n      key: ctx.secret,\n      data: token\n    });\n  }\n  return token;\n}\n\nasync function handleOAuthUserInfo(c, {\n  userInfo,\n  account,\n  callbackURL,\n  disableSignUp,\n  overrideUserInfo\n}) {\n  const dbUser = await c.context.internalAdapter.findOAuthUser(\n    userInfo.email.toLowerCase(),\n    account.accountId,\n    account.providerId\n  ).catch((e) => {\n    _better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_12__.a.error(\n      \"Better auth was unable to query your database.\\nError: \",\n      e\n    );\n    const errorURL = c.context.options.onAPIError?.errorURL || `${c.context.baseURL}/error`;\n    throw c.redirect(`${errorURL}?error=internal_server_error`);\n  });\n  let user = dbUser?.user;\n  let isRegister = !user;\n  if (dbUser) {\n    const hasBeenLinked = dbUser.accounts.find(\n      (a) => a.providerId === account.providerId && a.accountId === account.accountId\n    );\n    if (!hasBeenLinked) {\n      const trustedProviders = c.context.options.account?.accountLinking?.trustedProviders;\n      const isTrustedProvider = trustedProviders?.includes(\n        account.providerId\n      );\n      if (!isTrustedProvider && !userInfo.emailVerified || c.context.options.account?.accountLinking?.enabled === false) {\n        if (_better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_15__.a) {\n          _better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_12__.a.warn(\n            `User already exist but account isn't linked to ${account.providerId}. To read more about how account linking works in Better Auth see https://www.better-auth.com/docs/concepts/users-accounts#account-linking.`\n          );\n        }\n        return {\n          error: \"account not linked\",\n          data: null\n        };\n      }\n      try {\n        await c.context.internalAdapter.linkAccount(\n          {\n            providerId: account.providerId,\n            accountId: userInfo.id.toString(),\n            userId: dbUser.user.id,\n            accessToken: await setTokenUtil(account.accessToken, c.context),\n            refreshToken: await setTokenUtil(account.refreshToken, c.context),\n            idToken: account.idToken,\n            accessTokenExpiresAt: account.accessTokenExpiresAt,\n            refreshTokenExpiresAt: account.refreshTokenExpiresAt,\n            scope: account.scope\n          },\n          c\n        );\n      } catch (e) {\n        _better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_12__.a.error(\"Unable to link account\", e);\n        return {\n          error: \"unable to link account\",\n          data: null\n        };\n      }\n      if (userInfo.emailVerified && !dbUser.user.emailVerified && userInfo.email.toLowerCase() === dbUser.user.email) {\n        await c.context.internalAdapter.updateUser(dbUser.user.id, {\n          emailVerified: true\n        });\n      }\n    } else {\n      if (c.context.options.account?.updateAccountOnSignIn !== false) {\n        const updateData = Object.fromEntries(\n          Object.entries({\n            idToken: account.idToken,\n            accessToken: await setTokenUtil(account.accessToken, c.context),\n            refreshToken: await setTokenUtil(account.refreshToken, c.context),\n            accessTokenExpiresAt: account.accessTokenExpiresAt,\n            refreshTokenExpiresAt: account.refreshTokenExpiresAt,\n            scope: account.scope\n          }).filter(([_, value]) => value !== void 0)\n        );\n        if (Object.keys(updateData).length > 0) {\n          await c.context.internalAdapter.updateAccount(\n            hasBeenLinked.id,\n            updateData,\n            c\n          );\n        }\n      }\n      if (userInfo.emailVerified && !dbUser.user.emailVerified && userInfo.email.toLowerCase() === dbUser.user.email) {\n        await c.context.internalAdapter.updateUser(dbUser.user.id, {\n          emailVerified: true\n        });\n      }\n    }\n    if (overrideUserInfo) {\n      const { id: _, ...restUserInfo } = userInfo;\n      await c.context.internalAdapter.updateUser(dbUser.user.id, {\n        ...restUserInfo,\n        email: userInfo.email.toLowerCase(),\n        emailVerified: userInfo.email.toLowerCase() === dbUser.user.email ? dbUser.user.emailVerified || userInfo.emailVerified : userInfo.emailVerified\n      });\n    }\n  } else {\n    if (disableSignUp) {\n      return {\n        error: \"signup disabled\",\n        data: null,\n        isRegister: false\n      };\n    }\n    try {\n      const { id: _, ...restUserInfo } = userInfo;\n      user = await c.context.internalAdapter.createOAuthUser(\n        {\n          ...restUserInfo,\n          email: userInfo.email.toLowerCase()\n        },\n        {\n          accessToken: await setTokenUtil(account.accessToken, c.context),\n          refreshToken: await setTokenUtil(account.refreshToken, c.context),\n          idToken: account.idToken,\n          accessTokenExpiresAt: account.accessTokenExpiresAt,\n          refreshTokenExpiresAt: account.refreshTokenExpiresAt,\n          scope: account.scope,\n          providerId: account.providerId,\n          accountId: userInfo.id.toString()\n        },\n        c\n      ).then((res) => res?.user);\n      if (!userInfo.emailVerified && user && c.context.options.emailVerification?.sendOnSignUp) {\n        const token = await createEmailVerificationToken(\n          c.context.secret,\n          user.email,\n          void 0,\n          c.context.options.emailVerification?.expiresIn\n        );\n        const url = `${c.context.baseURL}/verify-email?token=${token}&callbackURL=${callbackURL}`;\n        await c.context.options.emailVerification?.sendVerificationEmail?.(\n          {\n            user,\n            url,\n            token\n          },\n          c.request\n        );\n      }\n    } catch (e) {\n      _better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_12__.a.error(e);\n      if (e instanceof better_call__WEBPACK_IMPORTED_MODULE_1__.APIError) {\n        return {\n          error: e.message,\n          data: null,\n          isRegister: false\n        };\n      }\n      return {\n        error: \"unable to create user\",\n        data: null,\n        isRegister: false\n      };\n    }\n  }\n  if (!user) {\n    return {\n      error: \"unable to create user\",\n      data: null,\n      isRegister: false\n    };\n  }\n  const session = await c.context.internalAdapter.createSession(user.id, c);\n  if (!session) {\n    return {\n      error: \"unable to create session\",\n      data: null,\n      isRegister: false\n    };\n  }\n  return {\n    data: {\n      session,\n      user\n    },\n    error: null,\n    isRegister\n  };\n}\n\nasync function createAuthorizationURL({\n  id,\n  options,\n  authorizationEndpoint,\n  state,\n  codeVerifier,\n  scopes,\n  claims,\n  redirectURI,\n  duration,\n  prompt,\n  accessType,\n  responseType,\n  display,\n  loginHint,\n  hd,\n  responseMode,\n  additionalParams,\n  scopeJoiner\n}) {\n  const url = new URL(authorizationEndpoint);\n  url.searchParams.set(\"response_type\", responseType || \"code\");\n  const primaryClientId = Array.isArray(options.clientId) ? options.clientId[0] : options.clientId;\n  url.searchParams.set(\"client_id\", primaryClientId);\n  url.searchParams.set(\"state\", state);\n  url.searchParams.set(\"scope\", scopes.join(scopeJoiner || \" \"));\n  url.searchParams.set(\"redirect_uri\", options.redirectURI || redirectURI);\n  duration && url.searchParams.set(\"duration\", duration);\n  display && url.searchParams.set(\"display\", display);\n  loginHint && url.searchParams.set(\"login_hint\", loginHint);\n  prompt && url.searchParams.set(\"prompt\", prompt);\n  hd && url.searchParams.set(\"hd\", hd);\n  accessType && url.searchParams.set(\"access_type\", accessType);\n  responseMode && url.searchParams.set(\"response_mode\", responseMode);\n  if (codeVerifier) {\n    const codeChallenge = await generateCodeChallenge(codeVerifier);\n    url.searchParams.set(\"code_challenge_method\", \"S256\");\n    url.searchParams.set(\"code_challenge\", codeChallenge);\n  }\n  if (claims) {\n    const claimsObj = claims.reduce(\n      (acc, claim) => {\n        acc[claim] = null;\n        return acc;\n      },\n      {}\n    );\n    url.searchParams.set(\n      \"claims\",\n      JSON.stringify({\n        id_token: { email: null, email_verified: null, ...claimsObj }\n      })\n    );\n  }\n  if (additionalParams) {\n    Object.entries(additionalParams).forEach(([key, value]) => {\n      url.searchParams.set(key, value);\n    });\n  }\n  return url;\n}\n\nfunction createAuthorizationCodeRequest({\n  code,\n  codeVerifier,\n  redirectURI,\n  options,\n  authentication,\n  deviceId,\n  headers,\n  additionalParams = {},\n  resource\n}) {\n  const body = new URLSearchParams();\n  const requestHeaders = {\n    \"content-type\": \"application/x-www-form-urlencoded\",\n    accept: \"application/json\",\n    \"user-agent\": \"better-auth\",\n    ...headers\n  };\n  body.set(\"grant_type\", \"authorization_code\");\n  body.set(\"code\", code);\n  codeVerifier && body.set(\"code_verifier\", codeVerifier);\n  options.clientKey && body.set(\"client_key\", options.clientKey);\n  deviceId && body.set(\"device_id\", deviceId);\n  body.set(\"redirect_uri\", options.redirectURI || redirectURI);\n  if (resource) {\n    if (typeof resource === \"string\") {\n      body.append(\"resource\", resource);\n    } else {\n      for (const _resource of resource) {\n        body.append(\"resource\", _resource);\n      }\n    }\n  }\n  if (authentication === \"basic\") {\n    const primaryClientId = Array.isArray(options.clientId) ? options.clientId[0] : options.clientId;\n    const encodedCredentials = _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_4__.base64.encode(\n      `${primaryClientId}:${options.clientSecret ?? \"\"}`\n    );\n    requestHeaders[\"authorization\"] = `Basic ${encodedCredentials}`;\n  } else {\n    const primaryClientId = Array.isArray(options.clientId) ? options.clientId[0] : options.clientId;\n    body.set(\"client_id\", primaryClientId);\n    if (options.clientSecret) {\n      body.set(\"client_secret\", options.clientSecret);\n    }\n  }\n  for (const [key, value] of Object.entries(additionalParams)) {\n    if (!body.has(key)) body.append(key, value);\n  }\n  return {\n    body,\n    headers: requestHeaders\n  };\n}\nasync function validateAuthorizationCode({\n  code,\n  codeVerifier,\n  redirectURI,\n  options,\n  tokenEndpoint,\n  authentication,\n  deviceId,\n  headers,\n  additionalParams = {},\n  resource\n}) {\n  const { body, headers: requestHeaders } = createAuthorizationCodeRequest({\n    code,\n    codeVerifier,\n    redirectURI,\n    options,\n    authentication,\n    deviceId,\n    headers,\n    additionalParams,\n    resource\n  });\n  const { data, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_6__.betterFetch)(tokenEndpoint, {\n    method: \"POST\",\n    body,\n    headers: requestHeaders\n  });\n  if (error) {\n    throw error;\n  }\n  const tokens = getOAuth2Tokens(data);\n  return tokens;\n}\nasync function validateToken(token, jwksEndpoint) {\n  const { data, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_6__.betterFetch)(jwksEndpoint, {\n    method: \"GET\",\n    headers: {\n      accept: \"application/json\",\n      \"user-agent\": \"better-auth\"\n    }\n  });\n  if (error) {\n    throw error;\n  }\n  const keys = data[\"keys\"];\n  const header = JSON.parse(atob(token.split(\".\")[0]));\n  const key = keys.find((key2) => key2.kid === header.kid);\n  if (!key) {\n    throw new Error(\"Key not found\");\n  }\n  const verified = await (0,jose__WEBPACK_IMPORTED_MODULE_22__.jwtVerify)(token, key);\n  return verified;\n}\n\nfunction createRefreshAccessTokenRequest({\n  refreshToken,\n  options,\n  authentication,\n  extraParams,\n  resource\n}) {\n  const body = new URLSearchParams();\n  const headers = {\n    \"content-type\": \"application/x-www-form-urlencoded\",\n    accept: \"application/json\"\n  };\n  body.set(\"grant_type\", \"refresh_token\");\n  body.set(\"refresh_token\", refreshToken);\n  if (authentication === \"basic\") {\n    const primaryClientId = Array.isArray(options.clientId) ? options.clientId[0] : options.clientId;\n    if (primaryClientId) {\n      headers[\"authorization\"] = \"Basic \" + _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_4__.base64.encode(`${primaryClientId}:${options.clientSecret ?? \"\"}`);\n    } else {\n      headers[\"authorization\"] = \"Basic \" + _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_4__.base64.encode(`:${options.clientSecret ?? \"\"}`);\n    }\n  } else {\n    const primaryClientId = Array.isArray(options.clientId) ? options.clientId[0] : options.clientId;\n    body.set(\"client_id\", primaryClientId);\n    if (options.clientSecret) {\n      body.set(\"client_secret\", options.clientSecret);\n    }\n  }\n  if (resource) {\n    if (typeof resource === \"string\") {\n      body.append(\"resource\", resource);\n    } else {\n      for (const _resource of resource) {\n        body.append(\"resource\", _resource);\n      }\n    }\n  }\n  if (extraParams) {\n    for (const [key, value] of Object.entries(extraParams)) {\n      body.set(key, value);\n    }\n  }\n  return {\n    body,\n    headers\n  };\n}\nasync function refreshAccessToken({\n  refreshToken,\n  options,\n  tokenEndpoint,\n  authentication,\n  extraParams\n}) {\n  const { body, headers } = createRefreshAccessTokenRequest({\n    refreshToken,\n    options,\n    authentication,\n    extraParams\n  });\n  const { data, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_6__.betterFetch)(tokenEndpoint, {\n    method: \"POST\",\n    body,\n    headers\n  });\n  if (error) {\n    throw error;\n  }\n  const tokens = {\n    accessToken: data.access_token,\n    refreshToken: data.refresh_token,\n    tokenType: data.token_type,\n    scopes: data.scope?.split(\" \"),\n    idToken: data.id_token\n  };\n  if (data.expires_in) {\n    const now = /* @__PURE__ */ new Date();\n    tokens.accessTokenExpiresAt = new Date(\n      now.getTime() + data.expires_in * 1e3\n    );\n  }\n  return tokens;\n}\n\nconst apple = (options) => {\n  const tokenEndpoint = \"https://appleid.apple.com/auth/token\";\n  return {\n    id: \"apple\",\n    name: \"Apple\",\n    async createAuthorizationURL({ state, scopes, redirectURI }) {\n      const _scope = options.disableDefaultScope ? [] : [\"email\", \"name\"];\n      options.scope && _scope.push(...options.scope);\n      scopes && _scope.push(...scopes);\n      const url = await createAuthorizationURL({\n        id: \"apple\",\n        options,\n        authorizationEndpoint: \"https://appleid.apple.com/auth/authorize\",\n        scopes: _scope,\n        state,\n        redirectURI,\n        responseMode: \"form_post\",\n        responseType: \"code id_token\"\n      });\n      return url;\n    },\n    validateAuthorizationCode: async ({ code, codeVerifier, redirectURI }) => {\n      return validateAuthorizationCode({\n        code,\n        codeVerifier,\n        redirectURI,\n        options,\n        tokenEndpoint\n      });\n    },\n    async verifyIdToken(token, nonce) {\n      if (options.disableIdTokenSignIn) {\n        return false;\n      }\n      if (options.verifyIdToken) {\n        return options.verifyIdToken(token, nonce);\n      }\n      const decodedHeader = (0,jose__WEBPACK_IMPORTED_MODULE_24__.decodeProtectedHeader)(token);\n      const { kid, alg: jwtAlg } = decodedHeader;\n      if (!kid || !jwtAlg) return false;\n      const publicKey = await getApplePublicKey(kid);\n      const { payload: jwtClaims } = await (0,jose__WEBPACK_IMPORTED_MODULE_22__.jwtVerify)(token, publicKey, {\n        algorithms: [jwtAlg],\n        issuer: \"https://appleid.apple.com\",\n        audience: options.audience && options.audience.length ? options.audience : options.appBundleIdentifier ? options.appBundleIdentifier : options.clientId,\n        maxTokenAge: \"1h\"\n      });\n      [\"email_verified\", \"is_private_email\"].forEach((field) => {\n        if (jwtClaims[field] !== void 0) {\n          jwtClaims[field] = Boolean(jwtClaims[field]);\n        }\n      });\n      if (nonce && jwtClaims.nonce !== nonce) {\n        return false;\n      }\n      return !!jwtClaims;\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://appleid.apple.com/auth/token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      if (!token.idToken) {\n        return null;\n      }\n      const profile = (0,jose__WEBPACK_IMPORTED_MODULE_25__.decodeJwt)(token.idToken);\n      if (!profile) {\n        return null;\n      }\n      const name = token.user ? `${token.user.name?.firstName} ${token.user.name?.lastName}` : profile.name || profile.email;\n      const emailVerified = typeof profile.email_verified === \"boolean\" ? profile.email_verified : profile.email_verified === \"true\";\n      const enrichedProfile = {\n        ...profile,\n        name\n      };\n      const userMap = await options.mapProfileToUser?.(enrichedProfile);\n      return {\n        user: {\n          id: profile.sub,\n          name: enrichedProfile.name,\n          emailVerified,\n          email: profile.email,\n          ...userMap\n        },\n        data: enrichedProfile\n      };\n    },\n    options\n  };\n};\nconst getApplePublicKey = async (kid) => {\n  const APPLE_BASE_URL = \"https://appleid.apple.com\";\n  const JWKS_APPLE_URI = \"/auth/keys\";\n  const { data } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_6__.betterFetch)(`${APPLE_BASE_URL}${JWKS_APPLE_URI}`);\n  if (!data?.keys) {\n    throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n      message: \"Keys not found\"\n    });\n  }\n  const jwk = data.keys.find((key) => key.kid === kid);\n  if (!jwk) {\n    throw new Error(`JWK with kid ${kid} not found`);\n  }\n  return await (0,jose__WEBPACK_IMPORTED_MODULE_26__.importJWK)(jwk, jwk.alg);\n};\n\nconst atlassian = (options) => {\n  return {\n    id: \"atlassian\",\n    name: \"Atlassian\",\n    async createAuthorizationURL({ state, scopes, codeVerifier, redirectURI }) {\n      if (!options.clientId || !options.clientSecret) {\n        _better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_12__.a.error(\"Client Id and Secret are required for Atlassian\");\n        throw new _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_20__.B(\"CLIENT_ID_AND_SECRET_REQUIRED\");\n      }\n      if (!codeVerifier) {\n        throw new _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_20__.B(\"codeVerifier is required for Atlassian\");\n      }\n      const _scopes = options.disableDefaultScope ? [] : [\"read:jira-user\", \"offline_access\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return createAuthorizationURL({\n        id: \"atlassian\",\n        options,\n        authorizationEndpoint: \"https://auth.atlassian.com/authorize\",\n        scopes: _scopes,\n        state,\n        codeVerifier,\n        redirectURI,\n        additionalParams: {\n          audience: \"api.atlassian.com\"\n        },\n        prompt: options.prompt\n      });\n    },\n    validateAuthorizationCode: async ({ code, codeVerifier, redirectURI }) => {\n      return validateAuthorizationCode({\n        code,\n        codeVerifier,\n        redirectURI,\n        options,\n        tokenEndpoint: \"https://auth.atlassian.com/oauth/token\"\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://auth.atlassian.com/oauth/token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      if (!token.accessToken) {\n        return null;\n      }\n      try {\n        const { data: profile } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_6__.betterFetch)(\"https://api.atlassian.com/me\", {\n          headers: { Authorization: `Bearer ${token.accessToken}` }\n        });\n        if (!profile) return null;\n        const userMap = await options.mapProfileToUser?.(profile);\n        return {\n          user: {\n            id: profile.account_id,\n            name: profile.name,\n            email: profile.email,\n            image: profile.picture,\n            emailVerified: false,\n            ...userMap\n          },\n          data: profile\n        };\n      } catch (error) {\n        _better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_12__.a.error(\"Failed to fetch user info from Figma:\", error);\n        return null;\n      }\n    },\n    options\n  };\n};\n\nconst cognito = (options) => {\n  if (!options.domain || !options.region || !options.userPoolId) {\n    _better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_12__.a.error(\n      \"Domain, region and userPoolId are required for Amazon Cognito. Make sure to provide them in the options.\"\n    );\n    throw new _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_20__.B(\"DOMAIN_AND_REGION_REQUIRED\");\n  }\n  const cleanDomain = options.domain.replace(/^https?:\\/\\//, \"\");\n  const authorizationEndpoint = `https://${cleanDomain}/oauth2/authorize`;\n  const tokenEndpoint = `https://${cleanDomain}/oauth2/token`;\n  const userInfoEndpoint = `https://${cleanDomain}/oauth2/userinfo`;\n  return {\n    id: \"cognito\",\n    name: \"Cognito\",\n    async createAuthorizationURL({ state, scopes, codeVerifier, redirectURI }) {\n      if (!options.clientId) {\n        _better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_12__.a.error(\n          \"ClientId is required for Amazon Cognito. Make sure to provide them in the options.\"\n        );\n        throw new _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_20__.B(\"CLIENT_ID_AND_SECRET_REQUIRED\");\n      }\n      if (options.requireClientSecret && !options.clientSecret) {\n        _better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_12__.a.error(\n          \"Client Secret is required when requireClientSecret is true. Make sure to provide it in the options.\"\n        );\n        throw new _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_20__.B(\"CLIENT_SECRET_REQUIRED\");\n      }\n      const _scopes = options.disableDefaultScope ? [] : [\"openid\", \"profile\", \"email\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      const url = await createAuthorizationURL({\n        id: \"cognito\",\n        options: {\n          ...options\n        },\n        authorizationEndpoint,\n        scopes: _scopes,\n        state,\n        codeVerifier,\n        redirectURI,\n        prompt: options.prompt\n      });\n      return url;\n    },\n    validateAuthorizationCode: async ({ code, codeVerifier, redirectURI }) => {\n      return validateAuthorizationCode({\n        code,\n        codeVerifier,\n        redirectURI,\n        options,\n        tokenEndpoint\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint\n      });\n    },\n    async verifyIdToken(token, nonce) {\n      if (options.disableIdTokenSignIn) {\n        return false;\n      }\n      if (options.verifyIdToken) {\n        return options.verifyIdToken(token, nonce);\n      }\n      try {\n        const decodedHeader = (0,jose__WEBPACK_IMPORTED_MODULE_24__.decodeProtectedHeader)(token);\n        const { kid, alg: jwtAlg } = decodedHeader;\n        if (!kid || !jwtAlg) return false;\n        const publicKey = await getCognitoPublicKey(\n          kid,\n          options.region,\n          options.userPoolId\n        );\n        const expectedIssuer = `https://cognito-idp.${options.region}.amazonaws.com/${options.userPoolId}`;\n        const { payload: jwtClaims } = await (0,jose__WEBPACK_IMPORTED_MODULE_22__.jwtVerify)(token, publicKey, {\n          algorithms: [jwtAlg],\n          issuer: expectedIssuer,\n          audience: options.clientId,\n          maxTokenAge: \"1h\"\n        });\n        if (nonce && jwtClaims.nonce !== nonce) {\n          return false;\n        }\n        return true;\n      } catch (error) {\n        _better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_12__.a.error(\"Failed to verify ID token:\", error);\n        return false;\n      }\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      if (token.idToken) {\n        try {\n          const profile = (0,jose__WEBPACK_IMPORTED_MODULE_25__.decodeJwt)(token.idToken);\n          if (!profile) {\n            return null;\n          }\n          const name = profile.name || profile.given_name || profile.username || profile.email;\n          const enrichedProfile = {\n            ...profile,\n            name\n          };\n          const userMap = await options.mapProfileToUser?.(enrichedProfile);\n          return {\n            user: {\n              id: profile.sub,\n              name: enrichedProfile.name,\n              email: profile.email,\n              image: profile.picture,\n              emailVerified: profile.email_verified,\n              ...userMap\n            },\n            data: enrichedProfile\n          };\n        } catch (error) {\n          _better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_12__.a.error(\"Failed to decode ID token:\", error);\n        }\n      }\n      if (token.accessToken) {\n        try {\n          const { data: userInfo } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_6__.betterFetch)(\n            userInfoEndpoint,\n            {\n              headers: {\n                Authorization: `Bearer ${token.accessToken}`\n              }\n            }\n          );\n          if (userInfo) {\n            const userMap = await options.mapProfileToUser?.(userInfo);\n            return {\n              user: {\n                id: userInfo.sub,\n                name: userInfo.name || userInfo.given_name || userInfo.username,\n                email: userInfo.email,\n                image: userInfo.picture,\n                emailVerified: userInfo.email_verified,\n                ...userMap\n              },\n              data: userInfo\n            };\n          }\n        } catch (error) {\n          _better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_12__.a.error(\"Failed to fetch user info from Cognito:\", error);\n        }\n      }\n      return null;\n    },\n    options\n  };\n};\nconst getCognitoPublicKey = async (kid, region, userPoolId) => {\n  const COGNITO_JWKS_URI = `https://cognito-idp.${region}.amazonaws.com/${userPoolId}/.well-known/jwks.json`;\n  try {\n    const { data } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_6__.betterFetch)(COGNITO_JWKS_URI);\n    if (!data?.keys) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: \"Keys not found\"\n      });\n    }\n    const jwk = data.keys.find((key) => key.kid === kid);\n    if (!jwk) {\n      throw new Error(`JWK with kid ${kid} not found`);\n    }\n    return await (0,jose__WEBPACK_IMPORTED_MODULE_26__.importJWK)(jwk, jwk.alg);\n  } catch (error) {\n    _better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_12__.a.error(\"Failed to fetch Cognito public key:\", error);\n    throw error;\n  }\n};\n\nconst discord = (options) => {\n  return {\n    id: \"discord\",\n    name: \"Discord\",\n    createAuthorizationURL({ state, scopes, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"identify\", \"email\"];\n      scopes && _scopes.push(...scopes);\n      options.scope && _scopes.push(...options.scope);\n      const hasBotScope = _scopes.includes(\"bot\");\n      const permissionsParam = hasBotScope && options.permissions !== void 0 ? `&permissions=${options.permissions}` : \"\";\n      return new URL(\n        `https://discord.com/api/oauth2/authorize?scope=${_scopes.join(\n          \"+\"\n        )}&response_type=code&client_id=${options.clientId}&redirect_uri=${encodeURIComponent(\n          options.redirectURI || redirectURI\n        )}&state=${state}&prompt=${options.prompt || \"none\"}${permissionsParam}`\n      );\n    },\n    validateAuthorizationCode: async ({ code, redirectURI }) => {\n      return validateAuthorizationCode({\n        code,\n        redirectURI,\n        options,\n        tokenEndpoint: \"https://discord.com/api/oauth2/token\"\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://discord.com/api/oauth2/token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_6__.betterFetch)(\n        \"https://discord.com/api/users/@me\",\n        {\n          headers: {\n            authorization: `Bearer ${token.accessToken}`\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      if (profile.avatar === null) {\n        const defaultAvatarNumber = profile.discriminator === \"0\" ? Number(BigInt(profile.id) >> BigInt(22)) % 6 : parseInt(profile.discriminator) % 5;\n        profile.image_url = `https://cdn.discordapp.com/embed/avatars/${defaultAvatarNumber}.png`;\n      } else {\n        const format = profile.avatar.startsWith(\"a_\") ? \"gif\" : \"png\";\n        profile.image_url = `https://cdn.discordapp.com/avatars/${profile.id}/${profile.avatar}.${format}`;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.id,\n          name: profile.global_name || profile.username || \"\",\n          email: profile.email,\n          emailVerified: profile.verified,\n          image: profile.image_url,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst facebook = (options) => {\n  return {\n    id: \"facebook\",\n    name: \"Facebook\",\n    async createAuthorizationURL({ state, scopes, redirectURI, loginHint }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"email\", \"public_profile\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return await createAuthorizationURL({\n        id: \"facebook\",\n        options,\n        authorizationEndpoint: \"https://www.facebook.com/v21.0/dialog/oauth\",\n        scopes: _scopes,\n        state,\n        redirectURI,\n        loginHint,\n        additionalParams: options.configId ? {\n          config_id: options.configId\n        } : {}\n      });\n    },\n    validateAuthorizationCode: async ({ code, redirectURI }) => {\n      return validateAuthorizationCode({\n        code,\n        redirectURI,\n        options,\n        tokenEndpoint: \"https://graph.facebook.com/oauth/access_token\"\n      });\n    },\n    async verifyIdToken(token, nonce) {\n      if (options.disableIdTokenSignIn) {\n        return false;\n      }\n      if (options.verifyIdToken) {\n        return options.verifyIdToken(token, nonce);\n      }\n      if (token.split(\".\").length === 3) {\n        try {\n          const { payload: jwtClaims } = await (0,jose__WEBPACK_IMPORTED_MODULE_22__.jwtVerify)(\n            token,\n            (0,jose__WEBPACK_IMPORTED_MODULE_27__.createRemoteJWKSet)(\n              // https://developers.facebook.com/docs/facebook-login/limited-login/token/#jwks\n              new URL(\n                \"https://limited.facebook.com/.well-known/oauth/openid/jwks/\"\n              )\n            ),\n            {\n              algorithms: [\"RS256\"],\n              audience: options.clientId,\n              issuer: \"https://www.facebook.com\"\n            }\n          );\n          if (nonce && jwtClaims.nonce !== nonce) {\n            return false;\n          }\n          return !!jwtClaims;\n        } catch (error) {\n          return false;\n        }\n      }\n      return true;\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://graph.facebook.com/v18.0/oauth/access_token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      if (token.idToken && token.idToken.split(\".\").length === 3) {\n        const profile2 = (0,jose__WEBPACK_IMPORTED_MODULE_25__.decodeJwt)(token.idToken);\n        const user = {\n          id: profile2.sub,\n          name: profile2.name,\n          email: profile2.email,\n          picture: {\n            data: {\n              url: profile2.picture,\n              height: 100,\n              width: 100,\n              is_silhouette: false\n            }\n          }\n        };\n        const userMap2 = await options.mapProfileToUser?.({\n          ...user,\n          email_verified: true\n        });\n        return {\n          user: {\n            ...user,\n            emailVerified: true,\n            ...userMap2\n          },\n          data: profile2\n        };\n      }\n      const fields = [\n        \"id\",\n        \"name\",\n        \"email\",\n        \"picture\",\n        ...options?.fields || []\n      ];\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_6__.betterFetch)(\n        \"https://graph.facebook.com/me?fields=\" + fields.join(\",\"),\n        {\n          auth: {\n            type: \"Bearer\",\n            token: token.accessToken\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.id,\n          name: profile.name,\n          email: profile.email,\n          image: profile.picture.data.url,\n          emailVerified: profile.email_verified,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst figma = (options) => {\n  return {\n    id: \"figma\",\n    name: \"Figma\",\n    async createAuthorizationURL({ state, scopes, codeVerifier, redirectURI }) {\n      if (!options.clientId || !options.clientSecret) {\n        _better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_12__.a.error(\n          \"Client Id and Client Secret are required for Figma. Make sure to provide them in the options.\"\n        );\n        throw new _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_20__.B(\"CLIENT_ID_AND_SECRET_REQUIRED\");\n      }\n      if (!codeVerifier) {\n        throw new _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_20__.B(\"codeVerifier is required for Figma\");\n      }\n      const _scopes = options.disableDefaultScope ? [] : [\"file_read\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      const url = await createAuthorizationURL({\n        id: \"figma\",\n        options,\n        authorizationEndpoint: \"https://www.figma.com/oauth\",\n        scopes: _scopes,\n        state,\n        codeVerifier,\n        redirectURI\n      });\n      return url;\n    },\n    validateAuthorizationCode: async ({ code, codeVerifier, redirectURI }) => {\n      return validateAuthorizationCode({\n        code,\n        codeVerifier,\n        redirectURI,\n        options,\n        tokenEndpoint: \"https://www.figma.com/api/oauth/token\"\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://www.figma.com/api/oauth/token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      try {\n        const { data: profile } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_6__.betterFetch)(\n          \"https://api.figma.com/v1/me\",\n          {\n            headers: {\n              Authorization: `Bearer ${token.accessToken}`\n            }\n          }\n        );\n        if (!profile) {\n          _better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_12__.a.error(\"Failed to fetch user from Figma\");\n          return null;\n        }\n        const userMap = await options.mapProfileToUser?.(profile);\n        return {\n          user: {\n            id: profile.id,\n            name: profile.handle,\n            email: profile.email,\n            image: profile.img_url,\n            emailVerified: !!profile.email,\n            ...userMap\n          },\n          data: profile\n        };\n      } catch (error) {\n        _better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_12__.a.error(\"Failed to fetch user info from Figma:\", error);\n        return null;\n      }\n    },\n    options\n  };\n};\n\nconst github = (options) => {\n  const tokenEndpoint = \"https://github.com/login/oauth/access_token\";\n  return {\n    id: \"github\",\n    name: \"GitHub\",\n    createAuthorizationURL({ state, scopes, loginHint, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"read:user\", \"user:email\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return createAuthorizationURL({\n        id: \"github\",\n        options,\n        authorizationEndpoint: \"https://github.com/login/oauth/authorize\",\n        scopes: _scopes,\n        state,\n        redirectURI,\n        loginHint,\n        prompt: options.prompt\n      });\n    },\n    validateAuthorizationCode: async ({ code, redirectURI }) => {\n      return validateAuthorizationCode({\n        code,\n        redirectURI,\n        options,\n        tokenEndpoint\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://github.com/login/oauth/access_token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_6__.betterFetch)(\n        \"https://api.github.com/user\",\n        {\n          headers: {\n            \"User-Agent\": \"better-auth\",\n            authorization: `Bearer ${token.accessToken}`\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      const { data: emails } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_6__.betterFetch)(\"https://api.github.com/user/emails\", {\n        headers: {\n          Authorization: `Bearer ${token.accessToken}`,\n          \"User-Agent\": \"better-auth\"\n        }\n      });\n      if (!profile.email && emails) {\n        profile.email = (emails.find((e) => e.primary) ?? emails[0])?.email;\n      }\n      const emailVerified = emails?.find((e) => e.email === profile.email)?.verified ?? false;\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.id,\n          name: profile.name || profile.login,\n          email: profile.email,\n          image: profile.avatar_url,\n          emailVerified,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst google = (options) => {\n  return {\n    id: \"google\",\n    name: \"Google\",\n    async createAuthorizationURL({\n      state,\n      scopes,\n      codeVerifier,\n      redirectURI,\n      loginHint,\n      display\n    }) {\n      if (!options.clientId || !options.clientSecret) {\n        _better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_12__.a.error(\n          \"Client Id and Client Secret is required for Google. Make sure to provide them in the options.\"\n        );\n        throw new _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_20__.B(\"CLIENT_ID_AND_SECRET_REQUIRED\");\n      }\n      if (!codeVerifier) {\n        throw new _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_20__.B(\"codeVerifier is required for Google\");\n      }\n      const _scopes = options.disableDefaultScope ? [] : [\"email\", \"profile\", \"openid\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      const url = await createAuthorizationURL({\n        id: \"google\",\n        options,\n        authorizationEndpoint: \"https://accounts.google.com/o/oauth2/auth\",\n        scopes: _scopes,\n        state,\n        codeVerifier,\n        redirectURI,\n        prompt: options.prompt,\n        accessType: options.accessType,\n        display: display || options.display,\n        loginHint,\n        hd: options.hd,\n        additionalParams: {\n          include_granted_scopes: \"true\"\n        }\n      });\n      return url;\n    },\n    validateAuthorizationCode: async ({ code, codeVerifier, redirectURI }) => {\n      return validateAuthorizationCode({\n        code,\n        codeVerifier,\n        redirectURI,\n        options,\n        tokenEndpoint: \"https://oauth2.googleapis.com/token\"\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://www.googleapis.com/oauth2/v4/token\"\n      });\n    },\n    async verifyIdToken(token, nonce) {\n      if (options.disableIdTokenSignIn) {\n        return false;\n      }\n      if (options.verifyIdToken) {\n        return options.verifyIdToken(token, nonce);\n      }\n      const googlePublicKeyUrl = `https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=${token}`;\n      const { data: tokenInfo } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_6__.betterFetch)(googlePublicKeyUrl);\n      if (!tokenInfo) {\n        return false;\n      }\n      const isValid = tokenInfo.aud === options.clientId && (tokenInfo.iss === \"https://accounts.google.com\" || tokenInfo.iss === \"accounts.google.com\");\n      return isValid;\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      if (!token.idToken) {\n        return null;\n      }\n      const user = (0,jose__WEBPACK_IMPORTED_MODULE_25__.decodeJwt)(token.idToken);\n      const userMap = await options.mapProfileToUser?.(user);\n      return {\n        user: {\n          id: user.sub,\n          name: user.name,\n          email: user.email,\n          image: user.picture,\n          emailVerified: user.email_verified,\n          ...userMap\n        },\n        data: user\n      };\n    },\n    options\n  };\n};\n\nconst kick = (options) => {\n  return {\n    id: \"kick\",\n    name: \"Kick\",\n    createAuthorizationURL({ state, scopes, redirectURI, codeVerifier }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"user:read\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return createAuthorizationURL({\n        id: \"kick\",\n        redirectURI,\n        options,\n        authorizationEndpoint: \"https://id.kick.com/oauth/authorize\",\n        scopes: _scopes,\n        codeVerifier,\n        state\n      });\n    },\n    async validateAuthorizationCode({ code, redirectURI, codeVerifier }) {\n      return validateAuthorizationCode({\n        code,\n        redirectURI,\n        options,\n        tokenEndpoint: \"https://id.kick.com/oauth/token\",\n        codeVerifier\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_6__.betterFetch)(\"https://api.kick.com/public/v1/users\", {\n        method: \"GET\",\n        headers: {\n          Authorization: `Bearer ${token.accessToken}`\n        }\n      });\n      if (error) {\n        return null;\n      }\n      const profile = data.data[0];\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.user_id,\n          name: profile.name,\n          email: profile.email,\n          image: profile.profile_picture,\n          emailVerified: true,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst huggingface = (options) => {\n  return {\n    id: \"huggingface\",\n    name: \"Hugging Face\",\n    createAuthorizationURL({ state, scopes, codeVerifier, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"openid\", \"profile\", \"email\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return createAuthorizationURL({\n        id: \"huggingface\",\n        options,\n        authorizationEndpoint: \"https://huggingface.co/oauth/authorize\",\n        scopes: _scopes,\n        state,\n        codeVerifier,\n        redirectURI\n      });\n    },\n    validateAuthorizationCode: async ({ code, codeVerifier, redirectURI }) => {\n      return validateAuthorizationCode({\n        code,\n        codeVerifier,\n        redirectURI,\n        options,\n        tokenEndpoint: \"https://huggingface.co/oauth/token\"\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://huggingface.co/oauth/token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_6__.betterFetch)(\n        \"https://huggingface.co/oauth/userinfo\",\n        {\n          method: \"GET\",\n          headers: {\n            Authorization: `Bearer ${token.accessToken}`\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.sub,\n          name: profile.name || profile.preferred_username,\n          email: profile.email,\n          image: profile.picture,\n          emailVerified: profile.email_verified ?? false,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst microsoft = (options) => {\n  const tenant = options.tenantId || \"common\";\n  const authority = options.authority || \"https://login.microsoftonline.com\";\n  const authorizationEndpoint = `${authority}/${tenant}/oauth2/v2.0/authorize`;\n  const tokenEndpoint = `${authority}/${tenant}/oauth2/v2.0/token`;\n  return {\n    id: \"microsoft\",\n    name: \"Microsoft EntraID\",\n    createAuthorizationURL(data) {\n      const scopes = options.disableDefaultScope ? [] : [\"openid\", \"profile\", \"email\", \"User.Read\", \"offline_access\"];\n      options.scope && scopes.push(...options.scope);\n      data.scopes && scopes.push(...data.scopes);\n      return createAuthorizationURL({\n        id: \"microsoft\",\n        options,\n        authorizationEndpoint,\n        state: data.state,\n        codeVerifier: data.codeVerifier,\n        scopes,\n        redirectURI: data.redirectURI,\n        prompt: options.prompt,\n        loginHint: data.loginHint\n      });\n    },\n    validateAuthorizationCode({ code, codeVerifier, redirectURI }) {\n      return validateAuthorizationCode({\n        code,\n        codeVerifier,\n        redirectURI,\n        options,\n        tokenEndpoint\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      if (!token.idToken) {\n        return null;\n      }\n      const user = (0,jose__WEBPACK_IMPORTED_MODULE_25__.decodeJwt)(token.idToken);\n      const profilePhotoSize = options.profilePhotoSize || 48;\n      await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_6__.betterFetch)(\n        `https://graph.microsoft.com/v1.0/me/photos/${profilePhotoSize}x${profilePhotoSize}/$value`,\n        {\n          headers: {\n            Authorization: `Bearer ${token.accessToken}`\n          },\n          async onResponse(context) {\n            if (options.disableProfilePhoto || !context.response.ok) {\n              return;\n            }\n            try {\n              const response = context.response.clone();\n              const pictureBuffer = await response.arrayBuffer();\n              const pictureBase64 = _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_4__.base64.encode(pictureBuffer);\n              user.picture = `data:image/jpeg;base64, ${pictureBase64}`;\n            } catch (e) {\n              _better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_12__.a.error(\n                e && typeof e === \"object\" && \"name\" in e ? e.name : \"\",\n                e\n              );\n            }\n          }\n        }\n      );\n      const userMap = await options.mapProfileToUser?.(user);\n      return {\n        user: {\n          id: user.sub,\n          name: user.name,\n          email: user.email,\n          image: user.picture,\n          emailVerified: true,\n          ...userMap\n        },\n        data: user\n      };\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      const scopes = options.disableDefaultScope ? [] : [\"openid\", \"profile\", \"email\", \"User.Read\", \"offline_access\"];\n      options.scope && scopes.push(...options.scope);\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientSecret: options.clientSecret\n        },\n        extraParams: {\n          scope: scopes.join(\" \")\n          // Include the scopes in request to microsoft\n        },\n        tokenEndpoint\n      });\n    },\n    options\n  };\n};\n\nconst slack = (options) => {\n  return {\n    id: \"slack\",\n    name: \"Slack\",\n    createAuthorizationURL({ state, scopes, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"openid\", \"profile\", \"email\"];\n      scopes && _scopes.push(...scopes);\n      options.scope && _scopes.push(...options.scope);\n      const url = new URL(\"https://slack.com/openid/connect/authorize\");\n      url.searchParams.set(\"scope\", _scopes.join(\" \"));\n      url.searchParams.set(\"response_type\", \"code\");\n      url.searchParams.set(\"client_id\", options.clientId);\n      url.searchParams.set(\"redirect_uri\", options.redirectURI || redirectURI);\n      url.searchParams.set(\"state\", state);\n      return url;\n    },\n    validateAuthorizationCode: async ({ code, redirectURI }) => {\n      return validateAuthorizationCode({\n        code,\n        redirectURI,\n        options,\n        tokenEndpoint: \"https://slack.com/api/openid.connect.token\"\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://slack.com/api/openid.connect.token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_6__.betterFetch)(\n        \"https://slack.com/api/openid.connect.userInfo\",\n        {\n          headers: {\n            authorization: `Bearer ${token.accessToken}`\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile[\"https://slack.com/user_id\"],\n          name: profile.name || \"\",\n          email: profile.email,\n          emailVerified: profile.email_verified,\n          image: profile.picture || profile[\"https://slack.com/user_image_512\"],\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst notion = (options) => {\n  const tokenEndpoint = \"https://api.notion.com/v1/oauth/token\";\n  return {\n    id: \"notion\",\n    name: \"Notion\",\n    createAuthorizationURL({ state, scopes, loginHint, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return createAuthorizationURL({\n        id: \"notion\",\n        options,\n        authorizationEndpoint: \"https://api.notion.com/v1/oauth/authorize\",\n        scopes: _scopes,\n        state,\n        redirectURI,\n        loginHint,\n        additionalParams: {\n          owner: \"user\"\n        }\n      });\n    },\n    validateAuthorizationCode: async ({ code, redirectURI }) => {\n      return validateAuthorizationCode({\n        code,\n        redirectURI,\n        options,\n        tokenEndpoint,\n        authentication: \"basic\"\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_6__.betterFetch)(\"https://api.notion.com/v1/users/me\", {\n        headers: {\n          Authorization: `Bearer ${token.accessToken}`,\n          \"Notion-Version\": \"2022-06-28\"\n        }\n      });\n      if (error || !profile) {\n        return null;\n      }\n      const userProfile = profile.bot?.owner?.user;\n      if (!userProfile) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(userProfile);\n      return {\n        user: {\n          id: userProfile.id,\n          name: userProfile.name || \"Notion User\",\n          email: userProfile.person?.email || null,\n          image: userProfile.avatar_url,\n          emailVerified: !!userProfile.person?.email,\n          ...userMap\n        },\n        data: userProfile\n      };\n    },\n    options\n  };\n};\n\nconst spotify = (options) => {\n  return {\n    id: \"spotify\",\n    name: \"Spotify\",\n    createAuthorizationURL({ state, scopes, codeVerifier, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"user-read-email\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return createAuthorizationURL({\n        id: \"spotify\",\n        options,\n        authorizationEndpoint: \"https://accounts.spotify.com/authorize\",\n        scopes: _scopes,\n        state,\n        codeVerifier,\n        redirectURI\n      });\n    },\n    validateAuthorizationCode: async ({ code, codeVerifier, redirectURI }) => {\n      return validateAuthorizationCode({\n        code,\n        codeVerifier,\n        redirectURI,\n        options,\n        tokenEndpoint: \"https://accounts.spotify.com/api/token\"\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://accounts.spotify.com/api/token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_6__.betterFetch)(\n        \"https://api.spotify.com/v1/me\",\n        {\n          method: \"GET\",\n          headers: {\n            Authorization: `Bearer ${token.accessToken}`\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.id,\n          name: profile.display_name,\n          email: profile.email,\n          image: profile.images[0]?.url,\n          emailVerified: false,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst twitch = (options) => {\n  return {\n    id: \"twitch\",\n    name: \"Twitch\",\n    createAuthorizationURL({ state, scopes, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"user:read:email\", \"openid\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return createAuthorizationURL({\n        id: \"twitch\",\n        redirectURI,\n        options,\n        authorizationEndpoint: \"https://id.twitch.tv/oauth2/authorize\",\n        scopes: _scopes,\n        state,\n        claims: options.claims || [\n          \"email\",\n          \"email_verified\",\n          \"preferred_username\",\n          \"picture\"\n        ]\n      });\n    },\n    validateAuthorizationCode: async ({ code, redirectURI }) => {\n      return validateAuthorizationCode({\n        code,\n        redirectURI,\n        options,\n        tokenEndpoint: \"https://id.twitch.tv/oauth2/token\"\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://id.twitch.tv/oauth2/token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const idToken = token.idToken;\n      if (!idToken) {\n        _better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_12__.a.error(\"No idToken found in token\");\n        return null;\n      }\n      const profile = (0,jose__WEBPACK_IMPORTED_MODULE_25__.decodeJwt)(idToken);\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.sub,\n          name: profile.preferred_username,\n          email: profile.email,\n          image: profile.picture,\n          emailVerified: profile.email_verified,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst twitter = (options) => {\n  return {\n    id: \"twitter\",\n    name: \"Twitter\",\n    createAuthorizationURL(data) {\n      const _scopes = options.disableDefaultScope ? [] : [\"users.read\", \"tweet.read\", \"offline.access\", \"users.email\"];\n      options.scope && _scopes.push(...options.scope);\n      data.scopes && _scopes.push(...data.scopes);\n      return createAuthorizationURL({\n        id: \"twitter\",\n        options,\n        authorizationEndpoint: \"https://x.com/i/oauth2/authorize\",\n        scopes: _scopes,\n        state: data.state,\n        codeVerifier: data.codeVerifier,\n        redirectURI: data.redirectURI\n      });\n    },\n    validateAuthorizationCode: async ({ code, codeVerifier, redirectURI }) => {\n      return validateAuthorizationCode({\n        code,\n        codeVerifier,\n        authentication: \"basic\",\n        redirectURI,\n        options,\n        tokenEndpoint: \"https://api.x.com/2/oauth2/token\"\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        authentication: \"basic\",\n        tokenEndpoint: \"https://api.x.com/2/oauth2/token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error: profileError } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_6__.betterFetch)(\n        \"https://api.x.com/2/users/me?user.fields=profile_image_url\",\n        {\n          method: \"GET\",\n          headers: {\n            Authorization: `Bearer ${token.accessToken}`\n          }\n        }\n      );\n      if (profileError) {\n        return null;\n      }\n      const { data: emailData, error: emailError } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_6__.betterFetch)(\"https://api.x.com/2/users/me?user.fields=confirmed_email\", {\n        method: \"GET\",\n        headers: {\n          Authorization: `Bearer ${token.accessToken}`\n        }\n      });\n      let emailVerified = false;\n      if (!emailError && emailData?.data?.confirmed_email) {\n        profile.data.email = emailData.data.confirmed_email;\n        emailVerified = true;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.data.id,\n          name: profile.data.name,\n          email: profile.data.email || profile.data.username || null,\n          image: profile.data.profile_image_url,\n          emailVerified,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst dropbox = (options) => {\n  const tokenEndpoint = \"https://api.dropboxapi.com/oauth2/token\";\n  return {\n    id: \"dropbox\",\n    name: \"Dropbox\",\n    createAuthorizationURL: async ({\n      state,\n      scopes,\n      codeVerifier,\n      redirectURI\n    }) => {\n      const _scopes = options.disableDefaultScope ? [] : [\"account_info.read\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      const additionalParams = {};\n      if (options.accessType) {\n        additionalParams.token_access_type = options.accessType;\n      }\n      return await createAuthorizationURL({\n        id: \"dropbox\",\n        options,\n        authorizationEndpoint: \"https://www.dropbox.com/oauth2/authorize\",\n        scopes: _scopes,\n        state,\n        redirectURI,\n        codeVerifier,\n        additionalParams\n      });\n    },\n    validateAuthorizationCode: async ({ code, codeVerifier, redirectURI }) => {\n      return await validateAuthorizationCode({\n        code,\n        codeVerifier,\n        redirectURI,\n        options,\n        tokenEndpoint\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://api.dropbox.com/oauth2/token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_6__.betterFetch)(\n        \"https://api.dropboxapi.com/2/users/get_current_account\",\n        {\n          method: \"POST\",\n          headers: {\n            Authorization: `Bearer ${token.accessToken}`\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.account_id,\n          name: profile.name?.display_name,\n          email: profile.email,\n          emailVerified: profile.email_verified || false,\n          image: profile.profile_photo_url,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst linear = (options) => {\n  const tokenEndpoint = \"https://api.linear.app/oauth/token\";\n  return {\n    id: \"linear\",\n    name: \"Linear\",\n    createAuthorizationURL({ state, scopes, loginHint, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"read\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return createAuthorizationURL({\n        id: \"linear\",\n        options,\n        authorizationEndpoint: \"https://linear.app/oauth/authorize\",\n        scopes: _scopes,\n        state,\n        redirectURI,\n        loginHint\n      });\n    },\n    validateAuthorizationCode: async ({ code, redirectURI }) => {\n      return validateAuthorizationCode({\n        code,\n        redirectURI,\n        options,\n        tokenEndpoint\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_6__.betterFetch)(\n        \"https://api.linear.app/graphql\",\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${token.accessToken}`\n          },\n          body: JSON.stringify({\n            query: `\n\t\t\t\t\t\t\tquery {\n\t\t\t\t\t\t\t\tviewer {\n\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t\temail\n\t\t\t\t\t\t\t\t\tavatarUrl\n\t\t\t\t\t\t\t\t\tactive\n\t\t\t\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\t\t\t\tupdatedAt\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t`\n          })\n        }\n      );\n      if (error || !profile?.data?.viewer) {\n        return null;\n      }\n      const userData = profile.data.viewer;\n      const userMap = await options.mapProfileToUser?.(userData);\n      return {\n        user: {\n          id: profile.data.viewer.id,\n          name: profile.data.viewer.name,\n          email: profile.data.viewer.email,\n          image: profile.data.viewer.avatarUrl,\n          emailVerified: true,\n          ...userMap\n        },\n        data: userData\n      };\n    },\n    options\n  };\n};\n\nconst linkedin = (options) => {\n  const authorizationEndpoint = \"https://www.linkedin.com/oauth/v2/authorization\";\n  const tokenEndpoint = \"https://www.linkedin.com/oauth/v2/accessToken\";\n  return {\n    id: \"linkedin\",\n    name: \"Linkedin\",\n    createAuthorizationURL: async ({\n      state,\n      scopes,\n      redirectURI,\n      loginHint\n    }) => {\n      const _scopes = options.disableDefaultScope ? [] : [\"profile\", \"email\", \"openid\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return await createAuthorizationURL({\n        id: \"linkedin\",\n        options,\n        authorizationEndpoint,\n        scopes: _scopes,\n        state,\n        loginHint,\n        redirectURI\n      });\n    },\n    validateAuthorizationCode: async ({ code, redirectURI }) => {\n      return await validateAuthorizationCode({\n        code,\n        redirectURI,\n        options,\n        tokenEndpoint\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_6__.betterFetch)(\n        \"https://api.linkedin.com/v2/userinfo\",\n        {\n          method: \"GET\",\n          headers: {\n            Authorization: `Bearer ${token.accessToken}`\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.sub,\n          name: profile.name,\n          email: profile.email,\n          emailVerified: profile.email_verified || false,\n          image: profile.picture,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst cleanDoubleSlashes = (input = \"\") => {\n  return input.split(\"://\").map((str) => str.replace(/\\/{2,}/g, \"/\")).join(\"://\");\n};\nconst issuerToEndpoints = (issuer) => {\n  let baseUrl = issuer || \"https://gitlab.com\";\n  return {\n    authorizationEndpoint: cleanDoubleSlashes(`${baseUrl}/oauth/authorize`),\n    tokenEndpoint: cleanDoubleSlashes(`${baseUrl}/oauth/token`),\n    userinfoEndpoint: cleanDoubleSlashes(`${baseUrl}/api/v4/user`)\n  };\n};\nconst gitlab = (options) => {\n  const { authorizationEndpoint, tokenEndpoint, userinfoEndpoint } = issuerToEndpoints(options.issuer);\n  const issuerId = \"gitlab\";\n  const issuerName = \"Gitlab\";\n  return {\n    id: issuerId,\n    name: issuerName,\n    createAuthorizationURL: async ({\n      state,\n      scopes,\n      codeVerifier,\n      loginHint,\n      redirectURI\n    }) => {\n      const _scopes = options.disableDefaultScope ? [] : [\"read_user\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return await createAuthorizationURL({\n        id: issuerId,\n        options,\n        authorizationEndpoint,\n        scopes: _scopes,\n        state,\n        redirectURI,\n        codeVerifier,\n        loginHint\n      });\n    },\n    validateAuthorizationCode: async ({ code, redirectURI, codeVerifier }) => {\n      return validateAuthorizationCode({\n        code,\n        redirectURI,\n        options,\n        codeVerifier,\n        tokenEndpoint\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://gitlab.com/oauth/token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_6__.betterFetch)(\n        userinfoEndpoint,\n        { headers: { authorization: `Bearer ${token.accessToken}` } }\n      );\n      if (error || profile.state !== \"active\" || profile.locked) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.id,\n          name: profile.name ?? profile.username,\n          email: profile.email,\n          image: profile.avatar_url,\n          emailVerified: true,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst tiktok = (options) => {\n  return {\n    id: \"tiktok\",\n    name: \"TikTok\",\n    createAuthorizationURL({ state, scopes, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"user.info.profile\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return new URL(\n        `https://www.tiktok.com/v2/auth/authorize?scope=${_scopes.join(\n          \",\"\n        )}&response_type=code&client_key=${options.clientKey}&redirect_uri=${encodeURIComponent(\n          options.redirectURI || redirectURI\n        )}&state=${state}`\n      );\n    },\n    validateAuthorizationCode: async ({ code, redirectURI }) => {\n      return validateAuthorizationCode({\n        code,\n        redirectURI: options.redirectURI || redirectURI,\n        options: {\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://open.tiktokapis.com/v2/oauth/token/\"\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://open.tiktokapis.com/v2/oauth/token/\",\n        authentication: \"post\",\n        extraParams: {\n          client_key: options.clientKey\n        }\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const fields = [\n        \"open_id\",\n        \"avatar_large_url\",\n        \"display_name\",\n        \"username\"\n      ];\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_6__.betterFetch)(\n        `https://open.tiktokapis.com/v2/user/info/?fields=${fields.join(\",\")}`,\n        {\n          headers: {\n            authorization: `Bearer ${token.accessToken}`\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      return {\n        user: {\n          email: profile.data.user.email || profile.data.user.username,\n          id: profile.data.user.open_id,\n          name: profile.data.user.display_name || profile.data.user.username,\n          image: profile.data.user.avatar_large_url,\n          /** @note Tiktok does not provide emailVerified or even email*/\n          emailVerified: profile.data.user.email ? true : false\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst reddit = (options) => {\n  return {\n    id: \"reddit\",\n    name: \"Reddit\",\n    createAuthorizationURL({ state, scopes, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"identity\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return createAuthorizationURL({\n        id: \"reddit\",\n        options,\n        authorizationEndpoint: \"https://www.reddit.com/api/v1/authorize\",\n        scopes: _scopes,\n        state,\n        redirectURI,\n        duration: options.duration\n      });\n    },\n    validateAuthorizationCode: async ({ code, redirectURI }) => {\n      const body = new URLSearchParams({\n        grant_type: \"authorization_code\",\n        code,\n        redirect_uri: options.redirectURI || redirectURI\n      });\n      const headers = {\n        \"content-type\": \"application/x-www-form-urlencoded\",\n        accept: \"text/plain\",\n        \"user-agent\": \"better-auth\",\n        Authorization: `Basic ${_better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_4__.base64.encode(\n          `${options.clientId}:${options.clientSecret}`\n        )}`\n      };\n      const { data, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_6__.betterFetch)(\n        \"https://www.reddit.com/api/v1/access_token\",\n        {\n          method: \"POST\",\n          headers,\n          body: body.toString()\n        }\n      );\n      if (error) {\n        throw error;\n      }\n      return getOAuth2Tokens(data);\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        authentication: \"basic\",\n        tokenEndpoint: \"https://www.reddit.com/api/v1/access_token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_6__.betterFetch)(\n        \"https://oauth.reddit.com/api/v1/me\",\n        {\n          headers: {\n            Authorization: `Bearer ${token.accessToken}`,\n            \"User-Agent\": \"better-auth\"\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.id,\n          name: profile.name,\n          email: profile.oauth_client_id,\n          emailVerified: profile.has_verified_email,\n          image: profile.icon_img?.split(\"?\")[0],\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst roblox = (options) => {\n  return {\n    id: \"roblox\",\n    name: \"Roblox\",\n    createAuthorizationURL({ state, scopes, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"openid\", \"profile\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return new URL(\n        `https://apis.roblox.com/oauth/v1/authorize?scope=${_scopes.join(\n          \"+\"\n        )}&response_type=code&client_id=${options.clientId}&redirect_uri=${encodeURIComponent(\n          options.redirectURI || redirectURI\n        )}&state=${state}&prompt=${options.prompt || \"select_account consent\"}`\n      );\n    },\n    validateAuthorizationCode: async ({ code, redirectURI }) => {\n      return validateAuthorizationCode({\n        code,\n        redirectURI: options.redirectURI || redirectURI,\n        options,\n        tokenEndpoint: \"https://apis.roblox.com/oauth/v1/token\",\n        authentication: \"post\"\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://apis.roblox.com/oauth/v1/token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_6__.betterFetch)(\n        \"https://apis.roblox.com/oauth/v1/userinfo\",\n        {\n          headers: {\n            authorization: `Bearer ${token.accessToken}`\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.sub,\n          name: profile.nickname || profile.preferred_username || \"\",\n          image: profile.picture,\n          email: profile.preferred_username || null,\n          // Roblox does not provide email\n          emailVerified: true,\n          ...userMap\n        },\n        data: {\n          ...profile\n        }\n      };\n    },\n    options\n  };\n};\n\nconst salesforce = (options) => {\n  const environment = options.environment ?? \"production\";\n  const isSandbox = environment === \"sandbox\";\n  const authorizationEndpoint = options.loginUrl ? `https://${options.loginUrl}/services/oauth2/authorize` : isSandbox ? \"https://test.salesforce.com/services/oauth2/authorize\" : \"https://login.salesforce.com/services/oauth2/authorize\";\n  const tokenEndpoint = options.loginUrl ? `https://${options.loginUrl}/services/oauth2/token` : isSandbox ? \"https://test.salesforce.com/services/oauth2/token\" : \"https://login.salesforce.com/services/oauth2/token\";\n  const userInfoEndpoint = options.loginUrl ? `https://${options.loginUrl}/services/oauth2/userinfo` : isSandbox ? \"https://test.salesforce.com/services/oauth2/userinfo\" : \"https://login.salesforce.com/services/oauth2/userinfo\";\n  return {\n    id: \"salesforce\",\n    name: \"Salesforce\",\n    async createAuthorizationURL({ state, scopes, codeVerifier, redirectURI }) {\n      if (!options.clientId || !options.clientSecret) {\n        _better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_12__.a.error(\n          \"Client Id and Client Secret are required for Salesforce. Make sure to provide them in the options.\"\n        );\n        throw new _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_20__.B(\"CLIENT_ID_AND_SECRET_REQUIRED\");\n      }\n      if (!codeVerifier) {\n        throw new _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_20__.B(\"codeVerifier is required for Salesforce\");\n      }\n      const _scopes = options.disableDefaultScope ? [] : [\"openid\", \"email\", \"profile\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return createAuthorizationURL({\n        id: \"salesforce\",\n        options,\n        authorizationEndpoint,\n        scopes: _scopes,\n        state,\n        codeVerifier,\n        redirectURI: options.redirectURI || redirectURI\n      });\n    },\n    validateAuthorizationCode: async ({ code, codeVerifier, redirectURI }) => {\n      return validateAuthorizationCode({\n        code,\n        codeVerifier,\n        redirectURI: options.redirectURI || redirectURI,\n        options,\n        tokenEndpoint\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      try {\n        const { data: user } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_6__.betterFetch)(\n          userInfoEndpoint,\n          {\n            headers: {\n              Authorization: `Bearer ${token.accessToken}`\n            }\n          }\n        );\n        if (!user) {\n          _better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_12__.a.error(\"Failed to fetch user info from Salesforce\");\n          return null;\n        }\n        const userMap = await options.mapProfileToUser?.(user);\n        return {\n          user: {\n            id: user.user_id,\n            name: user.name,\n            email: user.email,\n            image: user.photos?.picture || user.photos?.thumbnail,\n            emailVerified: user.email_verified ?? false,\n            ...userMap\n          },\n          data: user\n        };\n      } catch (error) {\n        _better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_12__.a.error(\"Failed to fetch user info from Salesforce:\", error);\n        return null;\n      }\n    },\n    options\n  };\n};\n\nconst vk = (options) => {\n  return {\n    id: \"vk\",\n    name: \"VK\",\n    async createAuthorizationURL({ state, scopes, codeVerifier, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"email\", \"phone\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      const authorizationEndpoint = \"https://id.vk.com/authorize\";\n      return createAuthorizationURL({\n        id: \"vk\",\n        options,\n        authorizationEndpoint,\n        scopes: _scopes,\n        state,\n        redirectURI,\n        codeVerifier\n      });\n    },\n    validateAuthorizationCode: async ({\n      code,\n      codeVerifier,\n      redirectURI,\n      deviceId\n    }) => {\n      return validateAuthorizationCode({\n        code,\n        codeVerifier,\n        redirectURI: options.redirectURI || redirectURI,\n        options,\n        deviceId,\n        tokenEndpoint: \"https://id.vk.com/oauth2/auth\"\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://id.vk.com/oauth2/auth\"\n      });\n    },\n    async getUserInfo(data) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(data);\n      }\n      if (!data.accessToken) {\n        return null;\n      }\n      const formBody = new URLSearchParams({\n        access_token: data.accessToken,\n        client_id: options.clientId\n      }).toString();\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_6__.betterFetch)(\n        \"https://id.vk.com/oauth2/user_info\",\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\"\n          },\n          body: formBody\n        }\n      );\n      if (error) {\n        return null;\n      }\n      if (!profile.user.email) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.user.user_id,\n          first_name: profile.user.first_name,\n          last_name: profile.user.last_name,\n          email: profile.user.email,\n          image: profile.user.avatar,\n          /** @note VK does not provide emailVerified*/\n          emailVerified: !!profile.user.email,\n          birthday: profile.user.birthday,\n          sex: profile.user.sex,\n          name: `${profile.user.first_name} ${profile.user.last_name}`,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst zoom = (userOptions) => {\n  const options = {\n    pkce: true,\n    ...userOptions\n  };\n  return {\n    id: \"zoom\",\n    name: \"Zoom\",\n    createAuthorizationURL: async ({ state, redirectURI, codeVerifier }) => {\n      const params = new URLSearchParams({\n        response_type: \"code\",\n        redirect_uri: options.redirectURI ? options.redirectURI : redirectURI,\n        client_id: options.clientId,\n        state\n      });\n      if (options.pkce) {\n        const codeChallenge = await generateCodeChallenge(codeVerifier);\n        params.set(\"code_challenge_method\", \"S256\");\n        params.set(\"code_challenge\", codeChallenge);\n      }\n      const url = new URL(\"https://zoom.us/oauth/authorize\");\n      url.search = params.toString();\n      return url;\n    },\n    validateAuthorizationCode: async ({ code, redirectURI, codeVerifier }) => {\n      return validateAuthorizationCode({\n        code,\n        redirectURI: options.redirectURI || redirectURI,\n        codeVerifier,\n        options,\n        tokenEndpoint: \"https://zoom.us/oauth/token\",\n        authentication: \"post\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_6__.betterFetch)(\n        \"https://api.zoom.us/v2/users/me\",\n        {\n          headers: {\n            authorization: `Bearer ${token.accessToken}`\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.id,\n          name: profile.display_name,\n          image: profile.pic_url,\n          email: profile.email,\n          emailVerified: Boolean(profile.verified),\n          ...userMap\n        },\n        data: {\n          ...profile\n        }\n      };\n    }\n  };\n};\n\nconst kakao = (options) => {\n  return {\n    id: \"kakao\",\n    name: \"Kakao\",\n    createAuthorizationURL({ state, scopes, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"account_email\", \"profile_image\", \"profile_nickname\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return createAuthorizationURL({\n        id: \"kakao\",\n        options,\n        authorizationEndpoint: \"https://kauth.kakao.com/oauth/authorize\",\n        scopes: _scopes,\n        state,\n        redirectURI\n      });\n    },\n    validateAuthorizationCode: async ({ code, redirectURI }) => {\n      return validateAuthorizationCode({\n        code,\n        redirectURI,\n        options,\n        tokenEndpoint: \"https://kauth.kakao.com/oauth/token\"\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://kauth.kakao.com/oauth/token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_6__.betterFetch)(\n        \"https://kapi.kakao.com/v2/user/me\",\n        {\n          headers: {\n            Authorization: `Bearer ${token.accessToken}`\n          }\n        }\n      );\n      if (error || !profile) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      const account = profile.kakao_account || {};\n      const kakaoProfile = account.profile || {};\n      const user = {\n        id: String(profile.id),\n        name: kakaoProfile.nickname || account.name || void 0,\n        email: account.email,\n        image: kakaoProfile.profile_image_url || kakaoProfile.thumbnail_image_url,\n        emailVerified: !!account.is_email_valid && !!account.is_email_verified,\n        ...userMap\n      };\n      return {\n        user,\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst naver = (options) => {\n  return {\n    id: \"naver\",\n    name: \"Naver\",\n    createAuthorizationURL({ state, scopes, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"profile\", \"email\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return createAuthorizationURL({\n        id: \"naver\",\n        options,\n        authorizationEndpoint: \"https://nid.naver.com/oauth2.0/authorize\",\n        scopes: _scopes,\n        state,\n        redirectURI\n      });\n    },\n    validateAuthorizationCode: async ({ code, redirectURI }) => {\n      return validateAuthorizationCode({\n        code,\n        redirectURI,\n        options,\n        tokenEndpoint: \"https://nid.naver.com/oauth2.0/token\"\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://nid.naver.com/oauth2.0/token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_6__.betterFetch)(\n        \"https://openapi.naver.com/v1/nid/me\",\n        {\n          headers: {\n            Authorization: `Bearer ${token.accessToken}`\n          }\n        }\n      );\n      if (error || !profile || profile.resultcode !== \"00\") {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      const res = profile.response || {};\n      const user = {\n        id: res.id,\n        name: res.name || res.nickname,\n        email: res.email,\n        image: res.profile_image,\n        emailVerified: false,\n        ...userMap\n      };\n      return {\n        user,\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst line = (options) => {\n  const authorizationEndpoint = \"https://access.line.me/oauth2/v2.1/authorize\";\n  const tokenEndpoint = \"https://api.line.me/oauth2/v2.1/token\";\n  const userInfoEndpoint = \"https://api.line.me/oauth2/v2.1/userinfo\";\n  const verifyIdTokenEndpoint = \"https://api.line.me/oauth2/v2.1/verify\";\n  return {\n    id: \"line\",\n    name: \"LINE\",\n    async createAuthorizationURL({\n      state,\n      scopes,\n      codeVerifier,\n      redirectURI,\n      loginHint\n    }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"openid\", \"profile\", \"email\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return await createAuthorizationURL({\n        id: \"line\",\n        options,\n        authorizationEndpoint,\n        scopes: _scopes,\n        state,\n        codeVerifier,\n        redirectURI,\n        loginHint\n      });\n    },\n    validateAuthorizationCode: async ({ code, codeVerifier, redirectURI }) => {\n      return validateAuthorizationCode({\n        code,\n        codeVerifier,\n        redirectURI,\n        options,\n        tokenEndpoint\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint\n      });\n    },\n    async verifyIdToken(token, nonce) {\n      if (options.disableIdTokenSignIn) {\n        return false;\n      }\n      if (options.verifyIdToken) {\n        return options.verifyIdToken(token, nonce);\n      }\n      const body = new URLSearchParams();\n      body.set(\"id_token\", token);\n      body.set(\"client_id\", options.clientId);\n      if (nonce) body.set(\"nonce\", nonce);\n      const { data, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_6__.betterFetch)(\n        verifyIdTokenEndpoint,\n        {\n          method: \"POST\",\n          headers: {\n            \"content-type\": \"application/x-www-form-urlencoded\"\n          },\n          body\n        }\n      );\n      if (error || !data) {\n        return false;\n      }\n      if (data.aud !== options.clientId) return false;\n      if (nonce && data.nonce && data.nonce !== nonce) return false;\n      return true;\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      let profile = null;\n      if (token.idToken) {\n        try {\n          profile = (0,jose__WEBPACK_IMPORTED_MODULE_25__.decodeJwt)(token.idToken);\n        } catch {\n        }\n      }\n      if (!profile) {\n        const { data } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_6__.betterFetch)(userInfoEndpoint, {\n          headers: {\n            authorization: `Bearer ${token.accessToken}`\n          }\n        });\n        profile = data || null;\n      }\n      if (!profile) return null;\n      const userMap = await options.mapProfileToUser?.(profile);\n      const id = profile.sub || profile.userId;\n      const name = profile.name || profile.displayName;\n      const image = profile.picture || profile.pictureUrl || void 0;\n      const email = profile.email;\n      return {\n        user: {\n          id,\n          name,\n          email,\n          image,\n          // LINE does not expose email verification status in ID token/userinfo\n          emailVerified: false,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst paypal = (options) => {\n  const environment = options.environment || \"sandbox\";\n  const isSandbox = environment === \"sandbox\";\n  const authorizationEndpoint = isSandbox ? \"https://www.sandbox.paypal.com/signin/authorize\" : \"https://www.paypal.com/signin/authorize\";\n  const tokenEndpoint = isSandbox ? \"https://api-m.sandbox.paypal.com/v1/oauth2/token\" : \"https://api-m.paypal.com/v1/oauth2/token\";\n  const userInfoEndpoint = isSandbox ? \"https://api-m.sandbox.paypal.com/v1/identity/oauth2/userinfo\" : \"https://api-m.paypal.com/v1/identity/oauth2/userinfo\";\n  return {\n    id: \"paypal\",\n    name: \"PayPal\",\n    async createAuthorizationURL({ state, codeVerifier, redirectURI }) {\n      if (!options.clientId || !options.clientSecret) {\n        _better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_12__.a.error(\n          \"Client Id and Client Secret is required for PayPal. Make sure to provide them in the options.\"\n        );\n        throw new _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_20__.B(\"CLIENT_ID_AND_SECRET_REQUIRED\");\n      }\n      const _scopes = [];\n      const url = await createAuthorizationURL({\n        id: \"paypal\",\n        options,\n        authorizationEndpoint,\n        scopes: _scopes,\n        state,\n        codeVerifier,\n        redirectURI,\n        prompt: options.prompt\n      });\n      return url;\n    },\n    validateAuthorizationCode: async ({ code, redirectURI }) => {\n      const credentials = _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_4__.base64.encode(\n        `${options.clientId}:${options.clientSecret}`\n      );\n      try {\n        const response = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_6__.betterFetch)(tokenEndpoint, {\n          method: \"POST\",\n          headers: {\n            Authorization: `Basic ${credentials}`,\n            Accept: \"application/json\",\n            \"Accept-Language\": \"en_US\",\n            \"Content-Type\": \"application/x-www-form-urlencoded\"\n          },\n          body: new URLSearchParams({\n            grant_type: \"authorization_code\",\n            code,\n            redirect_uri: redirectURI\n          }).toString()\n        });\n        if (!response.data) {\n          throw new _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_20__.B(\"FAILED_TO_GET_ACCESS_TOKEN\");\n        }\n        const data = response.data;\n        const result = {\n          accessToken: data.access_token,\n          refreshToken: data.refresh_token,\n          accessTokenExpiresAt: data.expires_in ? new Date(Date.now() + data.expires_in * 1e3) : void 0,\n          idToken: data.id_token\n        };\n        return result;\n      } catch (error) {\n        _better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_12__.a.error(\"PayPal token exchange failed:\", error);\n        throw new _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_20__.B(\"FAILED_TO_GET_ACCESS_TOKEN\");\n      }\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      const credentials = _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_4__.base64.encode(\n        `${options.clientId}:${options.clientSecret}`\n      );\n      try {\n        const response = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_6__.betterFetch)(tokenEndpoint, {\n          method: \"POST\",\n          headers: {\n            Authorization: `Basic ${credentials}`,\n            Accept: \"application/json\",\n            \"Accept-Language\": \"en_US\",\n            \"Content-Type\": \"application/x-www-form-urlencoded\"\n          },\n          body: new URLSearchParams({\n            grant_type: \"refresh_token\",\n            refresh_token: refreshToken\n          }).toString()\n        });\n        if (!response.data) {\n          throw new _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_20__.B(\"FAILED_TO_REFRESH_ACCESS_TOKEN\");\n        }\n        const data = response.data;\n        return {\n          accessToken: data.access_token,\n          refreshToken: data.refresh_token,\n          accessTokenExpiresAt: data.expires_in ? new Date(Date.now() + data.expires_in * 1e3) : void 0\n        };\n      } catch (error) {\n        _better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_12__.a.error(\"PayPal token refresh failed:\", error);\n        throw new _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_20__.B(\"FAILED_TO_REFRESH_ACCESS_TOKEN\");\n      }\n    },\n    async verifyIdToken(token, nonce) {\n      if (options.disableIdTokenSignIn) {\n        return false;\n      }\n      if (options.verifyIdToken) {\n        return options.verifyIdToken(token, nonce);\n      }\n      try {\n        const payload = (0,jose__WEBPACK_IMPORTED_MODULE_25__.decodeJwt)(token);\n        return !!payload.sub;\n      } catch (error) {\n        _better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_12__.a.error(\"Failed to verify PayPal ID token:\", error);\n        return false;\n      }\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      if (!token.accessToken) {\n        _better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_12__.a.error(\"Access token is required to fetch PayPal user info\");\n        return null;\n      }\n      try {\n        const response = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_6__.betterFetch)(\n          `${userInfoEndpoint}?schema=paypalv1.1`,\n          {\n            headers: {\n              Authorization: `Bearer ${token.accessToken}`,\n              Accept: \"application/json\"\n            }\n          }\n        );\n        if (!response.data) {\n          _better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_12__.a.error(\"Failed to fetch user info from PayPal\");\n          return null;\n        }\n        const userInfo = response.data;\n        const userMap = await options.mapProfileToUser?.(userInfo);\n        const result = {\n          user: {\n            id: userInfo.user_id,\n            name: userInfo.name,\n            email: userInfo.email,\n            image: userInfo.picture,\n            emailVerified: userInfo.email_verified,\n            ...userMap\n          },\n          data: userInfo\n        };\n        return result;\n      } catch (error) {\n        _better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_12__.a.error(\"Failed to fetch user info from PayPal:\", error);\n        return null;\n      }\n    },\n    options\n  };\n};\n\nconst socialProviders = {\n  apple,\n  atlassian,\n  cognito,\n  discord,\n  facebook,\n  figma,\n  github,\n  microsoft,\n  google,\n  huggingface,\n  slack,\n  spotify,\n  twitch,\n  twitter,\n  dropbox,\n  kick,\n  linear,\n  linkedin,\n  gitlab,\n  tiktok,\n  reddit,\n  roblox,\n  salesforce,\n  vk,\n  zoom,\n  notion,\n  kakao,\n  naver,\n  line,\n  paypal\n};\nconst socialProviderList = Object.keys(socialProviders);\nconst SocialProviderListEnum = zod__WEBPACK_IMPORTED_MODULE_21__[\"enum\"](socialProviderList).or(zod__WEBPACK_IMPORTED_MODULE_21__.string());\n\nconst signInSocial = (0,_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.a)(\n  \"/sign-in/social\",\n  {\n    method: \"POST\",\n    body: zod__WEBPACK_IMPORTED_MODULE_21__.object({\n      /**\n       * Callback URL to redirect to after the user\n       * has signed in.\n       */\n      callbackURL: zod__WEBPACK_IMPORTED_MODULE_21__.string().meta({\n        description: \"Callback URL to redirect to after the user has signed in\"\n      }).optional(),\n      /**\n       * callback url to redirect if the user is newly registered.\n       *\n       * useful if you have different routes for existing users and new users\n       */\n      newUserCallbackURL: zod__WEBPACK_IMPORTED_MODULE_21__.string().optional(),\n      /**\n       * Callback url to redirect to if an error happens\n       *\n       * If it's initiated from the client sdk this defaults to\n       * the current url.\n       */\n      errorCallbackURL: zod__WEBPACK_IMPORTED_MODULE_21__.string().meta({\n        description: \"Callback URL to redirect to if an error happens\"\n      }).optional(),\n      /**\n       * OAuth2 provider to use`\n       */\n      provider: SocialProviderListEnum,\n      /**\n       * Disable automatic redirection to the provider\n       *\n       * This is useful if you want to handle the redirection\n       * yourself like in a popup or a different tab.\n       */\n      disableRedirect: zod__WEBPACK_IMPORTED_MODULE_21__.boolean().meta({\n        description: \"Disable automatic redirection to the provider. Useful for handling the redirection yourself\"\n      }).optional(),\n      /**\n       * ID token from the provider\n       *\n       * This is used to sign in the user\n       * if the user is already signed in with the\n       * provider in the frontend.\n       *\n       * Only applicable if the provider supports\n       * it. Currently only `apple` and `google` is\n       * supported out of the box.\n       */\n      idToken: zod__WEBPACK_IMPORTED_MODULE_21__.optional(\n        zod__WEBPACK_IMPORTED_MODULE_21__.object({\n          /**\n           * ID token from the provider\n           */\n          token: zod__WEBPACK_IMPORTED_MODULE_21__.string().meta({\n            description: \"ID token from the provider\"\n          }),\n          /**\n           * The nonce used to generate the token\n           */\n          nonce: zod__WEBPACK_IMPORTED_MODULE_21__.string().meta({\n            description: \"Nonce used to generate the token\"\n          }).optional(),\n          /**\n           * Access token from the provider\n           */\n          accessToken: zod__WEBPACK_IMPORTED_MODULE_21__.string().meta({\n            description: \"Access token from the provider\"\n          }).optional(),\n          /**\n           * Refresh token from the provider\n           */\n          refreshToken: zod__WEBPACK_IMPORTED_MODULE_21__.string().meta({\n            description: \"Refresh token from the provider\"\n          }).optional(),\n          /**\n           * Expiry date of the token\n           */\n          expiresAt: zod__WEBPACK_IMPORTED_MODULE_21__.number().meta({\n            description: \"Expiry date of the token\"\n          }).optional()\n        })\n      ),\n      scopes: zod__WEBPACK_IMPORTED_MODULE_21__.array(zod__WEBPACK_IMPORTED_MODULE_21__.string()).meta({\n        description: \"Array of scopes to request from the provider. This will override the default scopes passed.\"\n      }).optional(),\n      /**\n       * Explicitly request sign-up\n       *\n       * Should be used to allow sign up when\n       * disableImplicitSignUp for this provider is\n       * true\n       */\n      requestSignUp: zod__WEBPACK_IMPORTED_MODULE_21__.boolean().meta({\n        description: \"Explicitly request sign-up. Useful when disableImplicitSignUp is true for this provider\"\n      }).optional(),\n      /**\n       * The login hint to use for the authorization code request\n       */\n      loginHint: zod__WEBPACK_IMPORTED_MODULE_21__.string().meta({\n        description: \"The login hint to use for the authorization code request\"\n      }).optional()\n    }),\n    metadata: {\n      openapi: {\n        description: \"Sign in with a social provider\",\n        operationId: \"socialSignIn\",\n        responses: {\n          \"200\": {\n            description: \"Success - Returns either session details or redirect URL\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  // todo: we need support for multiple schema\n                  type: \"object\",\n                  description: \"Session response when idToken is provided\",\n                  properties: {\n                    redirect: {\n                      type: \"boolean\",\n                      enum: [false]\n                    },\n                    token: {\n                      type: \"string\",\n                      description: \"Session token\",\n                      url: {\n                        type: \"null\",\n                        nullable: true\n                      },\n                      user: {\n                        type: \"object\",\n                        properties: {\n                          id: { type: \"string\" },\n                          email: { type: \"string\" },\n                          name: {\n                            type: \"string\",\n                            nullable: true\n                          },\n                          image: {\n                            type: \"string\",\n                            nullable: true\n                          },\n                          emailVerified: {\n                            type: \"boolean\"\n                          },\n                          createdAt: {\n                            type: \"string\",\n                            format: \"date-time\"\n                          },\n                          updatedAt: {\n                            type: \"string\",\n                            format: \"date-time\"\n                          }\n                        },\n                        required: [\n                          \"id\",\n                          \"email\",\n                          \"emailVerified\",\n                          \"createdAt\",\n                          \"updatedAt\"\n                        ]\n                      }\n                    }\n                  },\n                  required: [\"redirect\", \"token\", \"user\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (c) => {\n    const provider = c.context.socialProviders.find(\n      (p) => p.id === c.body.provider\n    );\n    if (!provider) {\n      c.context.logger.error(\n        \"Provider not found. Make sure to add the provider in your auth config\",\n        {\n          provider: c.body.provider\n        }\n      );\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"NOT_FOUND\", {\n        message: _better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.B.PROVIDER_NOT_FOUND\n      });\n    }\n    if (c.body.idToken) {\n      if (!provider.verifyIdToken) {\n        c.context.logger.error(\n          \"Provider does not support id token verification\",\n          {\n            provider: c.body.provider\n          }\n        );\n        throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"NOT_FOUND\", {\n          message: _better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.B.ID_TOKEN_NOT_SUPPORTED\n        });\n      }\n      const { token, nonce } = c.body.idToken;\n      const valid = await provider.verifyIdToken(token, nonce);\n      if (!valid) {\n        c.context.logger.error(\"Invalid id token\", {\n          provider: c.body.provider\n        });\n        throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"UNAUTHORIZED\", {\n          message: _better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.B.INVALID_TOKEN\n        });\n      }\n      const userInfo = await provider.getUserInfo({\n        idToken: token,\n        accessToken: c.body.idToken.accessToken,\n        refreshToken: c.body.idToken.refreshToken\n      });\n      if (!userInfo || !userInfo?.user) {\n        c.context.logger.error(\"Failed to get user info\", {\n          provider: c.body.provider\n        });\n        throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"UNAUTHORIZED\", {\n          message: _better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.B.FAILED_TO_GET_USER_INFO\n        });\n      }\n      if (!userInfo.user.email) {\n        c.context.logger.error(\"User email not found\", {\n          provider: c.body.provider\n        });\n        throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"UNAUTHORIZED\", {\n          message: _better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.B.USER_EMAIL_NOT_FOUND\n        });\n      }\n      const data = await handleOAuthUserInfo(c, {\n        userInfo: {\n          ...userInfo.user,\n          email: userInfo.user.email,\n          id: String(userInfo.user.id),\n          name: userInfo.user.name || \"\",\n          image: userInfo.user.image,\n          emailVerified: userInfo.user.emailVerified || false\n        },\n        account: {\n          providerId: provider.id,\n          accountId: String(userInfo.user.id),\n          accessToken: c.body.idToken.accessToken\n        },\n        callbackURL: c.body.callbackURL,\n        disableSignUp: provider.disableImplicitSignUp && !c.body.requestSignUp || provider.disableSignUp\n      });\n      if (data.error) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"UNAUTHORIZED\", {\n          message: data.error\n        });\n      }\n      await (0,_better_auth_DiMXeqeq_mjs__WEBPACK_IMPORTED_MODULE_10__.s)(c, data.data);\n      return c.json({\n        redirect: false,\n        token: data.data.session.token,\n        url: void 0,\n        user: {\n          id: data.data.user.id,\n          email: data.data.user.email,\n          name: data.data.user.name,\n          image: data.data.user.image,\n          emailVerified: data.data.user.emailVerified,\n          createdAt: data.data.user.createdAt,\n          updatedAt: data.data.user.updatedAt\n        }\n      });\n    }\n    const { codeVerifier, state } = await generateState(c);\n    const url = await provider.createAuthorizationURL({\n      state,\n      codeVerifier,\n      redirectURI: `${c.context.baseURL}/callback/${provider.id}`,\n      scopes: c.body.scopes,\n      loginHint: c.body.loginHint\n    });\n    return c.json({\n      url: url.toString(),\n      redirect: !c.body.disableRedirect\n    });\n  }\n);\nconst signInEmail = (0,_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.a)(\n  \"/sign-in/email\",\n  {\n    method: \"POST\",\n    body: zod__WEBPACK_IMPORTED_MODULE_21__.object({\n      /**\n       * Email of the user\n       */\n      email: zod__WEBPACK_IMPORTED_MODULE_21__.string().meta({\n        description: \"Email of the user\"\n      }),\n      /**\n       * Password of the user\n       */\n      password: zod__WEBPACK_IMPORTED_MODULE_21__.string().meta({\n        description: \"Password of the user\"\n      }),\n      /**\n       * Callback URL to use as a redirect for email\n       * verification and for possible redirects\n       */\n      callbackURL: zod__WEBPACK_IMPORTED_MODULE_21__.string().meta({\n        description: \"Callback URL to use as a redirect for email verification\"\n      }).optional(),\n      /**\n       * If this is false, the session will not be remembered\n       * @default true\n       */\n      rememberMe: zod__WEBPACK_IMPORTED_MODULE_21__.boolean().meta({\n        description: \"If this is false, the session will not be remembered. Default is `true`.\"\n      }).default(true).optional()\n    }),\n    metadata: {\n      openapi: {\n        description: \"Sign in with email and password\",\n        responses: {\n          \"200\": {\n            description: \"Success - Returns either session details or redirect URL\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  // todo: we need support for multiple schema\n                  type: \"object\",\n                  description: \"Session response when idToken is provided\",\n                  properties: {\n                    redirect: {\n                      type: \"boolean\",\n                      enum: [false]\n                    },\n                    token: {\n                      type: \"string\",\n                      description: \"Session token\"\n                    },\n                    url: {\n                      type: \"null\",\n                      nullable: true\n                    },\n                    user: {\n                      type: \"object\",\n                      properties: {\n                        id: { type: \"string\" },\n                        email: { type: \"string\" },\n                        name: {\n                          type: \"string\",\n                          nullable: true\n                        },\n                        image: {\n                          type: \"string\",\n                          nullable: true\n                        },\n                        emailVerified: {\n                          type: \"boolean\"\n                        },\n                        createdAt: {\n                          type: \"string\",\n                          format: \"date-time\"\n                        },\n                        updatedAt: {\n                          type: \"string\",\n                          format: \"date-time\"\n                        }\n                      },\n                      required: [\n                        \"id\",\n                        \"email\",\n                        \"emailVerified\",\n                        \"createdAt\",\n                        \"updatedAt\"\n                      ]\n                    }\n                  },\n                  required: [\"redirect\", \"token\", \"user\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    if (!ctx.context.options?.emailAndPassword?.enabled) {\n      ctx.context.logger.error(\n        \"Email and password is not enabled. Make sure to enable it in the options on you `auth.ts` file. Check `https://better-auth.com/docs/authentication/email-password` for more!\"\n      );\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: \"Email and password is not enabled\"\n      });\n    }\n    const { email, password } = ctx.body;\n    const isValidEmail = zod__WEBPACK_IMPORTED_MODULE_21__.string().email().safeParse(email);\n    if (!isValidEmail.success) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: _better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.B.INVALID_EMAIL\n      });\n    }\n    const user = await ctx.context.internalAdapter.findUserByEmail(email, {\n      includeAccounts: true\n    });\n    if (!user) {\n      await ctx.context.password.hash(password);\n      ctx.context.logger.error(\"User not found\", { email });\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"UNAUTHORIZED\", {\n        message: _better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.B.INVALID_EMAIL_OR_PASSWORD\n      });\n    }\n    const credentialAccount = user.accounts.find(\n      (a) => a.providerId === \"credential\"\n    );\n    if (!credentialAccount) {\n      ctx.context.logger.error(\"Credential account not found\", { email });\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"UNAUTHORIZED\", {\n        message: _better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.B.INVALID_EMAIL_OR_PASSWORD\n      });\n    }\n    const currentPassword = credentialAccount?.password;\n    if (!currentPassword) {\n      ctx.context.logger.error(\"Password not found\", { email });\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"UNAUTHORIZED\", {\n        message: _better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.B.INVALID_EMAIL_OR_PASSWORD\n      });\n    }\n    const validPassword = await ctx.context.password.verify({\n      hash: currentPassword,\n      password\n    });\n    if (!validPassword) {\n      ctx.context.logger.error(\"Invalid password\");\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"UNAUTHORIZED\", {\n        message: _better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.B.INVALID_EMAIL_OR_PASSWORD\n      });\n    }\n    if (ctx.context.options?.emailAndPassword?.requireEmailVerification && !user.user.emailVerified) {\n      if (!ctx.context.options?.emailVerification?.sendVerificationEmail) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"FORBIDDEN\", {\n          message: _better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.B.EMAIL_NOT_VERIFIED\n        });\n      }\n      if (ctx.context.options?.emailVerification?.sendOnSignIn) {\n        const token = await createEmailVerificationToken(\n          ctx.context.secret,\n          user.user.email,\n          void 0,\n          ctx.context.options.emailVerification?.expiresIn\n        );\n        const url = `${ctx.context.baseURL}/verify-email?token=${token}&callbackURL=${ctx.body.callbackURL || \"/\"}`;\n        await ctx.context.options.emailVerification.sendVerificationEmail(\n          {\n            user: user.user,\n            url,\n            token\n          },\n          ctx.request\n        );\n      }\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"FORBIDDEN\", {\n        message: _better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.B.EMAIL_NOT_VERIFIED\n      });\n    }\n    const session = await ctx.context.internalAdapter.createSession(\n      user.user.id,\n      ctx,\n      ctx.body.rememberMe === false\n    );\n    if (!session) {\n      ctx.context.logger.error(\"Failed to create session\");\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"UNAUTHORIZED\", {\n        message: _better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.B.FAILED_TO_CREATE_SESSION\n      });\n    }\n    await (0,_better_auth_DiMXeqeq_mjs__WEBPACK_IMPORTED_MODULE_10__.s)(\n      ctx,\n      {\n        session,\n        user: user.user\n      },\n      ctx.body.rememberMe === false\n    );\n    return ctx.json({\n      redirect: !!ctx.body.callbackURL,\n      token: session.token,\n      url: ctx.body.callbackURL,\n      user: {\n        id: user.user.id,\n        email: user.user.email,\n        name: user.user.name,\n        image: user.user.image,\n        emailVerified: user.user.emailVerified,\n        createdAt: user.user.createdAt,\n        updatedAt: user.user.updatedAt\n      }\n    });\n  }\n);\n\nconst schema = zod__WEBPACK_IMPORTED_MODULE_21__.object({\n  code: zod__WEBPACK_IMPORTED_MODULE_21__.string().optional(),\n  error: zod__WEBPACK_IMPORTED_MODULE_21__.string().optional(),\n  device_id: zod__WEBPACK_IMPORTED_MODULE_21__.string().optional(),\n  error_description: zod__WEBPACK_IMPORTED_MODULE_21__.string().optional(),\n  state: zod__WEBPACK_IMPORTED_MODULE_21__.string().optional(),\n  user: zod__WEBPACK_IMPORTED_MODULE_21__.string().optional()\n});\nconst callbackOAuth = (0,_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.a)(\n  \"/callback/:id\",\n  {\n    method: [\"GET\", \"POST\"],\n    body: schema.optional(),\n    query: schema.optional(),\n    metadata: HIDE_METADATA\n  },\n  async (c) => {\n    let queryOrBody;\n    const defaultErrorURL = c.context.options.onAPIError?.errorURL || `${c.context.baseURL}/error`;\n    try {\n      if (c.method === \"GET\") {\n        queryOrBody = schema.parse(c.query);\n      } else if (c.method === \"POST\") {\n        queryOrBody = schema.parse(c.body);\n      } else {\n        throw new Error(\"Unsupported method\");\n      }\n    } catch (e) {\n      c.context.logger.error(\"INVALID_CALLBACK_REQUEST\", e);\n      throw c.redirect(`${defaultErrorURL}?error=invalid_callback_request`);\n    }\n    const { code, error, state, error_description, device_id } = queryOrBody;\n    if (!state) {\n      c.context.logger.error(\"State not found\", error);\n      const sep = defaultErrorURL.includes(\"?\") ? \"&\" : \"?\";\n      const url = `${defaultErrorURL}${sep}state=state_not_found`;\n      throw c.redirect(url);\n    }\n    const {\n      codeVerifier,\n      callbackURL,\n      link,\n      errorURL,\n      newUserURL,\n      requestSignUp\n    } = await parseState(c);\n    function redirectOnError(error2, description) {\n      const baseURL = errorURL ?? defaultErrorURL;\n      const params = new URLSearchParams({ error: error2 });\n      if (description) params.set(\"error_description\", description);\n      const sep = baseURL.includes(\"?\") ? \"&\" : \"?\";\n      const url = `${baseURL}${sep}${params.toString()}`;\n      throw c.redirect(url);\n    }\n    if (error) {\n      redirectOnError(error, error_description);\n    }\n    if (!code) {\n      c.context.logger.error(\"Code not found\");\n      throw redirectOnError(\"no_code\");\n    }\n    const provider = c.context.socialProviders.find(\n      (p) => p.id === c.params.id\n    );\n    if (!provider) {\n      c.context.logger.error(\n        \"Oauth provider with id\",\n        c.params.id,\n        \"not found\"\n      );\n      throw redirectOnError(\"oauth_provider_not_found\");\n    }\n    let tokens;\n    try {\n      tokens = await provider.validateAuthorizationCode({\n        code,\n        codeVerifier,\n        deviceId: device_id,\n        redirectURI: `${c.context.baseURL}/callback/${provider.id}`\n      });\n    } catch (e) {\n      c.context.logger.error(\"\", e);\n      throw redirectOnError(\"invalid_code\");\n    }\n    const userInfo = await provider.getUserInfo({\n      ...tokens,\n      user: c.body?.user ? (0,_better_auth_BTrSrKsi_mjs__WEBPACK_IMPORTED_MODULE_13__.s)(c.body.user) : void 0\n    }).then((res) => res?.user);\n    if (!userInfo) {\n      c.context.logger.error(\"Unable to get user info\");\n      return redirectOnError(\"unable_to_get_user_info\");\n    }\n    if (!callbackURL) {\n      c.context.logger.error(\"No callback URL found\");\n      throw redirectOnError(\"no_callback_url\");\n    }\n    if (link) {\n      const trustedProviders = c.context.options.account?.accountLinking?.trustedProviders;\n      const isTrustedProvider = trustedProviders?.includes(\n        provider.id\n      );\n      if (!isTrustedProvider && !userInfo.emailVerified || c.context.options.account?.accountLinking?.enabled === false) {\n        c.context.logger.error(\"Unable to link account - untrusted provider\");\n        return redirectOnError(\"unable_to_link_account\");\n      }\n      if (userInfo.email !== link.email && c.context.options.account?.accountLinking?.allowDifferentEmails !== true) {\n        return redirectOnError(\"email_doesn't_match\");\n      }\n      const existingAccount = await c.context.internalAdapter.findAccount(\n        String(userInfo.id)\n      );\n      if (existingAccount) {\n        if (existingAccount.userId.toString() !== link.userId.toString()) {\n          return redirectOnError(\"account_already_linked_to_different_user\");\n        }\n        const updateData = Object.fromEntries(\n          Object.entries({\n            accessToken: await setTokenUtil(tokens.accessToken, c.context),\n            refreshToken: await setTokenUtil(tokens.refreshToken, c.context),\n            idToken: tokens.idToken,\n            accessTokenExpiresAt: tokens.accessTokenExpiresAt,\n            refreshTokenExpiresAt: tokens.refreshTokenExpiresAt,\n            scope: tokens.scopes?.join(\",\")\n          }).filter(([_, value]) => value !== void 0)\n        );\n        await c.context.internalAdapter.updateAccount(\n          existingAccount.id,\n          updateData\n        );\n      } else {\n        const newAccount = await c.context.internalAdapter.createAccount(\n          {\n            userId: link.userId,\n            providerId: provider.id,\n            accountId: String(userInfo.id),\n            ...tokens,\n            accessToken: await setTokenUtil(tokens.accessToken, c.context),\n            refreshToken: await setTokenUtil(tokens.refreshToken, c.context),\n            scope: tokens.scopes?.join(\",\")\n          },\n          c\n        );\n        if (!newAccount) {\n          return redirectOnError(\"unable_to_link_account\");\n        }\n      }\n      let toRedirectTo2;\n      try {\n        const url = callbackURL;\n        toRedirectTo2 = url.toString();\n      } catch {\n        toRedirectTo2 = callbackURL;\n      }\n      throw c.redirect(toRedirectTo2);\n    }\n    if (!userInfo.email) {\n      c.context.logger.error(\n        \"Provider did not return email. This could be due to misconfiguration in the provider settings.\"\n      );\n      return redirectOnError(\"email_not_found\");\n    }\n    const result = await handleOAuthUserInfo(c, {\n      userInfo: {\n        ...userInfo,\n        id: String(userInfo.id),\n        email: userInfo.email,\n        name: userInfo.name || userInfo.email\n      },\n      account: {\n        providerId: provider.id,\n        accountId: String(userInfo.id),\n        ...tokens,\n        scope: tokens.scopes?.join(\",\")\n      },\n      callbackURL,\n      disableSignUp: provider.disableImplicitSignUp && !requestSignUp || provider.options?.disableSignUp,\n      overrideUserInfo: provider.options?.overrideUserInfoOnSignIn\n    });\n    if (result.error) {\n      c.context.logger.error(result.error.split(\" \").join(\"_\"));\n      return redirectOnError(result.error.split(\" \").join(\"_\"));\n    }\n    const { session, user } = result.data;\n    await (0,_better_auth_DiMXeqeq_mjs__WEBPACK_IMPORTED_MODULE_10__.s)(c, {\n      session,\n      user\n    });\n    let toRedirectTo;\n    try {\n      const url = result.isRegister ? newUserURL || callbackURL : callbackURL;\n      toRedirectTo = url.toString();\n    } catch {\n      toRedirectTo = result.isRegister ? newUserURL || callbackURL : callbackURL;\n    }\n    throw c.redirect(toRedirectTo);\n  }\n);\n\nconst signOut = (0,_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.a)(\n  \"/sign-out\",\n  {\n    method: \"POST\",\n    requireHeaders: true,\n    metadata: {\n      openapi: {\n        description: \"Sign out the current user\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    success: {\n                      type: \"boolean\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const sessionCookieToken = await ctx.getSignedCookie(\n      ctx.context.authCookies.sessionToken.name,\n      ctx.context.secret\n    );\n    if (!sessionCookieToken) {\n      (0,_better_auth_DiMXeqeq_mjs__WEBPACK_IMPORTED_MODULE_10__.d)(ctx);\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: _better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.B.FAILED_TO_GET_SESSION\n      });\n    }\n    await ctx.context.internalAdapter.deleteSession(sessionCookieToken);\n    (0,_better_auth_DiMXeqeq_mjs__WEBPACK_IMPORTED_MODULE_10__.d)(ctx);\n    return ctx.json({\n      success: true\n    });\n  }\n);\n\nfunction redirectError(ctx, callbackURL, query) {\n  const url = callbackURL ? new URL(callbackURL, ctx.baseURL) : new URL(`${ctx.baseURL}/error`);\n  if (query)\n    Object.entries(query).forEach(([k, v]) => url.searchParams.set(k, v));\n  return url.href;\n}\nfunction redirectCallback(ctx, callbackURL, query) {\n  const url = new URL(callbackURL, ctx.baseURL);\n  if (query)\n    Object.entries(query).forEach(([k, v]) => url.searchParams.set(k, v));\n  return url.href;\n}\nconst requestPasswordReset = (0,_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.a)(\n  \"/request-password-reset\",\n  {\n    method: \"POST\",\n    body: zod__WEBPACK_IMPORTED_MODULE_21__.object({\n      /**\n       * The email address of the user to send a password reset email to.\n       */\n      email: zod__WEBPACK_IMPORTED_MODULE_21__.email().meta({\n        description: \"The email address of the user to send a password reset email to\"\n      }),\n      /**\n       * The URL to redirect the user to reset their password.\n       * If the token isn't valid or expired, it'll be redirected with a query parameter `?\n       * error=INVALID_TOKEN`. If the token is valid, it'll be redirected with a query parameter `?\n       * token=VALID_TOKEN\n       */\n      redirectTo: zod__WEBPACK_IMPORTED_MODULE_21__.string().meta({\n        description: \"The URL to redirect the user to reset their password. If the token isn't valid or expired, it'll be redirected with a query parameter `?error=INVALID_TOKEN`. If the token is valid, it'll be redirected with a query parameter `?token=VALID_TOKEN\"\n      }).optional()\n    }),\n    metadata: {\n      openapi: {\n        description: \"Send a password reset email to the user\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\"\n                    },\n                    message: {\n                      type: \"string\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    if (!ctx.context.options.emailAndPassword?.sendResetPassword) {\n      ctx.context.logger.error(\n        \"Reset password isn't enabled.Please pass an emailAndPassword.sendResetPassword function in your auth config!\"\n      );\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: \"Reset password isn't enabled\"\n      });\n    }\n    const { email, redirectTo } = ctx.body;\n    const user = await ctx.context.internalAdapter.findUserByEmail(email, {\n      includeAccounts: true\n    });\n    if (!user) {\n      ctx.context.logger.error(\"Reset Password: User not found\", { email });\n      return ctx.json({\n        status: true,\n        message: \"If this email exists in our system, check your email for the reset link\"\n      });\n    }\n    const defaultExpiresIn = 60 * 60 * 1;\n    const expiresAt = (0,_better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_2__.g)(\n      ctx.context.options.emailAndPassword.resetPasswordTokenExpiresIn || defaultExpiresIn,\n      \"sec\"\n    );\n    const verificationToken = (0,_better_auth_BUPPRXfK_mjs__WEBPACK_IMPORTED_MODULE_14__.g)(24);\n    await ctx.context.internalAdapter.createVerificationValue(\n      {\n        value: user.user.id,\n        identifier: `reset-password:${verificationToken}`,\n        expiresAt\n      },\n      ctx\n    );\n    const callbackURL = redirectTo ? encodeURIComponent(redirectTo) : \"\";\n    const url = `${ctx.context.baseURL}/reset-password/${verificationToken}?callbackURL=${callbackURL}`;\n    await ctx.context.options.emailAndPassword.sendResetPassword(\n      {\n        user: user.user,\n        url,\n        token: verificationToken\n      },\n      ctx.request\n    );\n    return ctx.json({\n      status: true,\n      message: \"If this email exists in our system, check your email for the reset link\"\n    });\n  }\n);\nconst forgetPassword = (0,_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.a)(\n  \"/forget-password\",\n  {\n    method: \"POST\",\n    body: zod__WEBPACK_IMPORTED_MODULE_21__.object({\n      /**\n       * The email address of the user to send a password reset email to.\n       */\n      email: zod__WEBPACK_IMPORTED_MODULE_21__.string().email().meta({\n        description: \"The email address of the user to send a password reset email to\"\n      }),\n      /**\n       * The URL to redirect the user to reset their password.\n       * If the token isn't valid or expired, it'll be redirected with a query parameter `?\n       * error=INVALID_TOKEN`. If the token is valid, it'll be redirected with a query parameter `?\n       * token=VALID_TOKEN\n       */\n      redirectTo: zod__WEBPACK_IMPORTED_MODULE_21__.string().meta({\n        description: \"The URL to redirect the user to reset their password. If the token isn't valid or expired, it'll be redirected with a query parameter `?error=INVALID_TOKEN`. If the token is valid, it'll be redirected with a query parameter `?token=VALID_TOKEN\"\n      }).optional()\n    }),\n    metadata: {\n      openapi: {\n        description: \"Send a password reset email to the user\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\"\n                    },\n                    message: {\n                      type: \"string\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    if (!ctx.context.options.emailAndPassword?.sendResetPassword) {\n      ctx.context.logger.error(\n        \"Reset password isn't enabled.Please pass an emailAndPassword.sendResetPassword function in your auth config!\"\n      );\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: \"Reset password isn't enabled\"\n      });\n    }\n    const { email, redirectTo } = ctx.body;\n    const user = await ctx.context.internalAdapter.findUserByEmail(email, {\n      includeAccounts: true\n    });\n    if (!user) {\n      ctx.context.logger.error(\"Reset Password: User not found\", { email });\n      return ctx.json({\n        status: true,\n        message: \"If this email exists in our system, check your email for the reset link\"\n      });\n    }\n    const defaultExpiresIn = 60 * 60 * 1;\n    const expiresAt = (0,_better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_2__.g)(\n      ctx.context.options.emailAndPassword.resetPasswordTokenExpiresIn || defaultExpiresIn,\n      \"sec\"\n    );\n    const verificationToken = (0,_better_auth_BUPPRXfK_mjs__WEBPACK_IMPORTED_MODULE_14__.g)(24);\n    await ctx.context.internalAdapter.createVerificationValue(\n      {\n        value: user.user.id,\n        identifier: `reset-password:${verificationToken}`,\n        expiresAt\n      },\n      ctx\n    );\n    const callbackURL = redirectTo ? encodeURIComponent(redirectTo) : \"\";\n    const url = `${ctx.context.baseURL}/reset-password/${verificationToken}?callbackURL=${callbackURL}`;\n    await ctx.context.options.emailAndPassword.sendResetPassword(\n      {\n        user: user.user,\n        url,\n        token: verificationToken\n      },\n      ctx.request\n    );\n    return ctx.json({\n      status: true\n    });\n  }\n);\nconst requestPasswordResetCallback = (0,_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.a)(\n  \"/reset-password/:token\",\n  {\n    method: \"GET\",\n    query: zod__WEBPACK_IMPORTED_MODULE_21__.object({\n      callbackURL: zod__WEBPACK_IMPORTED_MODULE_21__.string().meta({\n        description: \"The URL to redirect the user to reset their password\"\n      })\n    }),\n    use: [originCheck((ctx) => ctx.query.callbackURL)],\n    metadata: {\n      openapi: {\n        description: \"Redirects the user to the callback URL with the token\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    token: {\n                      type: \"string\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const { token } = ctx.params;\n    const { callbackURL } = ctx.query;\n    if (!token || !callbackURL) {\n      throw ctx.redirect(\n        redirectError(ctx.context, callbackURL, { error: \"INVALID_TOKEN\" })\n      );\n    }\n    const verification = await ctx.context.internalAdapter.findVerificationValue(\n      `reset-password:${token}`\n    );\n    if (!verification || verification.expiresAt < /* @__PURE__ */ new Date()) {\n      throw ctx.redirect(\n        redirectError(ctx.context, callbackURL, { error: \"INVALID_TOKEN\" })\n      );\n    }\n    throw ctx.redirect(redirectCallback(ctx.context, callbackURL, { token }));\n  }\n);\nconst forgetPasswordCallback = requestPasswordResetCallback;\nconst resetPassword = (0,_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.a)(\n  \"/reset-password\",\n  {\n    method: \"POST\",\n    query: zod__WEBPACK_IMPORTED_MODULE_21__.object({\n      token: zod__WEBPACK_IMPORTED_MODULE_21__.string().optional()\n    }).optional(),\n    body: zod__WEBPACK_IMPORTED_MODULE_21__.object({\n      newPassword: zod__WEBPACK_IMPORTED_MODULE_21__.string().meta({\n        description: \"The new password to set\"\n      }),\n      token: zod__WEBPACK_IMPORTED_MODULE_21__.string().meta({\n        description: \"The token to reset the password\"\n      }).optional()\n    }),\n    metadata: {\n      openapi: {\n        description: \"Reset the password for a user\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const token = ctx.body.token || ctx.query?.token;\n    if (!token) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: _better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.B.INVALID_TOKEN\n      });\n    }\n    const { newPassword } = ctx.body;\n    const minLength = ctx.context.password?.config.minPasswordLength;\n    const maxLength = ctx.context.password?.config.maxPasswordLength;\n    if (newPassword.length < minLength) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: _better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.B.PASSWORD_TOO_SHORT\n      });\n    }\n    if (newPassword.length > maxLength) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: _better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.B.PASSWORD_TOO_LONG\n      });\n    }\n    const id = `reset-password:${token}`;\n    const verification = await ctx.context.internalAdapter.findVerificationValue(id);\n    if (!verification || verification.expiresAt < /* @__PURE__ */ new Date()) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: _better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.B.INVALID_TOKEN\n      });\n    }\n    const userId = verification.value;\n    const hashedPassword = await ctx.context.password.hash(newPassword);\n    const accounts = await ctx.context.internalAdapter.findAccounts(userId);\n    const account = accounts.find((ac) => ac.providerId === \"credential\");\n    if (!account) {\n      await ctx.context.internalAdapter.createAccount(\n        {\n          userId,\n          providerId: \"credential\",\n          password: hashedPassword,\n          accountId: userId\n        },\n        ctx\n      );\n    } else {\n      await ctx.context.internalAdapter.updatePassword(\n        userId,\n        hashedPassword,\n        ctx\n      );\n    }\n    await ctx.context.internalAdapter.deleteVerificationValue(verification.id);\n    if (ctx.context.options.emailAndPassword?.onPasswordReset) {\n      const user = await ctx.context.internalAdapter.findUserById(userId);\n      if (user) {\n        await ctx.context.options.emailAndPassword.onPasswordReset(\n          {\n            user\n          },\n          ctx.request\n        );\n      }\n    }\n    if (ctx.context.options.emailAndPassword?.revokeSessionsOnPasswordReset) {\n      await ctx.context.internalAdapter.deleteSessions(userId);\n    }\n    return ctx.json({\n      status: true\n    });\n  }\n);\n\nconst updateUser = () => (0,_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.a)(\n  \"/update-user\",\n  {\n    method: \"POST\",\n    body: zod__WEBPACK_IMPORTED_MODULE_21__.record(\n      zod__WEBPACK_IMPORTED_MODULE_21__.string().meta({\n        description: \"Field name must be a string\"\n      }),\n      zod__WEBPACK_IMPORTED_MODULE_21__.any()\n    ),\n    use: [_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.s],\n    metadata: {\n      $Infer: {\n        body: {}\n      },\n      openapi: {\n        description: \"Update the current user\",\n        requestBody: {\n          content: {\n            \"application/json\": {\n              schema: {\n                type: \"object\",\n                properties: {\n                  name: {\n                    type: \"string\",\n                    description: \"The name of the user\"\n                  },\n                  image: {\n                    type: \"string\",\n                    description: \"The image of the user\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\",\n                      description: \"Indicates if the update was successful\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const body = ctx.body;\n    if (body.email) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: _better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.B.EMAIL_CAN_NOT_BE_UPDATED\n      });\n    }\n    const { name, image, ...rest } = body;\n    const session = ctx.context.session;\n    if (image === void 0 && name === void 0 && Object.keys(rest).length === 0) {\n      return ctx.json({\n        status: true\n      });\n    }\n    const user = await ctx.context.internalAdapter.updateUser(\n      session.user.id,\n      {\n        name,\n        image,\n        ...rest\n      },\n      ctx\n    );\n    await (0,_better_auth_DiMXeqeq_mjs__WEBPACK_IMPORTED_MODULE_10__.s)(ctx, {\n      session: session.session,\n      user\n    });\n    return ctx.json({\n      status: true\n    });\n  }\n);\nconst changePassword = (0,_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.a)(\n  \"/change-password\",\n  {\n    method: \"POST\",\n    body: zod__WEBPACK_IMPORTED_MODULE_21__.object({\n      /**\n       * The new password to set\n       */\n      newPassword: zod__WEBPACK_IMPORTED_MODULE_21__.string().meta({\n        description: \"The new password to set\"\n      }),\n      /**\n       * The current password of the user\n       */\n      currentPassword: zod__WEBPACK_IMPORTED_MODULE_21__.string().meta({\n        description: \"The current password is required\"\n      }),\n      /**\n       * revoke all sessions that are not the\n       * current one logged in by the user\n       */\n      revokeOtherSessions: zod__WEBPACK_IMPORTED_MODULE_21__.boolean().meta({\n        description: \"Must be a boolean value\"\n      }).optional()\n    }),\n    use: [_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.i],\n    metadata: {\n      openapi: {\n        description: \"Change the password of the user\",\n        responses: {\n          \"200\": {\n            description: \"Password successfully changed\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    token: {\n                      type: \"string\",\n                      nullable: true,\n                      // Only present if revokeOtherSessions is true\n                      description: \"New session token if other sessions were revoked\"\n                    },\n                    user: {\n                      type: \"object\",\n                      properties: {\n                        id: {\n                          type: \"string\",\n                          description: \"The unique identifier of the user\"\n                        },\n                        email: {\n                          type: \"string\",\n                          format: \"email\",\n                          description: \"The email address of the user\"\n                        },\n                        name: {\n                          type: \"string\",\n                          description: \"The name of the user\"\n                        },\n                        image: {\n                          type: \"string\",\n                          format: \"uri\",\n                          nullable: true,\n                          description: \"The profile image URL of the user\"\n                        },\n                        emailVerified: {\n                          type: \"boolean\",\n                          description: \"Whether the email has been verified\"\n                        },\n                        createdAt: {\n                          type: \"string\",\n                          format: \"date-time\",\n                          description: \"When the user was created\"\n                        },\n                        updatedAt: {\n                          type: \"string\",\n                          format: \"date-time\",\n                          description: \"When the user was last updated\"\n                        }\n                      },\n                      required: [\n                        \"id\",\n                        \"email\",\n                        \"name\",\n                        \"emailVerified\",\n                        \"createdAt\",\n                        \"updatedAt\"\n                      ]\n                    }\n                  },\n                  required: [\"user\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const { newPassword, currentPassword, revokeOtherSessions } = ctx.body;\n    const session = ctx.context.session;\n    const minPasswordLength = ctx.context.password.config.minPasswordLength;\n    if (newPassword.length < minPasswordLength) {\n      ctx.context.logger.error(\"Password is too short\");\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: _better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.B.PASSWORD_TOO_SHORT\n      });\n    }\n    const maxPasswordLength = ctx.context.password.config.maxPasswordLength;\n    if (newPassword.length > maxPasswordLength) {\n      ctx.context.logger.error(\"Password is too long\");\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: _better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.B.PASSWORD_TOO_LONG\n      });\n    }\n    const accounts = await ctx.context.internalAdapter.findAccounts(\n      session.user.id\n    );\n    const account = accounts.find(\n      (account2) => account2.providerId === \"credential\" && account2.password\n    );\n    if (!account || !account.password) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: _better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.B.CREDENTIAL_ACCOUNT_NOT_FOUND\n      });\n    }\n    const passwordHash = await ctx.context.password.hash(newPassword);\n    const verify = await ctx.context.password.verify({\n      hash: account.password,\n      password: currentPassword\n    });\n    if (!verify) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: _better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.B.INVALID_PASSWORD\n      });\n    }\n    await ctx.context.internalAdapter.updateAccount(account.id, {\n      password: passwordHash\n    });\n    let token = null;\n    if (revokeOtherSessions) {\n      await ctx.context.internalAdapter.deleteSessions(session.user.id);\n      const newSession = await ctx.context.internalAdapter.createSession(\n        session.user.id,\n        ctx\n      );\n      if (!newSession) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"INTERNAL_SERVER_ERROR\", {\n          message: _better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.B.FAILED_TO_GET_SESSION\n        });\n      }\n      await (0,_better_auth_DiMXeqeq_mjs__WEBPACK_IMPORTED_MODULE_10__.s)(ctx, {\n        session: newSession,\n        user: session.user\n      });\n      token = newSession.token;\n    }\n    return ctx.json({\n      token,\n      user: {\n        id: session.user.id,\n        email: session.user.email,\n        name: session.user.name,\n        image: session.user.image,\n        emailVerified: session.user.emailVerified,\n        createdAt: session.user.createdAt,\n        updatedAt: session.user.updatedAt\n      }\n    });\n  }\n);\nconst setPassword = (0,_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.a)(\n  \"/set-password\",\n  {\n    method: \"POST\",\n    body: zod__WEBPACK_IMPORTED_MODULE_21__.object({\n      /**\n       * The new password to set\n       */\n      newPassword: zod__WEBPACK_IMPORTED_MODULE_21__.string().meta({\n        description: \"The new password to set is required\"\n      })\n    }),\n    metadata: {\n      SERVER_ONLY: true\n    },\n    use: [_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.i]\n  },\n  async (ctx) => {\n    const { newPassword } = ctx.body;\n    const session = ctx.context.session;\n    const minPasswordLength = ctx.context.password.config.minPasswordLength;\n    if (newPassword.length < minPasswordLength) {\n      ctx.context.logger.error(\"Password is too short\");\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: _better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.B.PASSWORD_TOO_SHORT\n      });\n    }\n    const maxPasswordLength = ctx.context.password.config.maxPasswordLength;\n    if (newPassword.length > maxPasswordLength) {\n      ctx.context.logger.error(\"Password is too long\");\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: _better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.B.PASSWORD_TOO_LONG\n      });\n    }\n    const accounts = await ctx.context.internalAdapter.findAccounts(\n      session.user.id\n    );\n    const account = accounts.find(\n      (account2) => account2.providerId === \"credential\" && account2.password\n    );\n    const passwordHash = await ctx.context.password.hash(newPassword);\n    if (!account) {\n      await ctx.context.internalAdapter.linkAccount(\n        {\n          userId: session.user.id,\n          providerId: \"credential\",\n          accountId: session.user.id,\n          password: passwordHash\n        },\n        ctx\n      );\n      return ctx.json({\n        status: true\n      });\n    }\n    throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n      message: \"user already has a password\"\n    });\n  }\n);\nconst deleteUser = (0,_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.a)(\n  \"/delete-user\",\n  {\n    method: \"POST\",\n    use: [_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.i],\n    body: zod__WEBPACK_IMPORTED_MODULE_21__.object({\n      /**\n       * The callback URL to redirect to after the user is deleted\n       * this is only used on delete user callback\n       */\n      callbackURL: zod__WEBPACK_IMPORTED_MODULE_21__.string().meta({\n        description: \"The callback URL to redirect to after the user is deleted\"\n      }).optional(),\n      /**\n       * The password of the user. If the password isn't provided, session freshness\n       * will be checked.\n       */\n      password: zod__WEBPACK_IMPORTED_MODULE_21__.string().meta({\n        description: \"The password of the user is required to delete the user\"\n      }).optional(),\n      /**\n       * The token to delete the user. If the token is provided, the user will be deleted\n       */\n      token: zod__WEBPACK_IMPORTED_MODULE_21__.string().meta({\n        description: \"The token to delete the user is required\"\n      }).optional()\n    }),\n    metadata: {\n      openapi: {\n        description: \"Delete the user\",\n        responses: {\n          \"200\": {\n            description: \"User deletion processed successfully\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    success: {\n                      type: \"boolean\",\n                      description: \"Indicates if the operation was successful\"\n                    },\n                    message: {\n                      type: \"string\",\n                      enum: [\"User deleted\", \"Verification email sent\"],\n                      description: \"Status message of the deletion process\"\n                    }\n                  },\n                  required: [\"success\", \"message\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    if (!ctx.context.options.user?.deleteUser?.enabled) {\n      ctx.context.logger.error(\n        \"Delete user is disabled. Enable it in the options\",\n        {\n          session: ctx.context.session\n        }\n      );\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"NOT_FOUND\");\n    }\n    const session = ctx.context.session;\n    if (ctx.body.password) {\n      const accounts = await ctx.context.internalAdapter.findAccounts(\n        session.user.id\n      );\n      const account = accounts.find(\n        (account2) => account2.providerId === \"credential\" && account2.password\n      );\n      if (!account || !account.password) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n          message: _better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.B.CREDENTIAL_ACCOUNT_NOT_FOUND\n        });\n      }\n      const verify = await ctx.context.password.verify({\n        hash: account.password,\n        password: ctx.body.password\n      });\n      if (!verify) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n          message: _better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.B.INVALID_PASSWORD\n        });\n      }\n    }\n    if (ctx.body.token) {\n      await deleteUserCallback({\n        ...ctx,\n        query: {\n          token: ctx.body.token\n        }\n      });\n      return ctx.json({\n        success: true,\n        message: \"User deleted\"\n      });\n    }\n    if (ctx.context.options.user.deleteUser?.sendDeleteAccountVerification) {\n      const token = (0,_better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_8__.g)(32, \"0-9\", \"a-z\");\n      await ctx.context.internalAdapter.createVerificationValue(\n        {\n          value: session.user.id,\n          identifier: `delete-account-${token}`,\n          expiresAt: new Date(\n            Date.now() + (ctx.context.options.user.deleteUser?.deleteTokenExpiresIn || 60 * 60 * 24) * 1e3\n          )\n        },\n        ctx\n      );\n      const url = `${ctx.context.baseURL}/delete-user/callback?token=${token}&callbackURL=${ctx.body.callbackURL || \"/\"}`;\n      await ctx.context.options.user.deleteUser.sendDeleteAccountVerification(\n        {\n          user: session.user,\n          url,\n          token\n        },\n        ctx.request\n      );\n      return ctx.json({\n        success: true,\n        message: \"Verification email sent\"\n      });\n    }\n    if (!ctx.body.password && ctx.context.sessionConfig.freshAge !== 0) {\n      const currentAge = new Date(session.session.createdAt).getTime();\n      const freshAge = ctx.context.sessionConfig.freshAge * 1e3;\n      const now = Date.now();\n      if (now - currentAge > freshAge * 1e3) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n          message: _better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.B.SESSION_EXPIRED\n        });\n      }\n    }\n    const beforeDelete = ctx.context.options.user.deleteUser?.beforeDelete;\n    if (beforeDelete) {\n      await beforeDelete(session.user, ctx.request);\n    }\n    await ctx.context.internalAdapter.deleteUser(session.user.id);\n    await ctx.context.internalAdapter.deleteSessions(session.user.id);\n    await ctx.context.internalAdapter.deleteAccounts(session.user.id);\n    (0,_better_auth_DiMXeqeq_mjs__WEBPACK_IMPORTED_MODULE_10__.d)(ctx);\n    const afterDelete = ctx.context.options.user.deleteUser?.afterDelete;\n    if (afterDelete) {\n      await afterDelete(session.user, ctx.request);\n    }\n    return ctx.json({\n      success: true,\n      message: \"User deleted\"\n    });\n  }\n);\nconst deleteUserCallback = (0,_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.a)(\n  \"/delete-user/callback\",\n  {\n    method: \"GET\",\n    query: zod__WEBPACK_IMPORTED_MODULE_21__.object({\n      token: zod__WEBPACK_IMPORTED_MODULE_21__.string().meta({\n        description: \"The token to verify the deletion request\"\n      }),\n      callbackURL: zod__WEBPACK_IMPORTED_MODULE_21__.string().meta({\n        description: \"The URL to redirect to after deletion\"\n      }).optional()\n    }),\n    use: [originCheck((ctx) => ctx.query.callbackURL)],\n    metadata: {\n      openapi: {\n        description: \"Callback to complete user deletion with verification token\",\n        responses: {\n          \"200\": {\n            description: \"User successfully deleted\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    success: {\n                      type: \"boolean\",\n                      description: \"Indicates if the deletion was successful\"\n                    },\n                    message: {\n                      type: \"string\",\n                      enum: [\"User deleted\"],\n                      description: \"Confirmation message\"\n                    }\n                  },\n                  required: [\"success\", \"message\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    if (!ctx.context.options.user?.deleteUser?.enabled) {\n      ctx.context.logger.error(\n        \"Delete user is disabled. Enable it in the options\"\n      );\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"NOT_FOUND\");\n    }\n    const session = await (0,_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(ctx);\n    if (!session) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"NOT_FOUND\", {\n        message: _better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.B.FAILED_TO_GET_USER_INFO\n      });\n    }\n    const token = await ctx.context.internalAdapter.findVerificationValue(\n      `delete-account-${ctx.query.token}`\n    );\n    if (!token || token.expiresAt < /* @__PURE__ */ new Date()) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"NOT_FOUND\", {\n        message: _better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.B.INVALID_TOKEN\n      });\n    }\n    if (token.value !== session.user.id) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"NOT_FOUND\", {\n        message: _better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.B.INVALID_TOKEN\n      });\n    }\n    const beforeDelete = ctx.context.options.user.deleteUser?.beforeDelete;\n    if (beforeDelete) {\n      await beforeDelete(session.user, ctx.request);\n    }\n    await ctx.context.internalAdapter.deleteUser(session.user.id);\n    await ctx.context.internalAdapter.deleteSessions(session.user.id);\n    await ctx.context.internalAdapter.deleteAccounts(session.user.id);\n    await ctx.context.internalAdapter.deleteVerificationValue(token.id);\n    (0,_better_auth_DiMXeqeq_mjs__WEBPACK_IMPORTED_MODULE_10__.d)(ctx);\n    const afterDelete = ctx.context.options.user.deleteUser?.afterDelete;\n    if (afterDelete) {\n      await afterDelete(session.user, ctx.request);\n    }\n    if (ctx.query.callbackURL) {\n      throw ctx.redirect(ctx.query.callbackURL || \"/\");\n    }\n    return ctx.json({\n      success: true,\n      message: \"User deleted\"\n    });\n  }\n);\nconst changeEmail = (0,_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.a)(\n  \"/change-email\",\n  {\n    method: \"POST\",\n    body: zod__WEBPACK_IMPORTED_MODULE_21__.object({\n      newEmail: zod__WEBPACK_IMPORTED_MODULE_21__.email().meta({\n        description: \"The new email address to set must be a valid email address\"\n      }),\n      callbackURL: zod__WEBPACK_IMPORTED_MODULE_21__.string().meta({\n        description: \"The URL to redirect to after email verification\"\n      }).optional()\n    }),\n    use: [_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.i],\n    metadata: {\n      openapi: {\n        responses: {\n          \"200\": {\n            description: \"Email change request processed successfully\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\",\n                      description: \"Indicates if the request was successful\"\n                    },\n                    message: {\n                      type: \"string\",\n                      enum: [\"Email updated\", \"Verification email sent\"],\n                      description: \"Status message of the email change process\",\n                      nullable: true\n                    }\n                  },\n                  required: [\"status\"]\n                }\n              }\n            }\n          },\n          \"422\": {\n            description: \"Unprocessable Entity. Email already exists\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    message: {\n                      type: \"string\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    if (!ctx.context.options.user?.changeEmail?.enabled) {\n      ctx.context.logger.error(\"Change email is disabled.\");\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: \"Change email is disabled\"\n      });\n    }\n    const newEmail = ctx.body.newEmail.toLowerCase();\n    if (newEmail === ctx.context.session.user.email) {\n      ctx.context.logger.error(\"Email is the same\");\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: \"Email is the same\"\n      });\n    }\n    const existingUser = await ctx.context.internalAdapter.findUserByEmail(newEmail);\n    if (existingUser) {\n      ctx.context.logger.error(\"Email already exists\");\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: \"Couldn't update your email\"\n      });\n    }\n    if (ctx.context.session.user.emailVerified !== true) {\n      const existing = await ctx.context.internalAdapter.findUserByEmail(newEmail);\n      if (existing) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"UNPROCESSABLE_ENTITY\", {\n          message: _better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.B.USER_ALREADY_EXISTS_USE_ANOTHER_EMAIL\n        });\n      }\n      await ctx.context.internalAdapter.updateUserByEmail(\n        ctx.context.session.user.email,\n        {\n          email: newEmail\n        },\n        ctx\n      );\n      await (0,_better_auth_DiMXeqeq_mjs__WEBPACK_IMPORTED_MODULE_10__.s)(ctx, {\n        session: ctx.context.session.session,\n        user: {\n          ...ctx.context.session.user,\n          email: newEmail\n        }\n      });\n      if (ctx.context.options.emailVerification?.sendVerificationEmail) {\n        const token2 = await createEmailVerificationToken(\n          ctx.context.secret,\n          newEmail,\n          void 0,\n          ctx.context.options.emailVerification?.expiresIn\n        );\n        const url2 = `${ctx.context.baseURL}/verify-email?token=${token2}&callbackURL=${ctx.body.callbackURL || \"/\"}`;\n        await ctx.context.options.emailVerification.sendVerificationEmail(\n          {\n            user: {\n              ...ctx.context.session.user,\n              email: newEmail\n            },\n            url: url2,\n            token: token2\n          },\n          ctx.request\n        );\n      }\n      return ctx.json({\n        status: true\n      });\n    }\n    if (!ctx.context.options.user.changeEmail.sendChangeEmailVerification) {\n      ctx.context.logger.error(\"Verification email isn't enabled.\");\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: \"Verification email isn't enabled\"\n      });\n    }\n    const token = await createEmailVerificationToken(\n      ctx.context.secret,\n      ctx.context.session.user.email,\n      newEmail,\n      ctx.context.options.emailVerification?.expiresIn\n    );\n    const url = `${ctx.context.baseURL}/verify-email?token=${token}&callbackURL=${ctx.body.callbackURL || \"/\"}`;\n    await ctx.context.options.user.changeEmail.sendChangeEmailVerification(\n      {\n        user: ctx.context.session.user,\n        newEmail,\n        url,\n        token\n      },\n      ctx.request\n    );\n    return ctx.json({\n      status: true\n    });\n  }\n);\n\nfunction sanitize(input) {\n  return input.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&#39;\");\n}\nconst html = (errorCode = \"Unknown\") => `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Authentication Error</title>\n    <style>\n        :root {\n            --bg-color: #f8f9fa;\n            --text-color: #212529;\n            --accent-color: #000000;\n            --error-color: #dc3545;\n            --border-color: #e9ecef;\n        }\n        body {\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;\n            background-color: var(--bg-color);\n            color: var(--text-color);\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            margin: 0;\n            line-height: 1.5;\n        }\n        .error-container {\n            background-color: #ffffff;\n            border-radius: 12px;\n            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);\n            padding: 2.5rem;\n            text-align: center;\n            max-width: 90%;\n            width: 400px;\n        }\n        h1 {\n            color: var(--error-color);\n            font-size: 1.75rem;\n            margin-bottom: 1rem;\n            font-weight: 600;\n        }\n        p {\n            margin-bottom: 1.5rem;\n            color: #495057;\n        }\n        .btn {\n            background-color: var(--accent-color);\n            color: #ffffff;\n            text-decoration: none;\n            padding: 0.75rem 1.5rem;\n            border-radius: 6px;\n            transition: all 0.3s ease;\n            display: inline-block;\n            font-weight: 500;\n            border: 2px solid var(--accent-color);\n        }\n        .btn:hover {\n            background-color: #131721;\n        }\n        .error-code {\n            font-size: 0.875rem;\n            color: #6c757d;\n            margin-top: 1.5rem;\n            padding-top: 1.5rem;\n            border-top: 1px solid var(--border-color);\n        }\n        .icon {\n            font-size: 3rem;\n            margin-bottom: 1rem;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"error-container\">\n        <div class=\"icon\">\\u26A0\\uFE0F</div>\n        <h1>Better Auth Error</h1>\n        <p>We encountered an issue while processing your request. Please try again or contact the application owner if the problem persists.</p>\n        <a href=\"/\" id=\"returnLink\" class=\"btn\">Return to Application</a>\n        <div class=\"error-code\">Error Code: <span id=\"errorCode\">${sanitize(\n  errorCode\n)}</span></div>\n    </div>\n</body>\n</html>`;\nconst error = (0,_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.a)(\n  \"/error\",\n  {\n    method: \"GET\",\n    metadata: {\n      ...HIDE_METADATA,\n      openapi: {\n        description: \"Displays an error page\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"text/html\": {\n                schema: {\n                  type: \"string\",\n                  description: \"The HTML content of the error page\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (c) => {\n    const query = new URL(c.request?.url || \"\").searchParams.get(\"error\") || \"Unknown\";\n    return new Response(html(query), {\n      headers: {\n        \"Content-Type\": \"text/html\"\n      }\n    });\n  }\n);\n\nconst ok = (0,_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.a)(\n  \"/ok\",\n  {\n    method: \"GET\",\n    metadata: {\n      ...HIDE_METADATA,\n      openapi: {\n        description: \"Check if the API is working\",\n        responses: {\n          \"200\": {\n            description: \"API is working\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    ok: {\n                      type: \"boolean\",\n                      description: \"Indicates if the API is working\"\n                    }\n                  },\n                  required: [\"ok\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    return ctx.json({\n      ok: true\n    });\n  }\n);\n\nconst listUserAccounts = (0,_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.a)(\n  \"/list-accounts\",\n  {\n    method: \"GET\",\n    use: [_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.s],\n    metadata: {\n      openapi: {\n        description: \"List all accounts linked to the user\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"array\",\n                  items: {\n                    type: \"object\",\n                    properties: {\n                      id: {\n                        type: \"string\"\n                      },\n                      providerId: {\n                        type: \"string\"\n                      },\n                      createdAt: {\n                        type: \"string\",\n                        format: \"date-time\"\n                      },\n                      updatedAt: {\n                        type: \"string\",\n                        format: \"date-time\"\n                      },\n                      accountId: {\n                        type: \"string\"\n                      },\n                      scopes: {\n                        type: \"array\",\n                        items: {\n                          type: \"string\"\n                        }\n                      }\n                    },\n                    required: [\n                      \"id\",\n                      \"providerId\",\n                      \"createdAt\",\n                      \"updatedAt\",\n                      \"accountId\",\n                      \"scopes\"\n                    ]\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (c) => {\n    const session = c.context.session;\n    const accounts = await c.context.internalAdapter.findAccounts(\n      session.user.id\n    );\n    return c.json(\n      accounts.map((a) => ({\n        id: a.id,\n        providerId: a.providerId,\n        createdAt: a.createdAt,\n        updatedAt: a.updatedAt,\n        accountId: a.accountId,\n        scopes: a.scope?.split(\",\") || []\n      }))\n    );\n  }\n);\nconst linkSocialAccount = (0,_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.a)(\n  \"/link-social\",\n  {\n    method: \"POST\",\n    requireHeaders: true,\n    body: zod__WEBPACK_IMPORTED_MODULE_21__.object({\n      /**\n       * Callback URL to redirect to after the user has signed in.\n       */\n      callbackURL: zod__WEBPACK_IMPORTED_MODULE_21__.string().meta({\n        description: \"The URL to redirect to after the user has signed in\"\n      }).optional(),\n      /**\n       * OAuth2 provider to use\n       */\n      provider: SocialProviderListEnum,\n      /**\n       * ID Token for direct authentication without redirect\n       */\n      idToken: zod__WEBPACK_IMPORTED_MODULE_21__.object({\n        token: zod__WEBPACK_IMPORTED_MODULE_21__.string(),\n        nonce: zod__WEBPACK_IMPORTED_MODULE_21__.string().optional(),\n        accessToken: zod__WEBPACK_IMPORTED_MODULE_21__.string().optional(),\n        refreshToken: zod__WEBPACK_IMPORTED_MODULE_21__.string().optional(),\n        scopes: zod__WEBPACK_IMPORTED_MODULE_21__.array(zod__WEBPACK_IMPORTED_MODULE_21__.string()).optional()\n      }).optional(),\n      /**\n       * Whether to allow sign up for new users\n       */\n      requestSignUp: zod__WEBPACK_IMPORTED_MODULE_21__.boolean().optional(),\n      /**\n       * Additional scopes to request when linking the account.\n       * This is useful for requesting additional permissions when\n       * linking a social account compared to the initial authentication.\n       */\n      scopes: zod__WEBPACK_IMPORTED_MODULE_21__.array(zod__WEBPACK_IMPORTED_MODULE_21__.string()).meta({\n        description: \"Additional scopes to request from the provider\"\n      }).optional(),\n      /**\n       * The URL to redirect to if there is an error during the link process.\n       */\n      errorCallbackURL: zod__WEBPACK_IMPORTED_MODULE_21__.string().meta({\n        description: \"The URL to redirect to if there is an error during the link process\"\n      }).optional(),\n      /**\n       * Disable automatic redirection to the provider\n       *\n       * This is useful if you want to handle the redirection\n       * yourself like in a popup or a different tab.\n       */\n      disableRedirect: zod__WEBPACK_IMPORTED_MODULE_21__.boolean().meta({\n        description: \"Disable automatic redirection to the provider. Useful for handling the redirection yourself\"\n      }).optional()\n    }),\n    use: [_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.s],\n    metadata: {\n      openapi: {\n        description: \"Link a social account to the user\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    url: {\n                      type: \"string\",\n                      description: \"The authorization URL to redirect the user to\"\n                    },\n                    redirect: {\n                      type: \"boolean\",\n                      description: \"Indicates if the user should be redirected to the authorization URL\"\n                    },\n                    status: {\n                      type: \"boolean\"\n                    }\n                  },\n                  required: [\"redirect\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (c) => {\n    const session = c.context.session;\n    const provider = c.context.socialProviders.find(\n      (p) => p.id === c.body.provider\n    );\n    if (!provider) {\n      c.context.logger.error(\n        \"Provider not found. Make sure to add the provider in your auth config\",\n        {\n          provider: c.body.provider\n        }\n      );\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"NOT_FOUND\", {\n        message: _better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.B.PROVIDER_NOT_FOUND\n      });\n    }\n    if (c.body.idToken) {\n      if (!provider.verifyIdToken) {\n        c.context.logger.error(\n          \"Provider does not support id token verification\",\n          {\n            provider: c.body.provider\n          }\n        );\n        throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"NOT_FOUND\", {\n          message: _better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.B.ID_TOKEN_NOT_SUPPORTED\n        });\n      }\n      const { token, nonce } = c.body.idToken;\n      const valid = await provider.verifyIdToken(token, nonce);\n      if (!valid) {\n        c.context.logger.error(\"Invalid id token\", {\n          provider: c.body.provider\n        });\n        throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"UNAUTHORIZED\", {\n          message: _better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.B.INVALID_TOKEN\n        });\n      }\n      const linkingUserInfo = await provider.getUserInfo({\n        idToken: token,\n        accessToken: c.body.idToken.accessToken,\n        refreshToken: c.body.idToken.refreshToken\n      });\n      if (!linkingUserInfo || !linkingUserInfo?.user) {\n        c.context.logger.error(\"Failed to get user info\", {\n          provider: c.body.provider\n        });\n        throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"UNAUTHORIZED\", {\n          message: _better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.B.FAILED_TO_GET_USER_INFO\n        });\n      }\n      const linkingUserId = String(linkingUserInfo.user.id);\n      if (!linkingUserInfo.user.email) {\n        c.context.logger.error(\"User email not found\", {\n          provider: c.body.provider\n        });\n        throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"UNAUTHORIZED\", {\n          message: _better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.B.USER_EMAIL_NOT_FOUND\n        });\n      }\n      const existingAccounts = await c.context.internalAdapter.findAccounts(\n        session.user.id\n      );\n      const hasBeenLinked = existingAccounts.find(\n        (a) => a.providerId === provider.id && a.accountId === linkingUserId\n      );\n      if (hasBeenLinked) {\n        return c.json({\n          url: \"\",\n          // this is for type inference\n          status: true,\n          redirect: false\n        });\n      }\n      const trustedProviders = c.context.options.account?.accountLinking?.trustedProviders;\n      const isTrustedProvider = trustedProviders?.includes(provider.id);\n      if (!isTrustedProvider && !linkingUserInfo.user.emailVerified || c.context.options.account?.accountLinking?.enabled === false) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"UNAUTHORIZED\", {\n          message: \"Account not linked - linking not allowed\"\n        });\n      }\n      if (linkingUserInfo.user.email !== session.user.email && c.context.options.account?.accountLinking?.allowDifferentEmails !== true) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"UNAUTHORIZED\", {\n          message: \"Account not linked - different emails not allowed\"\n        });\n      }\n      try {\n        await c.context.internalAdapter.createAccount(\n          {\n            userId: session.user.id,\n            providerId: provider.id,\n            accountId: linkingUserId,\n            accessToken: c.body.idToken.accessToken,\n            idToken: token,\n            refreshToken: c.body.idToken.refreshToken,\n            scope: c.body.idToken.scopes?.join(\",\")\n          },\n          c\n        );\n      } catch (e) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"EXPECTATION_FAILED\", {\n          message: \"Account not linked - unable to create account\"\n        });\n      }\n      if (c.context.options.account?.accountLinking?.updateUserInfoOnLink === true) {\n        try {\n          await c.context.internalAdapter.updateUser(session.user.id, {\n            name: linkingUserInfo.user?.name,\n            image: linkingUserInfo.user?.image\n          });\n        } catch (e) {\n          console.warn(\"Could not update user - \" + e.toString());\n        }\n      }\n      return c.json({\n        url: \"\",\n        // this is for type inference\n        status: true,\n        redirect: false\n      });\n    }\n    const state = await generateState(c, {\n      userId: session.user.id,\n      email: session.user.email\n    });\n    const url = await provider.createAuthorizationURL({\n      state: state.state,\n      codeVerifier: state.codeVerifier,\n      redirectURI: `${c.context.baseURL}/callback/${provider.id}`,\n      scopes: c.body.scopes\n    });\n    return c.json({\n      url: url.toString(),\n      redirect: !c.body.disableRedirect\n    });\n  }\n);\nconst unlinkAccount = (0,_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.a)(\n  \"/unlink-account\",\n  {\n    method: \"POST\",\n    body: zod__WEBPACK_IMPORTED_MODULE_21__.object({\n      providerId: zod__WEBPACK_IMPORTED_MODULE_21__.string(),\n      accountId: zod__WEBPACK_IMPORTED_MODULE_21__.string().optional()\n    }),\n    use: [_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.f],\n    metadata: {\n      openapi: {\n        description: \"Unlink an account\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const { providerId, accountId } = ctx.body;\n    const accounts = await ctx.context.internalAdapter.findAccounts(\n      ctx.context.session.user.id\n    );\n    if (accounts.length === 1 && !ctx.context.options.account?.accountLinking?.allowUnlinkingAll) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: _better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.B.FAILED_TO_UNLINK_LAST_ACCOUNT\n      });\n    }\n    const accountExist = accounts.find(\n      (account) => accountId ? account.accountId === accountId && account.providerId === providerId : account.providerId === providerId\n    );\n    if (!accountExist) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: _better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.B.ACCOUNT_NOT_FOUND\n      });\n    }\n    await ctx.context.internalAdapter.deleteAccount(accountExist.id);\n    return ctx.json({\n      status: true\n    });\n  }\n);\nconst getAccessToken = (0,_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.a)(\n  \"/get-access-token\",\n  {\n    method: \"POST\",\n    body: zod__WEBPACK_IMPORTED_MODULE_21__.object({\n      providerId: zod__WEBPACK_IMPORTED_MODULE_21__.string().meta({\n        description: \"The provider ID for the OAuth provider\"\n      }),\n      accountId: zod__WEBPACK_IMPORTED_MODULE_21__.string().meta({\n        description: \"The account ID associated with the refresh token\"\n      }).optional(),\n      userId: zod__WEBPACK_IMPORTED_MODULE_21__.string().meta({\n        description: \"The user ID associated with the account\"\n      }).optional()\n    }),\n    metadata: {\n      openapi: {\n        description: \"Get a valid access token, doing a refresh if needed\",\n        responses: {\n          200: {\n            description: \"A Valid access token\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    tokenType: {\n                      type: \"string\"\n                    },\n                    idToken: {\n                      type: \"string\"\n                    },\n                    accessToken: {\n                      type: \"string\"\n                    },\n                    refreshToken: {\n                      type: \"string\"\n                    },\n                    accessTokenExpiresAt: {\n                      type: \"string\",\n                      format: \"date-time\"\n                    },\n                    refreshTokenExpiresAt: {\n                      type: \"string\",\n                      format: \"date-time\"\n                    }\n                  }\n                }\n              }\n            }\n          },\n          400: {\n            description: \"Invalid refresh token or provider configuration\"\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const { providerId, accountId, userId } = ctx.body;\n    const req = ctx.request;\n    const session = await (0,_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(ctx);\n    if (req && !session) {\n      throw ctx.error(\"UNAUTHORIZED\");\n    }\n    let resolvedUserId = session?.user?.id || userId;\n    if (!resolvedUserId) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: `Either userId or session is required`\n      });\n    }\n    if (!ctx.context.socialProviders.find((p) => p.id === providerId)) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: `Provider ${providerId} is not supported.`\n      });\n    }\n    const accounts = await ctx.context.internalAdapter.findAccounts(resolvedUserId);\n    const account = accounts.find(\n      (acc) => accountId ? acc.id === accountId && acc.providerId === providerId : acc.providerId === providerId\n    );\n    if (!account) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: \"Account not found\"\n      });\n    }\n    const provider = ctx.context.socialProviders.find(\n      (p) => p.id === providerId\n    );\n    if (!provider) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: `Provider ${providerId} not found.`\n      });\n    }\n    try {\n      let newTokens = null;\n      const accessTokenExpired = account.accessTokenExpiresAt && new Date(account.accessTokenExpiresAt).getTime() - Date.now() < 5e3;\n      if (account.refreshToken && accessTokenExpired && provider.refreshAccessToken) {\n        newTokens = await provider.refreshAccessToken(\n          account.refreshToken\n        );\n        await ctx.context.internalAdapter.updateAccount(account.id, {\n          accessToken: await setTokenUtil(newTokens.accessToken, ctx.context),\n          accessTokenExpiresAt: newTokens.accessTokenExpiresAt,\n          refreshToken: await setTokenUtil(newTokens.refreshToken, ctx.context),\n          refreshTokenExpiresAt: newTokens.refreshTokenExpiresAt\n        });\n      }\n      const tokens = {\n        accessToken: await decryptOAuthToken(\n          newTokens?.accessToken ?? account.accessToken ?? \"\",\n          ctx.context\n        ),\n        accessTokenExpiresAt: newTokens?.accessTokenExpiresAt ?? account.accessTokenExpiresAt ?? void 0,\n        scopes: account.scope?.split(\",\") ?? [],\n        idToken: newTokens?.idToken ?? account.idToken ?? void 0\n      };\n      return ctx.json(tokens);\n    } catch (error) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: \"Failed to get a valid access token\",\n        cause: error\n      });\n    }\n  }\n);\nconst refreshToken = (0,_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.a)(\n  \"/refresh-token\",\n  {\n    method: \"POST\",\n    body: zod__WEBPACK_IMPORTED_MODULE_21__.object({\n      providerId: zod__WEBPACK_IMPORTED_MODULE_21__.string().meta({\n        description: \"The provider ID for the OAuth provider\"\n      }),\n      accountId: zod__WEBPACK_IMPORTED_MODULE_21__.string().meta({\n        description: \"The account ID associated with the refresh token\"\n      }).optional(),\n      userId: zod__WEBPACK_IMPORTED_MODULE_21__.string().meta({\n        description: \"The user ID associated with the account\"\n      }).optional()\n    }),\n    metadata: {\n      openapi: {\n        description: \"Refresh the access token using a refresh token\",\n        responses: {\n          200: {\n            description: \"Access token refreshed successfully\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    tokenType: {\n                      type: \"string\"\n                    },\n                    idToken: {\n                      type: \"string\"\n                    },\n                    accessToken: {\n                      type: \"string\"\n                    },\n                    refreshToken: {\n                      type: \"string\"\n                    },\n                    accessTokenExpiresAt: {\n                      type: \"string\",\n                      format: \"date-time\"\n                    },\n                    refreshTokenExpiresAt: {\n                      type: \"string\",\n                      format: \"date-time\"\n                    }\n                  }\n                }\n              }\n            }\n          },\n          400: {\n            description: \"Invalid refresh token or provider configuration\"\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const { providerId, accountId, userId } = ctx.body;\n    const req = ctx.request;\n    const session = await (0,_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(ctx);\n    if (req && !session) {\n      throw ctx.error(\"UNAUTHORIZED\");\n    }\n    let resolvedUserId = session?.user?.id || userId;\n    if (!resolvedUserId) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: `Either userId or session is required`\n      });\n    }\n    const accounts = await ctx.context.internalAdapter.findAccounts(resolvedUserId);\n    const account = accounts.find(\n      (acc) => accountId ? acc.id === accountId && acc.providerId === providerId : acc.providerId === providerId\n    );\n    if (!account) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: \"Account not found\"\n      });\n    }\n    const provider = ctx.context.socialProviders.find(\n      (p) => p.id === providerId\n    );\n    if (!provider) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: `Provider ${providerId} not found.`\n      });\n    }\n    if (!provider.refreshAccessToken) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: `Provider ${providerId} does not support token refreshing.`\n      });\n    }\n    try {\n      const tokens = await provider.refreshAccessToken(\n        account.refreshToken\n      );\n      await ctx.context.internalAdapter.updateAccount(account.id, {\n        accessToken: await setTokenUtil(tokens.accessToken, ctx.context),\n        refreshToken: await setTokenUtil(tokens.refreshToken, ctx.context),\n        accessTokenExpiresAt: tokens.accessTokenExpiresAt,\n        refreshTokenExpiresAt: tokens.refreshTokenExpiresAt\n      });\n      return ctx.json(tokens);\n    } catch (error) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: \"Failed to refresh access token\",\n        cause: error\n      });\n    }\n  }\n);\nconst accountInfo = (0,_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.a)(\n  \"/account-info\",\n  {\n    method: \"POST\",\n    use: [_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.s],\n    metadata: {\n      openapi: {\n        description: \"Get the account info provided by the provider\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    user: {\n                      type: \"object\",\n                      properties: {\n                        id: {\n                          type: \"string\"\n                        },\n                        name: {\n                          type: \"string\"\n                        },\n                        email: {\n                          type: \"string\"\n                        },\n                        image: {\n                          type: \"string\"\n                        },\n                        emailVerified: {\n                          type: \"boolean\"\n                        }\n                      },\n                      required: [\"id\", \"emailVerified\"]\n                    },\n                    data: {\n                      type: \"object\",\n                      properties: {},\n                      additionalProperties: true\n                    }\n                  },\n                  required: [\"user\", \"data\"],\n                  additionalProperties: false\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    body: zod__WEBPACK_IMPORTED_MODULE_21__.object({\n      accountId: zod__WEBPACK_IMPORTED_MODULE_21__.string().meta({\n        description: \"The provider given account id for which to get the account info\"\n      })\n    })\n  },\n  async (ctx) => {\n    const account = await ctx.context.internalAdapter.findAccount(\n      ctx.body.accountId\n    );\n    if (!account || account.userId !== ctx.context.session.user.id) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: \"Account not found\"\n      });\n    }\n    const provider = ctx.context.socialProviders.find(\n      (p) => p.id === account.providerId\n    );\n    if (!provider) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"INTERNAL_SERVER_ERROR\", {\n        message: `Provider account provider is ${account.providerId} but it is not configured`\n      });\n    }\n    const tokens = await getAccessToken({\n      ...ctx,\n      body: {\n        accountId: account.id,\n        providerId: account.providerId\n      },\n      returnHeaders: false\n    });\n    if (!tokens.accessToken) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: \"Access token not found\"\n      });\n    }\n    const info = await provider.getUserInfo({\n      ...tokens,\n      accessToken: tokens.accessToken\n    });\n    return ctx.json(info);\n  }\n);\n\nconst defuReplaceArrays = (0,defu__WEBPACK_IMPORTED_MODULE_19__.createDefu)((obj, key, value) => {\n  if (Array.isArray(obj[key]) && Array.isArray(value)) {\n    obj[key] = value;\n    return true;\n  }\n});\nfunction toAuthEndpoints(endpoints, ctx) {\n  const api = {};\n  for (const [key, endpoint] of Object.entries(endpoints)) {\n    api[key] = async (context) => {\n      const authContext = await ctx;\n      let internalContext = {\n        ...context,\n        context: {\n          ...authContext,\n          returned: void 0,\n          responseHeaders: void 0,\n          session: null\n        },\n        path: endpoint.path,\n        headers: context?.headers ? new Headers(context?.headers) : void 0\n      };\n      const { beforeHooks, afterHooks } = getHooks(authContext);\n      const before = await runBeforeHooks(internalContext, beforeHooks);\n      if (\"context\" in before && before.context && typeof before.context === \"object\") {\n        const { headers, ...rest } = before.context;\n        if (headers) {\n          headers.forEach((value, key2) => {\n            internalContext.headers.set(key2, value);\n          });\n        }\n        internalContext = defuReplaceArrays(rest, internalContext);\n      } else if (before) {\n        return context?.asResponse ? (0,better_call__WEBPACK_IMPORTED_MODULE_1__.toResponse)(before, {\n          headers: context?.headers\n        }) : context?.returnHeaders ? {\n          headers: context?.headers,\n          response: before\n        } : before;\n      }\n      internalContext.asResponse = false;\n      internalContext.returnHeaders = true;\n      const result = await endpoint(internalContext).catch((e) => {\n        if (e instanceof better_call__WEBPACK_IMPORTED_MODULE_1__.APIError) {\n          return {\n            response: e,\n            headers: e.headers ? new Headers(e.headers) : null\n          };\n        }\n        throw e;\n      });\n      if (result && result instanceof Response) {\n        return result;\n      }\n      internalContext.context.returned = result.response;\n      internalContext.context.responseHeaders = result.headers;\n      const after = await runAfterHooks(internalContext, afterHooks);\n      if (after.response) {\n        result.response = after.response;\n      }\n      if (result.response instanceof better_call__WEBPACK_IMPORTED_MODULE_1__.APIError && (0,_better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_12__.s)(authContext.logger.level, \"debug\")) {\n        result.response.stack = result.response.errorStack;\n      }\n      if (result.response instanceof better_call__WEBPACK_IMPORTED_MODULE_1__.APIError && !context?.asResponse) {\n        throw result.response;\n      }\n      const response = context?.asResponse ? (0,better_call__WEBPACK_IMPORTED_MODULE_1__.toResponse)(result.response, {\n        headers: result.headers\n      }) : context?.returnHeaders ? {\n        headers: result.headers,\n        response: result.response\n      } : result.response;\n      return response;\n    };\n    api[key].path = endpoint.path;\n    api[key].options = endpoint.options;\n  }\n  return api;\n}\nasync function runBeforeHooks(context, hooks) {\n  let modifiedContext = {};\n  for (const hook of hooks) {\n    if (hook.matcher(context)) {\n      const result = await hook.handler({\n        ...context,\n        returnHeaders: false\n      }).catch((e) => {\n        if (e instanceof better_call__WEBPACK_IMPORTED_MODULE_1__.APIError && (0,_better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_12__.s)(context.context.logger.level, \"debug\")) {\n          e.stack = e.errorStack;\n        }\n        throw e;\n      });\n      if (result && typeof result === \"object\") {\n        if (\"context\" in result && typeof result.context === \"object\") {\n          const { headers, ...rest } = result.context;\n          if (headers instanceof Headers) {\n            if (modifiedContext.headers) {\n              headers.forEach((value, key) => {\n                modifiedContext.headers?.set(key, value);\n              });\n            } else {\n              modifiedContext.headers = headers;\n            }\n          }\n          modifiedContext = defuReplaceArrays(rest, modifiedContext);\n          continue;\n        }\n        return result;\n      }\n    }\n  }\n  return { context: modifiedContext };\n}\nasync function runAfterHooks(context, hooks) {\n  for (const hook of hooks) {\n    if (hook.matcher(context)) {\n      const result = await hook.handler(context).catch((e) => {\n        if (e instanceof better_call__WEBPACK_IMPORTED_MODULE_1__.APIError) {\n          if ((0,_better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_12__.s)(context.context.logger.level, \"debug\")) {\n            e.stack = e.errorStack;\n          }\n          return {\n            response: e,\n            headers: e.headers ? new Headers(e.headers) : null\n          };\n        }\n        throw e;\n      });\n      if (result.headers) {\n        result.headers.forEach((value, key) => {\n          if (!context.context.responseHeaders) {\n            context.context.responseHeaders = new Headers({\n              [key]: value\n            });\n          } else {\n            if (key.toLowerCase() === \"set-cookie\") {\n              context.context.responseHeaders.append(key, value);\n            } else {\n              context.context.responseHeaders.set(key, value);\n            }\n          }\n        });\n      }\n      if (result.response) {\n        context.context.returned = result.response;\n      }\n    }\n  }\n  return {\n    response: context.context.returned,\n    headers: context.context.responseHeaders\n  };\n}\nfunction getHooks(authContext) {\n  const plugins = authContext.options.plugins || [];\n  const beforeHooks = [];\n  const afterHooks = [];\n  if (authContext.options.hooks?.before) {\n    beforeHooks.push({\n      matcher: () => true,\n      handler: authContext.options.hooks.before\n    });\n  }\n  if (authContext.options.hooks?.after) {\n    afterHooks.push({\n      matcher: () => true,\n      handler: authContext.options.hooks.after\n    });\n  }\n  const pluginBeforeHooks = plugins.map((plugin) => {\n    if (plugin.hooks?.before) {\n      return plugin.hooks.before;\n    }\n  }).filter((plugin) => plugin !== void 0).flat();\n  const pluginAfterHooks = plugins.map((plugin) => {\n    if (plugin.hooks?.after) {\n      return plugin.hooks.after;\n    }\n  }).filter((plugin) => plugin !== void 0).flat();\n  pluginBeforeHooks.length && beforeHooks.push(...pluginBeforeHooks);\n  pluginAfterHooks.length && afterHooks.push(...pluginAfterHooks);\n  return {\n    beforeHooks,\n    afterHooks\n  };\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.C3-_8m-g.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.C5vDERgF.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.C5vDERgF.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   B: () => (/* binding */ BASE_ERROR_CODES),\n/* harmony export */   a: () => (/* binding */ createAuthEndpoint),\n/* harmony export */   b: () => (/* binding */ getSession),\n/* harmony export */   c: () => (/* binding */ createAuthMiddleware),\n/* harmony export */   d: () => (/* binding */ revokeSessions),\n/* harmony export */   e: () => (/* binding */ revokeSession),\n/* harmony export */   f: () => (/* binding */ freshSessionMiddleware),\n/* harmony export */   g: () => (/* binding */ getSessionFromCtx),\n/* harmony export */   h: () => (/* binding */ getSessionQuerySchema),\n/* harmony export */   i: () => (/* binding */ sensitiveSessionMiddleware),\n/* harmony export */   j: () => (/* binding */ requestOnlySessionMiddleware),\n/* harmony export */   l: () => (/* binding */ listSessions),\n/* harmony export */   o: () => (/* binding */ optionsMiddleware),\n/* harmony export */   r: () => (/* binding */ revokeOtherSessions),\n/* harmony export */   s: () => (/* binding */ sessionMiddleware)\n/* harmony export */ });\n/* harmony import */ var better_call__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! better-call */ \"(rsc)/./node_modules/better-call/dist/index.js\");\n/* harmony import */ var _better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./better-auth.CW6D9eSx.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.CW6D9eSx.mjs\");\n/* harmony import */ var _better_auth_DiMXeqeq_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./better-auth.DiMXeqeq.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DiMXeqeq.mjs\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/v4/classic/external.js\");\n/* harmony import */ var _better_auth_BTrSrKsi_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./better-auth.BTrSrKsi.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.BTrSrKsi.mjs\");\n/* harmony import */ var _better_auth_D2xndZ2p_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./better-auth.D2xndZ2p.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.D2xndZ2p.mjs\");\n/* harmony import */ var _better_auth_utils_hmac__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @better-auth/utils/hmac */ \"(rsc)/./node_modules/@better-auth/utils/dist/hmac.mjs\");\n/* harmony import */ var _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @better-auth/utils/base64 */ \"(rsc)/./node_modules/@better-auth/utils/dist/base64.mjs\");\n/* harmony import */ var _better_auth_utils_binary__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @better-auth/utils/binary */ \"(rsc)/./node_modules/@better-auth/utils/dist/binary.mjs\");\n\n\n\n\n\n\n\n\n\n\nconst optionsMiddleware = (0,better_call__WEBPACK_IMPORTED_MODULE_0__.createMiddleware)(async () => {\n  return {};\n});\nconst createAuthMiddleware = better_call__WEBPACK_IMPORTED_MODULE_0__.createMiddleware.create({\n  use: [\n    optionsMiddleware,\n    /**\n     * Only use for post hooks\n     */\n    (0,better_call__WEBPACK_IMPORTED_MODULE_0__.createMiddleware)(async () => {\n      return {};\n    })\n  ]\n});\nconst createAuthEndpoint = better_call__WEBPACK_IMPORTED_MODULE_0__.createEndpoint.create({\n  use: [optionsMiddleware]\n});\n\nconst BASE_ERROR_CODES = (0,_better_auth_D2xndZ2p_mjs__WEBPACK_IMPORTED_MODULE_4__.d)({\n  USER_NOT_FOUND: \"User not found\",\n  FAILED_TO_CREATE_USER: \"Failed to create user\",\n  FAILED_TO_CREATE_SESSION: \"Failed to create session\",\n  FAILED_TO_UPDATE_USER: \"Failed to update user\",\n  FAILED_TO_GET_SESSION: \"Failed to get session\",\n  INVALID_PASSWORD: \"Invalid password\",\n  INVALID_EMAIL: \"Invalid email\",\n  INVALID_EMAIL_OR_PASSWORD: \"Invalid email or password\",\n  SOCIAL_ACCOUNT_ALREADY_LINKED: \"Social account already linked\",\n  PROVIDER_NOT_FOUND: \"Provider not found\",\n  INVALID_TOKEN: \"Invalid token\",\n  ID_TOKEN_NOT_SUPPORTED: \"id_token not supported\",\n  FAILED_TO_GET_USER_INFO: \"Failed to get user info\",\n  USER_EMAIL_NOT_FOUND: \"User email not found\",\n  EMAIL_NOT_VERIFIED: \"Email not verified\",\n  PASSWORD_TOO_SHORT: \"Password too short\",\n  PASSWORD_TOO_LONG: \"Password too long\",\n  USER_ALREADY_EXISTS: \"User already exists.\",\n  USER_ALREADY_EXISTS_USE_ANOTHER_EMAIL: \"User already exists. Use another email.\",\n  EMAIL_CAN_NOT_BE_UPDATED: \"Email can not be updated\",\n  CREDENTIAL_ACCOUNT_NOT_FOUND: \"Credential account not found\",\n  SESSION_EXPIRED: \"Session expired. Re-authenticate to perform this action.\",\n  FAILED_TO_UNLINK_LAST_ACCOUNT: \"You can't unlink your last account\",\n  ACCOUNT_NOT_FOUND: \"Account not found\",\n  USER_ALREADY_HAS_PASSWORD: \"User already has a password. Provide that to delete the account.\"\n});\n\nconst getSessionQuerySchema = zod__WEBPACK_IMPORTED_MODULE_8__.optional(\n  zod__WEBPACK_IMPORTED_MODULE_8__.object({\n    /**\n     * If cookie cache is enabled, it will disable the cache\n     * and fetch the session from the database\n     */\n    disableCookieCache: zod__WEBPACK_IMPORTED_MODULE_8__.coerce.boolean().meta({\n      description: \"Disable cookie cache and fetch session from database\"\n    }).optional(),\n    disableRefresh: zod__WEBPACK_IMPORTED_MODULE_8__.coerce.boolean().meta({\n      description: \"Disable session refresh. Useful for checking session status, without updating the session\"\n    }).optional()\n  })\n);\nconst getSession = () => createAuthEndpoint(\n  \"/get-session\",\n  {\n    method: \"GET\",\n    query: getSessionQuerySchema,\n    requireHeaders: true,\n    metadata: {\n      openapi: {\n        description: \"Get the current session\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    session: {\n                      $ref: \"#/components/schemas/Session\"\n                    },\n                    user: {\n                      $ref: \"#/components/schemas/User\"\n                    }\n                  },\n                  required: [\"session\", \"user\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    try {\n      const sessionCookieToken = await ctx.getSignedCookie(\n        ctx.context.authCookies.sessionToken.name,\n        ctx.context.secret\n      );\n      if (!sessionCookieToken) {\n        return null;\n      }\n      const sessionDataCookie = ctx.getCookie(\n        ctx.context.authCookies.sessionData.name\n      );\n      const sessionDataPayload = sessionDataCookie ? (0,_better_auth_BTrSrKsi_mjs__WEBPACK_IMPORTED_MODULE_3__.s)(_better_auth_utils_binary__WEBPACK_IMPORTED_MODULE_7__.binary.decode(_better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_6__.base64Url.decode(sessionDataCookie))) : null;\n      if (sessionDataPayload) {\n        const isValid = await (0,_better_auth_utils_hmac__WEBPACK_IMPORTED_MODULE_5__.createHMAC)(\"SHA-256\", \"base64urlnopad\").verify(\n          ctx.context.secret,\n          JSON.stringify({\n            ...sessionDataPayload.session,\n            expiresAt: sessionDataPayload.expiresAt\n          }),\n          sessionDataPayload.signature\n        );\n        if (!isValid) {\n          const dataCookie = ctx.context.authCookies.sessionData.name;\n          ctx.setCookie(dataCookie, \"\", {\n            maxAge: 0\n          });\n          return ctx.json(null);\n        }\n      }\n      const dontRememberMe = await ctx.getSignedCookie(\n        ctx.context.authCookies.dontRememberToken.name,\n        ctx.context.secret\n      );\n      if (sessionDataPayload?.session && ctx.context.options.session?.cookieCache?.enabled && !ctx.query?.disableCookieCache) {\n        const session2 = sessionDataPayload.session;\n        const hasExpired = sessionDataPayload.expiresAt < Date.now() || session2.session.expiresAt < /* @__PURE__ */ new Date();\n        if (!hasExpired) {\n          ctx.context.session = session2;\n          return ctx.json(\n            session2\n          );\n        } else {\n          const dataCookie = ctx.context.authCookies.sessionData.name;\n          ctx.setCookie(dataCookie, \"\", {\n            maxAge: 0\n          });\n        }\n      }\n      const session = await ctx.context.internalAdapter.findSession(sessionCookieToken);\n      ctx.context.session = session;\n      if (!session || session.session.expiresAt < /* @__PURE__ */ new Date()) {\n        (0,_better_auth_DiMXeqeq_mjs__WEBPACK_IMPORTED_MODULE_2__.d)(ctx);\n        if (session) {\n          await ctx.context.internalAdapter.deleteSession(\n            session.session.token\n          );\n        }\n        return ctx.json(null);\n      }\n      if (dontRememberMe || ctx.query?.disableRefresh) {\n        return ctx.json(\n          session\n        );\n      }\n      const expiresIn = ctx.context.sessionConfig.expiresIn;\n      const updateAge = ctx.context.sessionConfig.updateAge;\n      const sessionIsDueToBeUpdatedDate = session.session.expiresAt.valueOf() - expiresIn * 1e3 + updateAge * 1e3;\n      const shouldBeUpdated = sessionIsDueToBeUpdatedDate <= Date.now();\n      if (shouldBeUpdated && (!ctx.query?.disableRefresh || !ctx.context.options.session?.disableSessionRefresh)) {\n        const updatedSession = await ctx.context.internalAdapter.updateSession(\n          session.session.token,\n          {\n            expiresAt: (0,_better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(ctx.context.sessionConfig.expiresIn, \"sec\"),\n            updatedAt: /* @__PURE__ */ new Date()\n          }\n        );\n        if (!updatedSession) {\n          (0,_better_auth_DiMXeqeq_mjs__WEBPACK_IMPORTED_MODULE_2__.d)(ctx);\n          return ctx.json(null, { status: 401 });\n        }\n        const maxAge = (updatedSession.expiresAt.valueOf() - Date.now()) / 1e3;\n        await (0,_better_auth_DiMXeqeq_mjs__WEBPACK_IMPORTED_MODULE_2__.s)(\n          ctx,\n          {\n            session: updatedSession,\n            user: session.user\n          },\n          false,\n          {\n            maxAge\n          }\n        );\n        return ctx.json({\n          session: updatedSession,\n          user: session.user\n        });\n      }\n      await (0,_better_auth_DiMXeqeq_mjs__WEBPACK_IMPORTED_MODULE_2__.b)(ctx, session, !!dontRememberMe);\n      return ctx.json(\n        session\n      );\n    } catch (error) {\n      ctx.context.logger.error(\"INTERNAL_SERVER_ERROR\", error);\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"INTERNAL_SERVER_ERROR\", {\n        message: BASE_ERROR_CODES.FAILED_TO_GET_SESSION\n      });\n    }\n  }\n);\nconst getSessionFromCtx = async (ctx, config) => {\n  if (ctx.context.session) {\n    return ctx.context.session;\n  }\n  const session = await getSession()({\n    ...ctx,\n    asResponse: false,\n    headers: ctx.headers,\n    returnHeaders: false,\n    query: {\n      ...config,\n      ...ctx.query\n    }\n  }).catch((e) => {\n    return null;\n  });\n  ctx.context.session = session;\n  return session;\n};\nconst sessionMiddleware = createAuthMiddleware(async (ctx) => {\n  const session = await getSessionFromCtx(ctx);\n  if (!session?.session) {\n    throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNAUTHORIZED\");\n  }\n  return {\n    session\n  };\n});\nconst sensitiveSessionMiddleware = createAuthMiddleware(async (ctx) => {\n  const session = await getSessionFromCtx(ctx, { disableCookieCache: true });\n  if (!session?.session) {\n    throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNAUTHORIZED\");\n  }\n  return {\n    session\n  };\n});\nconst requestOnlySessionMiddleware = createAuthMiddleware(\n  async (ctx) => {\n    const session = await getSessionFromCtx(ctx);\n    if (!session?.session && (ctx.request || ctx.headers)) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNAUTHORIZED\");\n    }\n    return { session };\n  }\n);\nconst freshSessionMiddleware = createAuthMiddleware(async (ctx) => {\n  const session = await getSessionFromCtx(ctx);\n  if (!session?.session) {\n    throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNAUTHORIZED\");\n  }\n  if (ctx.context.sessionConfig.freshAge === 0) {\n    return {\n      session\n    };\n  }\n  const freshAge = ctx.context.sessionConfig.freshAge;\n  const lastUpdated = session.session.updatedAt?.valueOf() || session.session.createdAt.valueOf();\n  const now = Date.now();\n  const isFresh = now - lastUpdated < freshAge * 1e3;\n  if (!isFresh) {\n    throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"FORBIDDEN\", {\n      message: \"Session is not fresh\"\n    });\n  }\n  return {\n    session\n  };\n});\nconst listSessions = () => createAuthEndpoint(\n  \"/list-sessions\",\n  {\n    method: \"GET\",\n    use: [sessionMiddleware],\n    requireHeaders: true,\n    metadata: {\n      openapi: {\n        description: \"List all active sessions for the user\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"array\",\n                  items: {\n                    $ref: \"#/components/schemas/Session\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    try {\n      const sessions = await ctx.context.internalAdapter.listSessions(\n        ctx.context.session.user.id\n      );\n      const activeSessions = sessions.filter((session) => {\n        return session.expiresAt > /* @__PURE__ */ new Date();\n      });\n      return ctx.json(\n        activeSessions\n      );\n    } catch (e) {\n      ctx.context.logger.error(e);\n      throw ctx.error(\"INTERNAL_SERVER_ERROR\");\n    }\n  }\n);\nconst revokeSession = createAuthEndpoint(\n  \"/revoke-session\",\n  {\n    method: \"POST\",\n    body: zod__WEBPACK_IMPORTED_MODULE_8__.object({\n      token: zod__WEBPACK_IMPORTED_MODULE_8__.string().meta({\n        description: \"The token to revoke\"\n      })\n    }),\n    use: [sensitiveSessionMiddleware],\n    requireHeaders: true,\n    metadata: {\n      openapi: {\n        description: \"Revoke a single session\",\n        requestBody: {\n          content: {\n            \"application/json\": {\n              schema: {\n                type: \"object\",\n                properties: {\n                  token: {\n                    type: \"string\",\n                    description: \"The token to revoke\"\n                  }\n                },\n                required: [\"token\"]\n              }\n            }\n          }\n        },\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\",\n                      description: \"Indicates if the session was revoked successfully\"\n                    }\n                  },\n                  required: [\"status\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const token = ctx.body.token;\n    const findSession = await ctx.context.internalAdapter.findSession(token);\n    if (!findSession) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: \"Session not found\"\n      });\n    }\n    if (findSession.session.userId !== ctx.context.session.user.id) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNAUTHORIZED\");\n    }\n    try {\n      await ctx.context.internalAdapter.deleteSession(token);\n    } catch (error) {\n      ctx.context.logger.error(\n        error && typeof error === \"object\" && \"name\" in error ? error.name : \"\",\n        error\n      );\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"INTERNAL_SERVER_ERROR\");\n    }\n    return ctx.json({\n      status: true\n    });\n  }\n);\nconst revokeSessions = createAuthEndpoint(\n  \"/revoke-sessions\",\n  {\n    method: \"POST\",\n    use: [sensitiveSessionMiddleware],\n    requireHeaders: true,\n    metadata: {\n      openapi: {\n        description: \"Revoke all sessions for the user\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\",\n                      description: \"Indicates if all sessions were revoked successfully\"\n                    }\n                  },\n                  required: [\"status\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    try {\n      await ctx.context.internalAdapter.deleteSessions(\n        ctx.context.session.user.id\n      );\n    } catch (error) {\n      ctx.context.logger.error(\n        error && typeof error === \"object\" && \"name\" in error ? error.name : \"\",\n        error\n      );\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"INTERNAL_SERVER_ERROR\");\n    }\n    return ctx.json({\n      status: true\n    });\n  }\n);\nconst revokeOtherSessions = createAuthEndpoint(\n  \"/revoke-other-sessions\",\n  {\n    method: \"POST\",\n    requireHeaders: true,\n    use: [sensitiveSessionMiddleware],\n    metadata: {\n      openapi: {\n        description: \"Revoke all other sessions for the user except the current one\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\",\n                      description: \"Indicates if all other sessions were revoked successfully\"\n                    }\n                  },\n                  required: [\"status\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const session = ctx.context.session;\n    if (!session.user) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNAUTHORIZED\");\n    }\n    const sessions = await ctx.context.internalAdapter.listSessions(\n      session.user.id\n    );\n    const activeSessions = sessions.filter((session2) => {\n      return session2.expiresAt > /* @__PURE__ */ new Date();\n    });\n    const otherSessions = activeSessions.filter(\n      (session2) => session2.token !== ctx.context.session.session.token\n    );\n    await Promise.all(\n      otherSessions.map(\n        (session2) => ctx.context.internalAdapter.deleteSession(session2.token)\n      )\n    );\n    return ctx.json({\n      status: true\n    });\n  }\n);\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.C5vDERgF.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.CJoIWSTC.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.CJoIWSTC.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ orgSessionMiddleware),\n/* harmony export */   o: () => (/* binding */ orgMiddleware),\n/* harmony export */   t: () => (/* binding */ teamSchema)\n/* harmony export */ });\n/* harmony import */ var _better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./better-auth.C5vDERgF.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.C5vDERgF.mjs\");\n/* harmony import */ var better_call__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! better-call */ \"(rsc)/./node_modules/better-call/dist/index.js\");\n/* harmony import */ var _better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./better-auth.C3-_8m-g.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.C3-_8m-g.mjs\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/v4/classic/external.js\");\n/* harmony import */ var _better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./better-auth.CiuwFiHM.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.CiuwFiHM.mjs\");\n/* harmony import */ var _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @better-auth/utils/base64 */ \"(rsc)/./node_modules/@better-auth/utils/dist/base64.mjs\");\n/* harmony import */ var _better_auth_utils_hmac__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @better-auth/utils/hmac */ \"(rsc)/./node_modules/@better-auth/utils/dist/hmac.mjs\");\n/* harmony import */ var _better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./better-auth.DgGir396.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DgGir396.mjs\");\n/* harmony import */ var _better_auth_utils_binary__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @better-auth/utils/binary */ \"(rsc)/./node_modules/@better-auth/utils/dist/binary.mjs\");\n/* harmony import */ var _better_auth_core_db__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @better-auth/core/db */ \"(rsc)/./node_modules/@better-auth/core/dist/db/index.mjs\");\n/* harmony import */ var _better_auth_utils_random__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @better-auth/utils/random */ \"(rsc)/./node_modules/@better-auth/utils/dist/random.mjs\");\n/* harmony import */ var _better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @better-auth/utils/hash */ \"(rsc)/./node_modules/@better-auth/utils/dist/hash.mjs\");\n/* harmony import */ var _better_auth_utils_hex__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @better-auth/utils/hex */ \"(rsc)/./node_modules/@better-auth/utils/dist/hex.mjs\");\n/* harmony import */ var _better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./better-auth.B4Qoxdgc.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs\");\n/* harmony import */ var _better_auth_BUPPRXfK_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./better-auth.BUPPRXfK.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.BUPPRXfK.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst orgMiddleware = (0,_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(async () => {\n  return {};\n});\nconst orgSessionMiddleware = (0,_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(\n  {\n    use: [_better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_0__.s]\n  },\n  async (ctx) => {\n    const session = ctx.context.session;\n    return {\n      session\n    };\n  }\n);\n\nconst role = zod__WEBPACK_IMPORTED_MODULE_14__.string();\nconst invitationStatus = zod__WEBPACK_IMPORTED_MODULE_14__[\"enum\"]([\"pending\", \"accepted\", \"rejected\", \"canceled\"]).default(\"pending\");\nzod__WEBPACK_IMPORTED_MODULE_14__.object({\n  id: zod__WEBPACK_IMPORTED_MODULE_14__.string().default(_better_auth_BUPPRXfK_mjs__WEBPACK_IMPORTED_MODULE_13__.g),\n  name: zod__WEBPACK_IMPORTED_MODULE_14__.string(),\n  slug: zod__WEBPACK_IMPORTED_MODULE_14__.string(),\n  logo: zod__WEBPACK_IMPORTED_MODULE_14__.string().nullish().optional(),\n  metadata: zod__WEBPACK_IMPORTED_MODULE_14__.record(zod__WEBPACK_IMPORTED_MODULE_14__.string(), zod__WEBPACK_IMPORTED_MODULE_14__.unknown()).or(zod__WEBPACK_IMPORTED_MODULE_14__.string().transform((v) => JSON.parse(v))).optional(),\n  createdAt: zod__WEBPACK_IMPORTED_MODULE_14__.date()\n});\nzod__WEBPACK_IMPORTED_MODULE_14__.object({\n  id: zod__WEBPACK_IMPORTED_MODULE_14__.string().default(_better_auth_BUPPRXfK_mjs__WEBPACK_IMPORTED_MODULE_13__.g),\n  organizationId: zod__WEBPACK_IMPORTED_MODULE_14__.string(),\n  userId: zod__WEBPACK_IMPORTED_MODULE_14__.coerce.string(),\n  role,\n  createdAt: zod__WEBPACK_IMPORTED_MODULE_14__.date().default(() => /* @__PURE__ */ new Date())\n});\nzod__WEBPACK_IMPORTED_MODULE_14__.object({\n  id: zod__WEBPACK_IMPORTED_MODULE_14__.string().default(_better_auth_BUPPRXfK_mjs__WEBPACK_IMPORTED_MODULE_13__.g),\n  organizationId: zod__WEBPACK_IMPORTED_MODULE_14__.string(),\n  email: zod__WEBPACK_IMPORTED_MODULE_14__.string(),\n  role,\n  status: invitationStatus,\n  teamId: zod__WEBPACK_IMPORTED_MODULE_14__.string().nullish(),\n  inviterId: zod__WEBPACK_IMPORTED_MODULE_14__.string(),\n  expiresAt: zod__WEBPACK_IMPORTED_MODULE_14__.date()\n});\nconst teamSchema = zod__WEBPACK_IMPORTED_MODULE_14__.object({\n  id: zod__WEBPACK_IMPORTED_MODULE_14__.string().default(_better_auth_BUPPRXfK_mjs__WEBPACK_IMPORTED_MODULE_13__.g),\n  name: zod__WEBPACK_IMPORTED_MODULE_14__.string().min(1),\n  organizationId: zod__WEBPACK_IMPORTED_MODULE_14__.string(),\n  createdAt: zod__WEBPACK_IMPORTED_MODULE_14__.date(),\n  updatedAt: zod__WEBPACK_IMPORTED_MODULE_14__.date().optional()\n});\nzod__WEBPACK_IMPORTED_MODULE_14__.object({\n  id: zod__WEBPACK_IMPORTED_MODULE_14__.string().default(_better_auth_BUPPRXfK_mjs__WEBPACK_IMPORTED_MODULE_13__.g),\n  teamId: zod__WEBPACK_IMPORTED_MODULE_14__.string(),\n  userId: zod__WEBPACK_IMPORTED_MODULE_14__.string(),\n  createdAt: zod__WEBPACK_IMPORTED_MODULE_14__.date().default(() => /* @__PURE__ */ new Date())\n});\nzod__WEBPACK_IMPORTED_MODULE_14__.object({\n  id: zod__WEBPACK_IMPORTED_MODULE_14__.string().default(_better_auth_BUPPRXfK_mjs__WEBPACK_IMPORTED_MODULE_13__.g),\n  organizationId: zod__WEBPACK_IMPORTED_MODULE_14__.string(),\n  role: zod__WEBPACK_IMPORTED_MODULE_14__.string(),\n  permission: zod__WEBPACK_IMPORTED_MODULE_14__.record(zod__WEBPACK_IMPORTED_MODULE_14__.string(), zod__WEBPACK_IMPORTED_MODULE_14__.array(zod__WEBPACK_IMPORTED_MODULE_14__.string())),\n  createdAt: zod__WEBPACK_IMPORTED_MODULE_14__.date().default(() => /* @__PURE__ */ new Date()),\n  updatedAt: zod__WEBPACK_IMPORTED_MODULE_14__.date().optional()\n});\nconst defaultRoles = [\"admin\", \"member\", \"owner\"];\nzod__WEBPACK_IMPORTED_MODULE_14__.union([\n  zod__WEBPACK_IMPORTED_MODULE_14__[\"enum\"](defaultRoles),\n  zod__WEBPACK_IMPORTED_MODULE_14__.array(zod__WEBPACK_IMPORTED_MODULE_14__[\"enum\"](defaultRoles))\n]);\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguQ0pvSVdTVEMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUErRjtBQUMxRTtBQUNlO0FBQ1g7QUFDVztBQUNEO0FBQ0Y7QUFDRztBQUNEO0FBQ0w7QUFDSztBQUNGO0FBQ0M7QUFDRDtBQUNuQjtBQUNtQjtBQUNEO0FBQ0E7QUFDSTtBQUNwQjtBQUM2Qzs7QUFFN0Qsc0JBQXNCLDREQUFvQjtBQUMxQztBQUNBLENBQUM7QUFDRCw2QkFBNkIsNERBQW9CO0FBQ2pEO0FBQ0EsVUFBVSx3REFBaUI7QUFDM0IsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGFBQWEsd0NBQVE7QUFDckIseUJBQXlCLHlDQUFNO0FBQy9CLHdDQUFRO0FBQ1IsTUFBTSx3Q0FBUSxXQUFXLHlEQUFVO0FBQ25DLFFBQVEsd0NBQVE7QUFDaEIsUUFBUSx3Q0FBUTtBQUNoQixRQUFRLHdDQUFRO0FBQ2hCLFlBQVksd0NBQVEsQ0FBQyx3Q0FBUSxJQUFJLHlDQUFTLE9BQU8sd0NBQVE7QUFDekQsYUFBYSxzQ0FBTTtBQUNuQixDQUFDO0FBQ0Qsd0NBQVE7QUFDUixNQUFNLHdDQUFRLFdBQVcseURBQVU7QUFDbkMsa0JBQWtCLHdDQUFRO0FBQzFCLFVBQVUsK0NBQWU7QUFDekI7QUFDQSxhQUFhLHNDQUFNO0FBQ25CLENBQUM7QUFDRCx3Q0FBUTtBQUNSLE1BQU0sd0NBQVEsV0FBVyx5REFBVTtBQUNuQyxrQkFBa0Isd0NBQVE7QUFDMUIsU0FBUyx3Q0FBUTtBQUNqQjtBQUNBO0FBQ0EsVUFBVSx3Q0FBUTtBQUNsQixhQUFhLHdDQUFRO0FBQ3JCLGFBQWEsc0NBQU07QUFDbkIsQ0FBQztBQUNELG1CQUFtQix3Q0FBUTtBQUMzQixNQUFNLHdDQUFRLFdBQVcseURBQVU7QUFDbkMsUUFBUSx3Q0FBUTtBQUNoQixrQkFBa0Isd0NBQVE7QUFDMUIsYUFBYSxzQ0FBTTtBQUNuQixhQUFhLHNDQUFNO0FBQ25CLENBQUM7QUFDRCx3Q0FBUTtBQUNSLE1BQU0sd0NBQVEsV0FBVyx5REFBVTtBQUNuQyxVQUFVLHdDQUFRO0FBQ2xCLFVBQVUsd0NBQVE7QUFDbEIsYUFBYSxzQ0FBTTtBQUNuQixDQUFDO0FBQ0Qsd0NBQVE7QUFDUixNQUFNLHdDQUFRLFdBQVcseURBQVU7QUFDbkMsa0JBQWtCLHdDQUFRO0FBQzFCLFFBQVEsd0NBQVE7QUFDaEIsY0FBYyx3Q0FBUSxDQUFDLHdDQUFRLElBQUksdUNBQU8sQ0FBQyx3Q0FBUTtBQUNuRCxhQUFhLHNDQUFNO0FBQ25CLGFBQWEsc0NBQU07QUFDbkIsQ0FBQztBQUNEO0FBQ0EsdUNBQU87QUFDUCxFQUFFLHlDQUFNO0FBQ1IsRUFBRSx1Q0FBTyxDQUFDLHlDQUFNO0FBQ2hCOztBQUUwRSIsInNvdXJjZXMiOlsid2VicGFjazovL2F1dG9wbGFuY2FtLy4vbm9kZV9tb2R1bGVzL2JldHRlci1hdXRoL2Rpc3Qvc2hhcmVkL2JldHRlci1hdXRoLkNKb0lXU1RDLm1qcz85MTk4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGMgYXMgY3JlYXRlQXV0aE1pZGRsZXdhcmUsIHMgYXMgc2Vzc2lvbk1pZGRsZXdhcmUgfSBmcm9tICcuL2JldHRlci1hdXRoLkM1dkRFUmdGLm1qcyc7XG5pbXBvcnQgJ2JldHRlci1jYWxsJztcbmltcG9ydCAnLi9iZXR0ZXItYXV0aC5DMy1fOG0tZy5tanMnO1xuaW1wb3J0ICogYXMgeiBmcm9tICd6b2QnO1xuaW1wb3J0ICcuL2JldHRlci1hdXRoLkNpdXdGaUhNLm1qcyc7XG5pbXBvcnQgJ0BiZXR0ZXItYXV0aC91dGlscy9iYXNlNjQnO1xuaW1wb3J0ICdAYmV0dGVyLWF1dGgvdXRpbHMvaG1hYyc7XG5pbXBvcnQgJy4vYmV0dGVyLWF1dGguRGdHaXIzOTYubWpzJztcbmltcG9ydCAnQGJldHRlci1hdXRoL3V0aWxzL2JpbmFyeSc7XG5pbXBvcnQgJ0BiZXR0ZXItYXV0aC9jb3JlL2RiJztcbmltcG9ydCAnQGJldHRlci1hdXRoL3V0aWxzL3JhbmRvbSc7XG5pbXBvcnQgJ0BiZXR0ZXItYXV0aC91dGlscy9oYXNoJztcbmltcG9ydCAnQG5vYmxlL2NpcGhlcnMvY2hhY2hhLmpzJztcbmltcG9ydCAnQG5vYmxlL2NpcGhlcnMvdXRpbHMuanMnO1xuaW1wb3J0ICdqb3NlJztcbmltcG9ydCAnQG5vYmxlL2hhc2hlcy9zY3J5cHQuanMnO1xuaW1wb3J0ICdAYmV0dGVyLWF1dGgvdXRpbHMvaGV4JztcbmltcG9ydCAnQG5vYmxlL2hhc2hlcy91dGlscy5qcyc7XG5pbXBvcnQgJy4vYmV0dGVyLWF1dGguQjRRb3hkZ2MubWpzJztcbmltcG9ydCAna3lzZWx5JztcbmltcG9ydCB7IGcgYXMgZ2VuZXJhdGVJZCB9IGZyb20gJy4vYmV0dGVyLWF1dGguQlVQUFJYZksubWpzJztcblxuY29uc3Qgb3JnTWlkZGxld2FyZSA9IGNyZWF0ZUF1dGhNaWRkbGV3YXJlKGFzeW5jICgpID0+IHtcbiAgcmV0dXJuIHt9O1xufSk7XG5jb25zdCBvcmdTZXNzaW9uTWlkZGxld2FyZSA9IGNyZWF0ZUF1dGhNaWRkbGV3YXJlKFxuICB7XG4gICAgdXNlOiBbc2Vzc2lvbk1pZGRsZXdhcmVdXG4gIH0sXG4gIGFzeW5jIChjdHgpID0+IHtcbiAgICBjb25zdCBzZXNzaW9uID0gY3R4LmNvbnRleHQuc2Vzc2lvbjtcbiAgICByZXR1cm4ge1xuICAgICAgc2Vzc2lvblxuICAgIH07XG4gIH1cbik7XG5cbmNvbnN0IHJvbGUgPSB6LnN0cmluZygpO1xuY29uc3QgaW52aXRhdGlvblN0YXR1cyA9IHouZW51bShbXCJwZW5kaW5nXCIsIFwiYWNjZXB0ZWRcIiwgXCJyZWplY3RlZFwiLCBcImNhbmNlbGVkXCJdKS5kZWZhdWx0KFwicGVuZGluZ1wiKTtcbnoub2JqZWN0KHtcbiAgaWQ6IHouc3RyaW5nKCkuZGVmYXVsdChnZW5lcmF0ZUlkKSxcbiAgbmFtZTogei5zdHJpbmcoKSxcbiAgc2x1Zzogei5zdHJpbmcoKSxcbiAgbG9nbzogei5zdHJpbmcoKS5udWxsaXNoKCkub3B0aW9uYWwoKSxcbiAgbWV0YWRhdGE6IHoucmVjb3JkKHouc3RyaW5nKCksIHoudW5rbm93bigpKS5vcih6LnN0cmluZygpLnRyYW5zZm9ybSgodikgPT4gSlNPTi5wYXJzZSh2KSkpLm9wdGlvbmFsKCksXG4gIGNyZWF0ZWRBdDogei5kYXRlKClcbn0pO1xuei5vYmplY3Qoe1xuICBpZDogei5zdHJpbmcoKS5kZWZhdWx0KGdlbmVyYXRlSWQpLFxuICBvcmdhbml6YXRpb25JZDogei5zdHJpbmcoKSxcbiAgdXNlcklkOiB6LmNvZXJjZS5zdHJpbmcoKSxcbiAgcm9sZSxcbiAgY3JlYXRlZEF0OiB6LmRhdGUoKS5kZWZhdWx0KCgpID0+IC8qIEBfX1BVUkVfXyAqLyBuZXcgRGF0ZSgpKVxufSk7XG56Lm9iamVjdCh7XG4gIGlkOiB6LnN0cmluZygpLmRlZmF1bHQoZ2VuZXJhdGVJZCksXG4gIG9yZ2FuaXphdGlvbklkOiB6LnN0cmluZygpLFxuICBlbWFpbDogei5zdHJpbmcoKSxcbiAgcm9sZSxcbiAgc3RhdHVzOiBpbnZpdGF0aW9uU3RhdHVzLFxuICB0ZWFtSWQ6IHouc3RyaW5nKCkubnVsbGlzaCgpLFxuICBpbnZpdGVySWQ6IHouc3RyaW5nKCksXG4gIGV4cGlyZXNBdDogei5kYXRlKClcbn0pO1xuY29uc3QgdGVhbVNjaGVtYSA9IHoub2JqZWN0KHtcbiAgaWQ6IHouc3RyaW5nKCkuZGVmYXVsdChnZW5lcmF0ZUlkKSxcbiAgbmFtZTogei5zdHJpbmcoKS5taW4oMSksXG4gIG9yZ2FuaXphdGlvbklkOiB6LnN0cmluZygpLFxuICBjcmVhdGVkQXQ6IHouZGF0ZSgpLFxuICB1cGRhdGVkQXQ6IHouZGF0ZSgpLm9wdGlvbmFsKClcbn0pO1xuei5vYmplY3Qoe1xuICBpZDogei5zdHJpbmcoKS5kZWZhdWx0KGdlbmVyYXRlSWQpLFxuICB0ZWFtSWQ6IHouc3RyaW5nKCksXG4gIHVzZXJJZDogei5zdHJpbmcoKSxcbiAgY3JlYXRlZEF0OiB6LmRhdGUoKS5kZWZhdWx0KCgpID0+IC8qIEBfX1BVUkVfXyAqLyBuZXcgRGF0ZSgpKVxufSk7XG56Lm9iamVjdCh7XG4gIGlkOiB6LnN0cmluZygpLmRlZmF1bHQoZ2VuZXJhdGVJZCksXG4gIG9yZ2FuaXphdGlvbklkOiB6LnN0cmluZygpLFxuICByb2xlOiB6LnN0cmluZygpLFxuICBwZXJtaXNzaW9uOiB6LnJlY29yZCh6LnN0cmluZygpLCB6LmFycmF5KHouc3RyaW5nKCkpKSxcbiAgY3JlYXRlZEF0OiB6LmRhdGUoKS5kZWZhdWx0KCgpID0+IC8qIEBfX1BVUkVfXyAqLyBuZXcgRGF0ZSgpKSxcbiAgdXBkYXRlZEF0OiB6LmRhdGUoKS5vcHRpb25hbCgpXG59KTtcbmNvbnN0IGRlZmF1bHRSb2xlcyA9IFtcImFkbWluXCIsIFwibWVtYmVyXCIsIFwib3duZXJcIl07XG56LnVuaW9uKFtcbiAgei5lbnVtKGRlZmF1bHRSb2xlcyksXG4gIHouYXJyYXkoei5lbnVtKGRlZmF1bHRSb2xlcykpXG5dKTtcblxuZXhwb3J0IHsgb3JnU2Vzc2lvbk1pZGRsZXdhcmUgYXMgYSwgb3JnTWlkZGxld2FyZSBhcyBvLCB0ZWFtU2NoZW1hIGFzIHQgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.CJoIWSTC.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.CW6D9eSx.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.CW6D9eSx.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   g: () => (/* binding */ getDate)\n/* harmony export */ });\nconst getDate = (span, unit = \"ms\") => {\n  return new Date(Date.now() + (unit === \"sec\" ? span * 1e3 : span));\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguQ1c2RDllU3gubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7O0FBRXdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXV0b3BsYW5jYW0vLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguQ1c2RDllU3gubWpzPzkyZWIiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZ2V0RGF0ZSA9IChzcGFuLCB1bml0ID0gXCJtc1wiKSA9PiB7XG4gIHJldHVybiBuZXcgRGF0ZShEYXRlLm5vdygpICsgKHVuaXQgPT09IFwic2VjXCIgPyBzcGFuICogMWUzIDogc3BhbikpO1xufTtcblxuZXhwb3J0IHsgZ2V0RGF0ZSBhcyBnIH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.CW6D9eSx.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.CiuwFiHM.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.CiuwFiHM.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   E: () => (/* binding */ ENV),\n/* harmony export */   a: () => (/* binding */ isDevelopment),\n/* harmony export */   b: () => (/* binding */ isProduction),\n/* harmony export */   c: () => (/* binding */ getBooleanEnvVar),\n/* harmony export */   e: () => (/* binding */ env),\n/* harmony export */   g: () => (/* binding */ getEnvVar),\n/* harmony export */   i: () => (/* binding */ isTest)\n/* harmony export */ });\nconst _envShim = /* @__PURE__ */ Object.create(null);\nconst _getEnv = (useShim) => globalThis.process?.env || //@ts-expect-error\nglobalThis.Deno?.env.toObject() || //@ts-expect-error\nglobalThis.__env__ || (useShim ? _envShim : globalThis);\nconst env = new Proxy(_envShim, {\n  get(_, prop) {\n    const env2 = _getEnv();\n    return env2[prop] ?? _envShim[prop];\n  },\n  has(_, prop) {\n    const env2 = _getEnv();\n    return prop in env2 || prop in _envShim;\n  },\n  set(_, prop, value) {\n    const env2 = _getEnv(true);\n    env2[prop] = value;\n    return true;\n  },\n  deleteProperty(_, prop) {\n    if (!prop) {\n      return false;\n    }\n    const env2 = _getEnv(true);\n    delete env2[prop];\n    return true;\n  },\n  ownKeys() {\n    const env2 = _getEnv(true);\n    return Object.keys(env2);\n  }\n});\nfunction toBoolean(val) {\n  return val ? val !== \"false\" : false;\n}\nconst nodeENV = typeof process !== \"undefined\" && process.env && \"development\" || \"\";\nconst isProduction = nodeENV === \"production\";\nconst isDevelopment = nodeENV === \"dev\" || nodeENV === \"development\";\nconst isTest = () => nodeENV === \"test\" || toBoolean(env.TEST);\nfunction getEnvVar(key, fallback) {\n  if (typeof process !== \"undefined\" && process.env) {\n    return process.env[key] ?? fallback;\n  }\n  if (typeof Deno !== \"undefined\") {\n    return Deno.env.get(key) ?? fallback;\n  }\n  if (typeof Bun !== \"undefined\") {\n    return Bun.env[key] ?? fallback;\n  }\n  return fallback;\n}\nfunction getBooleanEnvVar(key, fallback = true) {\n  const value = getEnvVar(key);\n  if (!value) return fallback;\n  return value !== \"0\" && value.toLowerCase() !== \"false\" && value !== \"\";\n}\nconst ENV = {\n  get BETTER_AUTH_TELEMETRY_ENDPOINT() {\n    return getEnvVar(\n      \"BETTER_AUTH_TELEMETRY_ENDPOINT\",\n      \"https://telemetry.better-auth.com/v1/track\"\n    );\n  }\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguQ2l1d0ZpSE0ubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxpRUFBaUUsYUFBb0I7QUFDckY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRXlIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXV0b3BsYW5jYW0vLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguQ2l1d0ZpSE0ubWpzP2NmNWQiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgX2VudlNoaW0gPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbmNvbnN0IF9nZXRFbnYgPSAodXNlU2hpbSkgPT4gZ2xvYmFsVGhpcy5wcm9jZXNzPy5lbnYgfHwgLy9AdHMtZXhwZWN0LWVycm9yXG5nbG9iYWxUaGlzLkRlbm8/LmVudi50b09iamVjdCgpIHx8IC8vQHRzLWV4cGVjdC1lcnJvclxuZ2xvYmFsVGhpcy5fX2Vudl9fIHx8ICh1c2VTaGltID8gX2VudlNoaW0gOiBnbG9iYWxUaGlzKTtcbmNvbnN0IGVudiA9IG5ldyBQcm94eShfZW52U2hpbSwge1xuICBnZXQoXywgcHJvcCkge1xuICAgIGNvbnN0IGVudjIgPSBfZ2V0RW52KCk7XG4gICAgcmV0dXJuIGVudjJbcHJvcF0gPz8gX2VudlNoaW1bcHJvcF07XG4gIH0sXG4gIGhhcyhfLCBwcm9wKSB7XG4gICAgY29uc3QgZW52MiA9IF9nZXRFbnYoKTtcbiAgICByZXR1cm4gcHJvcCBpbiBlbnYyIHx8IHByb3AgaW4gX2VudlNoaW07XG4gIH0sXG4gIHNldChfLCBwcm9wLCB2YWx1ZSkge1xuICAgIGNvbnN0IGVudjIgPSBfZ2V0RW52KHRydWUpO1xuICAgIGVudjJbcHJvcF0gPSB2YWx1ZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcbiAgZGVsZXRlUHJvcGVydHkoXywgcHJvcCkge1xuICAgIGlmICghcHJvcCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCBlbnYyID0gX2dldEVudih0cnVlKTtcbiAgICBkZWxldGUgZW52Mltwcm9wXTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcbiAgb3duS2V5cygpIHtcbiAgICBjb25zdCBlbnYyID0gX2dldEVudih0cnVlKTtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMoZW52Mik7XG4gIH1cbn0pO1xuZnVuY3Rpb24gdG9Cb29sZWFuKHZhbCkge1xuICByZXR1cm4gdmFsID8gdmFsICE9PSBcImZhbHNlXCIgOiBmYWxzZTtcbn1cbmNvbnN0IG5vZGVFTlYgPSB0eXBlb2YgcHJvY2VzcyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBwcm9jZXNzLmVudiAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViB8fCBcIlwiO1xuY29uc3QgaXNQcm9kdWN0aW9uID0gbm9kZUVOViA9PT0gXCJwcm9kdWN0aW9uXCI7XG5jb25zdCBpc0RldmVsb3BtZW50ID0gbm9kZUVOViA9PT0gXCJkZXZcIiB8fCBub2RlRU5WID09PSBcImRldmVsb3BtZW50XCI7XG5jb25zdCBpc1Rlc3QgPSAoKSA9PiBub2RlRU5WID09PSBcInRlc3RcIiB8fCB0b0Jvb2xlYW4oZW52LlRFU1QpO1xuZnVuY3Rpb24gZ2V0RW52VmFyKGtleSwgZmFsbGJhY2spIHtcbiAgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSBcInVuZGVmaW5lZFwiICYmIHByb2Nlc3MuZW52KSB7XG4gICAgcmV0dXJuIHByb2Nlc3MuZW52W2tleV0gPz8gZmFsbGJhY2s7XG4gIH1cbiAgaWYgKHR5cGVvZiBEZW5vICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIERlbm8uZW52LmdldChrZXkpID8/IGZhbGxiYWNrO1xuICB9XG4gIGlmICh0eXBlb2YgQnVuICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIEJ1bi5lbnZba2V5XSA/PyBmYWxsYmFjaztcbiAgfVxuICByZXR1cm4gZmFsbGJhY2s7XG59XG5mdW5jdGlvbiBnZXRCb29sZWFuRW52VmFyKGtleSwgZmFsbGJhY2sgPSB0cnVlKSB7XG4gIGNvbnN0IHZhbHVlID0gZ2V0RW52VmFyKGtleSk7XG4gIGlmICghdmFsdWUpIHJldHVybiBmYWxsYmFjaztcbiAgcmV0dXJuIHZhbHVlICE9PSBcIjBcIiAmJiB2YWx1ZS50b0xvd2VyQ2FzZSgpICE9PSBcImZhbHNlXCIgJiYgdmFsdWUgIT09IFwiXCI7XG59XG5jb25zdCBFTlYgPSB7XG4gIGdldCBCRVRURVJfQVVUSF9URUxFTUVUUllfRU5EUE9JTlQoKSB7XG4gICAgcmV0dXJuIGdldEVudlZhcihcbiAgICAgIFwiQkVUVEVSX0FVVEhfVEVMRU1FVFJZX0VORFBPSU5UXCIsXG4gICAgICBcImh0dHBzOi8vdGVsZW1ldHJ5LmJldHRlci1hdXRoLmNvbS92MS90cmFja1wiXG4gICAgKTtcbiAgfVxufTtcblxuZXhwb3J0IHsgRU5WIGFzIEUsIGlzRGV2ZWxvcG1lbnQgYXMgYSwgaXNQcm9kdWN0aW9uIGFzIGIsIGdldEJvb2xlYW5FbnZWYXIgYXMgYywgZW52IGFzIGUsIGdldEVudlZhciBhcyBnLCBpc1Rlc3QgYXMgaSB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.CiuwFiHM.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.D-2CmEwz.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.D-2CmEwz.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   c: () => (/* binding */ capitalizeFirstLetter)\n/* harmony export */ });\nfunction capitalizeFirstLetter(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguRC0yQ21Fd3oubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7O0FBRXNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXV0b3BsYW5jYW0vLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguRC0yQ21Fd3oubWpzP2VhNTEiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gY2FwaXRhbGl6ZUZpcnN0TGV0dGVyKHN0cikge1xuICByZXR1cm4gc3RyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyLnNsaWNlKDEpO1xufVxuXG5leHBvcnQgeyBjYXBpdGFsaXplRmlyc3RMZXR0ZXIgYXMgYyB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.D-2CmEwz.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.D-L3RQ6y.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.D-L3RQ6y.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ getAdapter),\n/* harmony export */   b: () => (/* binding */ convertToDB),\n/* harmony export */   c: () => (/* binding */ createInternalAdapter),\n/* harmony export */   d: () => (/* binding */ convertFromDB),\n/* harmony export */   e: () => (/* binding */ getMigrations),\n/* harmony export */   f: () => (/* binding */ getSchema),\n/* harmony export */   g: () => (/* binding */ getWithHooks),\n/* harmony export */   m: () => (/* binding */ matchType)\n/* harmony export */ });\n/* harmony import */ var _better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./better-auth.CW6D9eSx.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.CW6D9eSx.mjs\");\n/* harmony import */ var _better_auth_BLnvK9hk_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./better-auth.BLnvK9hk.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.BLnvK9hk.mjs\");\n/* harmony import */ var _better_auth_BQOp_6ij_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./better-auth.BQOp-6ij.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.BQOp-6ij.mjs\");\n/* harmony import */ var _better_auth_BTrSrKsi_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./better-auth.BTrSrKsi.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.BTrSrKsi.mjs\");\n/* harmony import */ var _better_auth_BUPPRXfK_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./better-auth.BUPPRXfK.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.BUPPRXfK.mjs\");\n/* harmony import */ var better_call__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! better-call */ \"(rsc)/./node_modules/better-call/dist/index.js\");\n/* harmony import */ var _better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @better-auth/utils/hash */ \"(rsc)/./node_modules/@better-auth/utils/dist/hash.mjs\");\n/* harmony import */ var _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @better-auth/utils/base64 */ \"(rsc)/./node_modules/@better-auth/utils/dist/base64.mjs\");\n/* harmony import */ var _better_auth_utils_hex__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @better-auth/utils/hex */ \"(rsc)/./node_modules/@better-auth/utils/dist/hex.mjs\");\n/* harmony import */ var _better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./better-auth.B4Qoxdgc.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs\");\n/* harmony import */ var _better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./better-auth.DgGir396.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DgGir396.mjs\");\n/* harmony import */ var _better_auth_core_db__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @better-auth/core/db */ \"(rsc)/./node_modules/@better-auth/core/dist/db/index.mjs\");\n/* harmony import */ var _better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./better-auth.CiuwFiHM.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.CiuwFiHM.mjs\");\n/* harmony import */ var _better_auth_utils_random__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @better-auth/utils/random */ \"(rsc)/./node_modules/@better-auth/utils/dist/random.mjs\");\n/* harmony import */ var _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./better-auth.DdzSJf-n.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs\");\n/* harmony import */ var _better_auth_DhziC0ap_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./better-auth.DhziC0ap.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DhziC0ap.mjs\");\n/* harmony import */ var _better_auth_BAk2ZmIN_mjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./better-auth.BAk2ZmIN.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.BAk2ZmIN.mjs\");\n/* harmony import */ var _better_auth_QSZgH9k6_mjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./better-auth.QSZgH9k6.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.QSZgH9k6.mjs\");\n/* harmony import */ var kysely__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! kysely */ \"(rsc)/./node_modules/kysely/dist/esm/raw-builder/sql.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction getWithHooks(adapter, ctx) {\n  const hooks = ctx.hooks;\n  async function createWithHooks(data, model, customCreateFn, context, trxAdapter) {\n    let actualData = data;\n    for (const hook of hooks || []) {\n      const toRun = hook[model]?.create?.before;\n      if (toRun) {\n        const result = await toRun(actualData, context);\n        if (result === false) {\n          return null;\n        }\n        const isObject = typeof result === \"object\" && \"data\" in result;\n        if (isObject) {\n          actualData = {\n            ...actualData,\n            ...result.data\n          };\n        }\n      }\n    }\n    const customCreated = customCreateFn ? await customCreateFn.fn(actualData) : null;\n    const created = !customCreateFn || customCreateFn.executeMainFn ? await (trxAdapter || adapter).create({\n      model,\n      data: actualData,\n      forceAllowId: true\n    }) : customCreated;\n    for (const hook of hooks || []) {\n      const toRun = hook[model]?.create?.after;\n      if (toRun) {\n        await toRun(created, context);\n      }\n    }\n    return created;\n  }\n  async function updateWithHooks(data, where, model, customUpdateFn, context, trxAdapter) {\n    let actualData = data;\n    for (const hook of hooks || []) {\n      const toRun = hook[model]?.update?.before;\n      if (toRun) {\n        const result = await toRun(data, context);\n        if (result === false) {\n          return null;\n        }\n        const isObject = typeof result === \"object\";\n        actualData = isObject ? result.data : result;\n      }\n    }\n    const customUpdated = customUpdateFn ? await customUpdateFn.fn(actualData) : null;\n    const updated = !customUpdateFn || customUpdateFn.executeMainFn ? await (trxAdapter || adapter).update({\n      model,\n      update: actualData,\n      where\n    }) : customUpdated;\n    for (const hook of hooks || []) {\n      const toRun = hook[model]?.update?.after;\n      if (toRun) {\n        await toRun(updated, context);\n      }\n    }\n    return updated;\n  }\n  async function updateManyWithHooks(data, where, model, customUpdateFn, context, trxAdapter) {\n    let actualData = data;\n    for (const hook of hooks || []) {\n      const toRun = hook[model]?.update?.before;\n      if (toRun) {\n        const result = await toRun(data, context);\n        if (result === false) {\n          return null;\n        }\n        const isObject = typeof result === \"object\";\n        actualData = isObject ? result.data : result;\n      }\n    }\n    const customUpdated = customUpdateFn ? await customUpdateFn.fn(actualData) : null;\n    const updated = !customUpdateFn || customUpdateFn.executeMainFn ? await (trxAdapter || adapter).updateMany({\n      model,\n      update: actualData,\n      where\n    }) : customUpdated;\n    for (const hook of hooks || []) {\n      const toRun = hook[model]?.update?.after;\n      if (toRun) {\n        await toRun(updated, context);\n      }\n    }\n    return updated;\n  }\n  return {\n    createWithHooks,\n    updateWithHooks,\n    updateManyWithHooks\n  };\n}\n\nconst createInternalAdapter = (adapter, ctx) => {\n  const logger = ctx.logger;\n  const options = ctx.options;\n  const secondaryStorage = options.secondaryStorage;\n  const sessionExpiration = options.session?.expiresIn || 60 * 60 * 24 * 7;\n  const { createWithHooks, updateWithHooks, updateManyWithHooks } = getWithHooks(adapter, ctx);\n  async function refreshUserSessions(user) {\n    if (!secondaryStorage) return;\n    const listRaw = await secondaryStorage.get(`active-sessions-${user.id}`);\n    if (!listRaw) return;\n    const now = Date.now();\n    const list = (0,_better_auth_BTrSrKsi_mjs__WEBPACK_IMPORTED_MODULE_3__.s)(listRaw) || [];\n    const validSessions = list.filter((s) => s.expiresAt > now);\n    await Promise.all(\n      validSessions.map(async ({ token }) => {\n        const cached = await secondaryStorage.get(token);\n        if (!cached) return;\n        const parsed = (0,_better_auth_BTrSrKsi_mjs__WEBPACK_IMPORTED_MODULE_3__.s)(cached);\n        if (!parsed) return;\n        const sessionTTL = Math.max(\n          Math.floor(new Date(parsed.session.expiresAt).getTime() - now) / 1e3,\n          0\n        );\n        await secondaryStorage.set(\n          token,\n          JSON.stringify({\n            session: parsed.session,\n            user\n          }),\n          Math.floor(sessionTTL)\n        );\n      })\n    );\n  }\n  return {\n    createOAuthUser: async (user, account, context) => {\n      return adapter.transaction(async (trxAdapter) => {\n        const createdUser = await createWithHooks(\n          {\n            // todo: we should remove auto setting createdAt and updatedAt in the next major release, since the db generators already handle that\n            createdAt: /* @__PURE__ */ new Date(),\n            updatedAt: /* @__PURE__ */ new Date(),\n            ...user\n          },\n          \"user\",\n          void 0,\n          context,\n          trxAdapter\n        );\n        const createdAccount = await createWithHooks(\n          {\n            ...account,\n            userId: createdUser.id,\n            // todo: we should remove auto setting createdAt and updatedAt in the next major release, since the db generators already handle that\n            createdAt: /* @__PURE__ */ new Date(),\n            updatedAt: /* @__PURE__ */ new Date()\n          },\n          \"account\",\n          void 0,\n          context,\n          trxAdapter\n        );\n        return {\n          user: createdUser,\n          account: createdAccount\n        };\n      });\n    },\n    createUser: async (user, context, trxAdapter) => {\n      const createdUser = await createWithHooks(\n        {\n          // todo: we should remove auto setting createdAt and updatedAt in the next major release, since the db generators already handle that\n          createdAt: /* @__PURE__ */ new Date(),\n          updatedAt: /* @__PURE__ */ new Date(),\n          ...user,\n          email: user.email?.toLowerCase()\n        },\n        \"user\",\n        void 0,\n        context,\n        trxAdapter\n      );\n      return createdUser;\n    },\n    createAccount: async (account, context, trxAdapter) => {\n      const createdAccount = await createWithHooks(\n        {\n          // todo: we should remove auto setting createdAt and updatedAt in the next major release, since the db generators already handle that\n          createdAt: /* @__PURE__ */ new Date(),\n          updatedAt: /* @__PURE__ */ new Date(),\n          ...account\n        },\n        \"account\",\n        void 0,\n        context,\n        trxAdapter\n      );\n      return createdAccount;\n    },\n    listSessions: async (userId, trxAdapter) => {\n      if (secondaryStorage) {\n        const currentList = await secondaryStorage.get(\n          `active-sessions-${userId}`\n        );\n        if (!currentList) return [];\n        const list = (0,_better_auth_BTrSrKsi_mjs__WEBPACK_IMPORTED_MODULE_3__.s)(currentList) || [];\n        const now = Date.now();\n        const validSessions = list.filter((s) => s.expiresAt > now);\n        const sessions2 = [];\n        for (const session of validSessions) {\n          const sessionStringified = await secondaryStorage.get(session.token);\n          if (sessionStringified) {\n            const s = (0,_better_auth_BTrSrKsi_mjs__WEBPACK_IMPORTED_MODULE_3__.s)(sessionStringified);\n            if (!s) return [];\n            const parsedSession = (0,_better_auth_BLnvK9hk_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(ctx.options, {\n              ...s.session,\n              expiresAt: new Date(s.session.expiresAt)\n            });\n            sessions2.push(parsedSession);\n          }\n        }\n        return sessions2;\n      }\n      const sessions = await (trxAdapter || adapter).findMany({\n        model: \"session\",\n        where: [\n          {\n            field: \"userId\",\n            value: userId\n          }\n        ]\n      });\n      return sessions;\n    },\n    listUsers: async (limit, offset, sortBy, where, trxAdapter) => {\n      const users = await (trxAdapter || adapter).findMany({\n        model: \"user\",\n        limit,\n        offset,\n        sortBy,\n        where\n      });\n      return users;\n    },\n    countTotalUsers: async (where, trxAdapter) => {\n      const total = await (trxAdapter || adapter).count({\n        model: \"user\",\n        where\n      });\n      if (typeof total === \"string\") {\n        return parseInt(total);\n      }\n      return total;\n    },\n    deleteUser: async (userId, trxAdapter) => {\n      if (secondaryStorage) {\n        await secondaryStorage.delete(`active-sessions-${userId}`);\n      }\n      if (!secondaryStorage || options.session?.storeSessionInDatabase) {\n        await (trxAdapter || adapter).deleteMany({\n          model: \"session\",\n          where: [\n            {\n              field: \"userId\",\n              value: userId\n            }\n          ]\n        });\n      }\n      await (trxAdapter || adapter).deleteMany({\n        model: \"account\",\n        where: [\n          {\n            field: \"userId\",\n            value: userId\n          }\n        ]\n      });\n      await (trxAdapter || adapter).delete({\n        model: \"user\",\n        where: [\n          {\n            field: \"id\",\n            value: userId\n          }\n        ]\n      });\n    },\n    createSession: async (userId, ctx2, dontRememberMe, override, overrideAll, trxAdapter) => {\n      const headers = ctx2.headers || ctx2.request?.headers;\n      const { id: _, ...rest } = override || {};\n      const data = {\n        ipAddress: ctx2.request || ctx2.headers ? (0,_better_auth_BQOp_6ij_mjs__WEBPACK_IMPORTED_MODULE_2__.g)(ctx2.request || ctx2.headers, ctx2.context.options) || \"\" : \"\",\n        userAgent: headers?.get(\"user-agent\") || \"\",\n        ...rest,\n        /**\n         * If the user doesn't want to be remembered\n         * set the session to expire in 1 day.\n         * The cookie will be set to expire at the end of the session\n         */\n        expiresAt: dontRememberMe ? (0,_better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(60 * 60 * 24, \"sec\") : (0,_better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(sessionExpiration, \"sec\"),\n        userId,\n        token: (0,_better_auth_BUPPRXfK_mjs__WEBPACK_IMPORTED_MODULE_4__.g)(32),\n        // todo: we should remove auto setting createdAt and updatedAt in the next major release, since the db generators already handle that\n        createdAt: /* @__PURE__ */ new Date(),\n        updatedAt: /* @__PURE__ */ new Date(),\n        ...overrideAll ? rest : {}\n      };\n      const res = await createWithHooks(\n        data,\n        \"session\",\n        secondaryStorage ? {\n          fn: async (sessionData) => {\n            const currentList = await secondaryStorage.get(\n              `active-sessions-${userId}`\n            );\n            let list = [];\n            const now = Date.now();\n            if (currentList) {\n              list = (0,_better_auth_BTrSrKsi_mjs__WEBPACK_IMPORTED_MODULE_3__.s)(currentList) || [];\n              list = list.filter((session) => session.expiresAt > now);\n            }\n            const sorted = list.sort((a, b) => a.expiresAt - b.expiresAt);\n            let furthestSessionExp = sorted.at(-1)?.expiresAt;\n            sorted.push({\n              token: data.token,\n              expiresAt: data.expiresAt.getTime()\n            });\n            if (!furthestSessionExp || furthestSessionExp < data.expiresAt.getTime()) {\n              furthestSessionExp = data.expiresAt.getTime();\n            }\n            const furthestSessionTTL = Math.max(\n              Math.floor((furthestSessionExp - now) / 1e3),\n              0\n            );\n            if (furthestSessionTTL > 0) {\n              await secondaryStorage.set(\n                `active-sessions-${userId}`,\n                JSON.stringify(sorted),\n                furthestSessionTTL\n              );\n            }\n            const user = await adapter.findOne({\n              model: \"user\",\n              where: [\n                {\n                  field: \"id\",\n                  value: userId\n                }\n              ]\n            });\n            const sessionTTL = Math.max(\n              Math.floor((data.expiresAt.getTime() - now) / 1e3),\n              0\n            );\n            if (sessionTTL > 0) {\n              await secondaryStorage.set(\n                data.token,\n                JSON.stringify({\n                  session: sessionData,\n                  user\n                }),\n                sessionTTL\n              );\n            }\n            return sessionData;\n          },\n          executeMainFn: options.session?.storeSessionInDatabase\n        } : void 0,\n        ctx2,\n        trxAdapter\n      );\n      return res;\n    },\n    findSession: async (token, trxAdapter) => {\n      if (secondaryStorage) {\n        const sessionStringified = await secondaryStorage.get(token);\n        if (!sessionStringified && !options.session?.storeSessionInDatabase) {\n          return null;\n        }\n        if (sessionStringified) {\n          const s = (0,_better_auth_BTrSrKsi_mjs__WEBPACK_IMPORTED_MODULE_3__.s)(sessionStringified);\n          if (!s) return null;\n          const parsedSession2 = (0,_better_auth_BLnvK9hk_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(ctx.options, {\n            ...s.session,\n            expiresAt: new Date(s.session.expiresAt),\n            createdAt: new Date(s.session.createdAt),\n            updatedAt: new Date(s.session.updatedAt)\n          });\n          const parsedUser2 = (0,_better_auth_BLnvK9hk_mjs__WEBPACK_IMPORTED_MODULE_1__.p)(ctx.options, {\n            ...s.user,\n            createdAt: new Date(s.user.createdAt),\n            updatedAt: new Date(s.user.updatedAt)\n          });\n          return {\n            session: parsedSession2,\n            user: parsedUser2\n          };\n        }\n      }\n      const session = await (trxAdapter || adapter).findOne({\n        model: \"session\",\n        where: [\n          {\n            value: token,\n            field: \"token\"\n          }\n        ]\n      });\n      if (!session) {\n        return null;\n      }\n      const user = await (trxAdapter || adapter).findOne({\n        model: \"user\",\n        where: [\n          {\n            value: session.userId,\n            field: \"id\"\n          }\n        ]\n      });\n      if (!user) {\n        return null;\n      }\n      const parsedSession = (0,_better_auth_BLnvK9hk_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(ctx.options, session);\n      const parsedUser = (0,_better_auth_BLnvK9hk_mjs__WEBPACK_IMPORTED_MODULE_1__.p)(ctx.options, user);\n      return {\n        session: parsedSession,\n        user: parsedUser\n      };\n    },\n    findSessions: async (sessionTokens, trxAdapter) => {\n      if (secondaryStorage) {\n        const sessions2 = [];\n        for (const sessionToken of sessionTokens) {\n          const sessionStringified = await secondaryStorage.get(sessionToken);\n          if (sessionStringified) {\n            const s = (0,_better_auth_BTrSrKsi_mjs__WEBPACK_IMPORTED_MODULE_3__.s)(sessionStringified);\n            if (!s) return [];\n            const session = {\n              session: {\n                ...s.session,\n                expiresAt: new Date(s.session.expiresAt)\n              },\n              user: {\n                ...s.user,\n                createdAt: new Date(s.user.createdAt),\n                updatedAt: new Date(s.user.updatedAt)\n              }\n            };\n            sessions2.push(session);\n          }\n        }\n        return sessions2;\n      }\n      const sessions = await (trxAdapter || adapter).findMany({\n        model: \"session\",\n        where: [\n          {\n            field: \"token\",\n            value: sessionTokens,\n            operator: \"in\"\n          }\n        ]\n      });\n      const userIds = sessions.map((session) => {\n        return session.userId;\n      });\n      if (!userIds.length) return [];\n      const users = await (trxAdapter || adapter).findMany({\n        model: \"user\",\n        where: [\n          {\n            field: \"id\",\n            value: userIds,\n            operator: \"in\"\n          }\n        ]\n      });\n      return sessions.map((session) => {\n        const user = users.find((u) => u.id === session.userId);\n        if (!user) return null;\n        return {\n          session,\n          user\n        };\n      });\n    },\n    updateSession: async (sessionToken, session, context, trxAdapter) => {\n      const updatedSession = await updateWithHooks(\n        session,\n        [{ field: \"token\", value: sessionToken }],\n        \"session\",\n        secondaryStorage ? {\n          async fn(data) {\n            const currentSession = await secondaryStorage.get(sessionToken);\n            let updatedSession2 = null;\n            if (currentSession) {\n              const parsedSession = (0,_better_auth_BTrSrKsi_mjs__WEBPACK_IMPORTED_MODULE_3__.s)(currentSession);\n              if (!parsedSession) return null;\n              updatedSession2 = {\n                ...parsedSession.session,\n                ...data\n              };\n              return updatedSession2;\n            } else {\n              return null;\n            }\n          },\n          executeMainFn: options.session?.storeSessionInDatabase\n        } : void 0,\n        context,\n        trxAdapter\n      );\n      return updatedSession;\n    },\n    deleteSession: async (token, trxAdapter) => {\n      if (secondaryStorage) {\n        const data = await secondaryStorage.get(token);\n        if (data) {\n          const { session } = (0,_better_auth_BTrSrKsi_mjs__WEBPACK_IMPORTED_MODULE_3__.s)(data) ?? {};\n          if (!session) {\n            logger.error(\"Session not found in secondary storage\");\n            return;\n          }\n          const userId = session.userId;\n          const currentList = await secondaryStorage.get(\n            `active-sessions-${userId}`\n          );\n          if (currentList) {\n            let list = (0,_better_auth_BTrSrKsi_mjs__WEBPACK_IMPORTED_MODULE_3__.s)(currentList) || [];\n            const now = Date.now();\n            const filtered = list.filter(\n              (session2) => session2.expiresAt > now && session2.token !== token\n            );\n            const sorted = filtered.sort((a, b) => a.expiresAt - b.expiresAt);\n            const furthestSessionExp = sorted.at(-1)?.expiresAt;\n            if (filtered.length > 0 && furthestSessionExp && furthestSessionExp > Date.now()) {\n              await secondaryStorage.set(\n                `active-sessions-${userId}`,\n                JSON.stringify(filtered),\n                Math.floor((furthestSessionExp - now) / 1e3)\n              );\n            } else {\n              await secondaryStorage.delete(`active-sessions-${userId}`);\n            }\n          } else {\n            logger.error(\"Active sessions list not found in secondary storage\");\n          }\n        }\n        await secondaryStorage.delete(token);\n        if (!options.session?.storeSessionInDatabase || ctx.options.session?.preserveSessionInDatabase) {\n          return;\n        }\n      }\n      await (trxAdapter || adapter).delete({\n        model: \"session\",\n        where: [\n          {\n            field: \"token\",\n            value: token\n          }\n        ]\n      });\n    },\n    deleteAccounts: async (userId, trxAdapter) => {\n      await (trxAdapter || adapter).deleteMany({\n        model: \"account\",\n        where: [\n          {\n            field: \"userId\",\n            value: userId\n          }\n        ]\n      });\n    },\n    deleteAccount: async (accountId, trxAdapter) => {\n      await (trxAdapter || adapter).delete({\n        model: \"account\",\n        where: [\n          {\n            field: \"id\",\n            value: accountId\n          }\n        ]\n      });\n    },\n    deleteSessions: async (userIdOrSessionTokens, trxAdapter) => {\n      if (secondaryStorage) {\n        if (typeof userIdOrSessionTokens === \"string\") {\n          const activeSession = await secondaryStorage.get(\n            `active-sessions-${userIdOrSessionTokens}`\n          );\n          const sessions = activeSession ? (0,_better_auth_BTrSrKsi_mjs__WEBPACK_IMPORTED_MODULE_3__.s)(activeSession) : [];\n          if (!sessions) return;\n          for (const session of sessions) {\n            await secondaryStorage.delete(session.token);\n          }\n        } else {\n          for (const sessionToken of userIdOrSessionTokens) {\n            const session = await secondaryStorage.get(sessionToken);\n            if (session) {\n              await secondaryStorage.delete(sessionToken);\n            }\n          }\n        }\n        if (!options.session?.storeSessionInDatabase || ctx.options.session?.preserveSessionInDatabase) {\n          return;\n        }\n      }\n      await (trxAdapter || adapter).deleteMany({\n        model: \"session\",\n        where: [\n          {\n            field: Array.isArray(userIdOrSessionTokens) ? \"token\" : \"userId\",\n            value: userIdOrSessionTokens,\n            operator: Array.isArray(userIdOrSessionTokens) ? \"in\" : void 0\n          }\n        ]\n      });\n    },\n    findOAuthUser: async (email, accountId, providerId, trxAdapter) => {\n      const account = await (trxAdapter || adapter).findMany({\n        model: \"account\",\n        where: [\n          {\n            value: accountId,\n            field: \"accountId\"\n          }\n        ]\n      }).then((accounts) => {\n        return accounts.find((a) => a.providerId === providerId);\n      });\n      if (account) {\n        const user = await (trxAdapter || adapter).findOne({\n          model: \"user\",\n          where: [\n            {\n              value: account.userId,\n              field: \"id\"\n            }\n          ]\n        });\n        if (user) {\n          return {\n            user,\n            accounts: [account]\n          };\n        } else {\n          const user2 = await (trxAdapter || adapter).findOne({\n            model: \"user\",\n            where: [\n              {\n                value: email.toLowerCase(),\n                field: \"email\"\n              }\n            ]\n          });\n          if (user2) {\n            return {\n              user: user2,\n              accounts: [account]\n            };\n          }\n          return null;\n        }\n      } else {\n        const user = await (trxAdapter || adapter).findOne({\n          model: \"user\",\n          where: [\n            {\n              value: email.toLowerCase(),\n              field: \"email\"\n            }\n          ]\n        });\n        if (user) {\n          const accounts = await (trxAdapter || adapter).findMany({\n            model: \"account\",\n            where: [\n              {\n                value: user.id,\n                field: \"userId\"\n              }\n            ]\n          });\n          return {\n            user,\n            accounts: accounts || []\n          };\n        } else {\n          return null;\n        }\n      }\n    },\n    findUserByEmail: async (email, options2, trxAdapter) => {\n      const user = await (trxAdapter || adapter).findOne({\n        model: \"user\",\n        where: [\n          {\n            value: email.toLowerCase(),\n            field: \"email\"\n          }\n        ]\n      });\n      if (!user) return null;\n      if (options2?.includeAccounts) {\n        const accounts = await (trxAdapter || adapter).findMany({\n          model: \"account\",\n          where: [\n            {\n              value: user.id,\n              field: \"userId\"\n            }\n          ]\n        });\n        return {\n          user,\n          accounts\n        };\n      }\n      return {\n        user,\n        accounts: []\n      };\n    },\n    findUserById: async (userId, trxAdapter) => {\n      const user = await (trxAdapter || adapter).findOne({\n        model: \"user\",\n        where: [\n          {\n            field: \"id\",\n            value: userId\n          }\n        ]\n      });\n      return user;\n    },\n    linkAccount: async (account, context, trxAdapter) => {\n      const _account = await createWithHooks(\n        {\n          // todo: we should remove auto setting createdAt and updatedAt in the next major release, since the db generators already handle that\n          createdAt: /* @__PURE__ */ new Date(),\n          updatedAt: /* @__PURE__ */ new Date(),\n          ...account\n        },\n        \"account\",\n        void 0,\n        context,\n        trxAdapter\n      );\n      return _account;\n    },\n    updateUser: async (userId, data, context, trxAdapter) => {\n      const user = await updateWithHooks(\n        data,\n        [\n          {\n            field: \"id\",\n            value: userId\n          }\n        ],\n        \"user\",\n        void 0,\n        context,\n        trxAdapter\n      );\n      await refreshUserSessions(user);\n      await refreshUserSessions(user);\n      return user;\n    },\n    updateUserByEmail: async (email, data, context, trxAdapter) => {\n      const user = await updateWithHooks(\n        data,\n        [\n          {\n            field: \"email\",\n            value: email.toLowerCase()\n          }\n        ],\n        \"user\",\n        void 0,\n        context,\n        trxAdapter\n      );\n      await refreshUserSessions(user);\n      await refreshUserSessions(user);\n      return user;\n    },\n    updatePassword: async (userId, password, context, trxAdapter) => {\n      await updateManyWithHooks(\n        {\n          password\n        },\n        [\n          {\n            field: \"userId\",\n            value: userId\n          },\n          {\n            field: \"providerId\",\n            value: \"credential\"\n          }\n        ],\n        \"account\",\n        void 0,\n        context,\n        trxAdapter\n      );\n    },\n    findAccounts: async (userId, trxAdapter) => {\n      const accounts = await (trxAdapter || adapter).findMany({\n        model: \"account\",\n        where: [\n          {\n            field: \"userId\",\n            value: userId\n          }\n        ]\n      });\n      return accounts;\n    },\n    findAccount: async (accountId, trxAdapter) => {\n      const account = await (trxAdapter || adapter).findOne({\n        model: \"account\",\n        where: [\n          {\n            field: \"accountId\",\n            value: accountId\n          }\n        ]\n      });\n      return account;\n    },\n    findAccountByProviderId: async (accountId, providerId, trxAdapter) => {\n      const account = await (trxAdapter || adapter).findOne({\n        model: \"account\",\n        where: [\n          {\n            field: \"accountId\",\n            value: accountId\n          },\n          {\n            field: \"providerId\",\n            value: providerId\n          }\n        ]\n      });\n      return account;\n    },\n    findAccountByUserId: async (userId, trxAdapter) => {\n      const account = await (trxAdapter || adapter).findMany({\n        model: \"account\",\n        where: [\n          {\n            field: \"userId\",\n            value: userId\n          }\n        ]\n      });\n      return account;\n    },\n    updateAccount: async (id, data, context, trxAdapter) => {\n      const account = await updateWithHooks(\n        data,\n        [{ field: \"id\", value: id }],\n        \"account\",\n        void 0,\n        context,\n        trxAdapter\n      );\n      return account;\n    },\n    createVerificationValue: async (data, context, trxAdapter) => {\n      const verification = await createWithHooks(\n        {\n          // todo: we should remove auto setting createdAt and updatedAt in the next major release, since the db generators already handle that\n          createdAt: /* @__PURE__ */ new Date(),\n          updatedAt: /* @__PURE__ */ new Date(),\n          ...data\n        },\n        \"verification\",\n        void 0,\n        context,\n        trxAdapter\n      );\n      return verification;\n    },\n    findVerificationValue: async (identifier, trxAdapter) => {\n      const verification = await (trxAdapter || adapter).findMany(\n        {\n          model: \"verification\",\n          where: [\n            {\n              field: \"identifier\",\n              value: identifier\n            }\n          ],\n          sortBy: {\n            field: \"createdAt\",\n            direction: \"desc\"\n          },\n          limit: 1\n        }\n      );\n      if (!options.verification?.disableCleanup) {\n        await (trxAdapter || adapter).deleteMany({\n          model: \"verification\",\n          where: [\n            {\n              field: \"expiresAt\",\n              value: /* @__PURE__ */ new Date(),\n              operator: \"lt\"\n            }\n          ]\n        });\n      }\n      const lastVerification = verification[0];\n      return lastVerification;\n    },\n    deleteVerificationValue: async (id, trxAdapter) => {\n      await (trxAdapter || adapter).delete({\n        model: \"verification\",\n        where: [\n          {\n            field: \"id\",\n            value: id\n          }\n        ]\n      });\n    },\n    deleteVerificationByIdentifier: async (identifier, trxAdapter) => {\n      await (trxAdapter || adapter).delete({\n        model: \"verification\",\n        where: [\n          {\n            field: \"identifier\",\n            value: identifier\n          }\n        ]\n      });\n    },\n    updateVerificationValue: async (id, data, context, trxAdapter) => {\n      const verification = await updateWithHooks(\n        data,\n        [{ field: \"id\", value: id }],\n        \"verification\",\n        void 0,\n        context,\n        trxAdapter\n      );\n      return verification;\n    }\n  };\n};\n\nasync function getAdapter(options) {\n  if (!options.database) {\n    const tables = (0,_better_auth_DhziC0ap_mjs__WEBPACK_IMPORTED_MODULE_15__.g)(options);\n    const memoryDB = Object.keys(tables).reduce((acc, key) => {\n      acc[key] = [];\n      return acc;\n    }, {});\n    _better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_10__.a.warn(\n      \"No database configuration provided. Using memory adapter in development\"\n    );\n    return (0,_better_auth_QSZgH9k6_mjs__WEBPACK_IMPORTED_MODULE_17__.m)(memoryDB)(options);\n  }\n  if (typeof options.database === \"function\") {\n    return options.database(options);\n  }\n  const { kysely, databaseType, transaction } = await (0,_better_auth_BAk2ZmIN_mjs__WEBPACK_IMPORTED_MODULE_16__.c)(options);\n  if (!kysely) {\n    throw new _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_14__.B(\"Failed to initialize database adapter\");\n  }\n  return (0,_better_auth_BAk2ZmIN_mjs__WEBPACK_IMPORTED_MODULE_16__.k)(kysely, {\n    type: databaseType || \"sqlite\",\n    debugLogs: \"debugLogs\" in options.database ? options.database.debugLogs : false,\n    transaction\n  })(options);\n}\nfunction convertToDB(fields, values) {\n  let result = values.id ? {\n    id: values.id\n  } : {};\n  for (const key in fields) {\n    const field = fields[key];\n    const value = values[key];\n    if (value === void 0) {\n      continue;\n    }\n    result[field.fieldName || key] = value;\n  }\n  return result;\n}\nfunction convertFromDB(fields, values) {\n  if (!values) {\n    return null;\n  }\n  let result = {\n    id: values.id\n  };\n  for (const [key, value] of Object.entries(fields)) {\n    result[key] = values[value.fieldName || key];\n  }\n  return result;\n}\n\nfunction getSchema(config) {\n  const tables = (0,_better_auth_DhziC0ap_mjs__WEBPACK_IMPORTED_MODULE_15__.g)(config);\n  let schema = {};\n  for (const key in tables) {\n    const table = tables[key];\n    const fields = table.fields;\n    let actualFields = {};\n    Object.entries(fields).forEach(([key2, field]) => {\n      actualFields[field.fieldName || key2] = field;\n      if (field.references) {\n        const refTable = tables[field.references.model];\n        if (refTable) {\n          actualFields[field.fieldName || key2].references = {\n            ...field.references,\n            model: refTable.modelName,\n            field: field.references.field\n          };\n        }\n      }\n    });\n    if (schema[table.modelName]) {\n      schema[table.modelName].fields = {\n        ...schema[table.modelName].fields,\n        ...actualFields\n      };\n      continue;\n    }\n    schema[table.modelName] = {\n      fields: actualFields,\n      order: table.order || Infinity\n    };\n  }\n  return schema;\n}\n\nconst postgresMap = {\n  string: [\"character varying\", \"varchar\", \"text\"],\n  number: [\n    \"int4\",\n    \"integer\",\n    \"bigint\",\n    \"smallint\",\n    \"numeric\",\n    \"real\",\n    \"double precision\"\n  ],\n  boolean: [\"bool\", \"boolean\"],\n  date: [\"timestamptz\", \"timestamp\", \"date\"],\n  json: [\"json\", \"jsonb\"]\n};\nconst mysqlMap = {\n  string: [\"varchar\", \"text\"],\n  number: [\n    \"integer\",\n    \"int\",\n    \"bigint\",\n    \"smallint\",\n    \"decimal\",\n    \"float\",\n    \"double\"\n  ],\n  boolean: [\"boolean\", \"tinyint\"],\n  date: [\"timestamp\", \"datetime\", \"date\"],\n  json: [\"json\"]\n};\nconst sqliteMap = {\n  string: [\"TEXT\"],\n  number: [\"INTEGER\", \"REAL\"],\n  boolean: [\"INTEGER\", \"BOOLEAN\"],\n  // 0 or 1\n  date: [\"DATE\", \"INTEGER\"],\n  json: [\"TEXT\"]\n};\nconst mssqlMap = {\n  string: [\"varchar\", \"nvarchar\"],\n  number: [\"int\", \"bigint\", \"smallint\", \"decimal\", \"float\", \"double\"],\n  boolean: [\"bit\", \"smallint\"],\n  date: [\"datetime2\", \"date\", \"datetime\"],\n  json: [\"varchar\", \"nvarchar\"]\n};\nconst map = {\n  postgres: postgresMap,\n  mysql: mysqlMap,\n  sqlite: sqliteMap,\n  mssql: mssqlMap\n};\nfunction matchType(columnDataType, fieldType, dbType) {\n  function normalize(type) {\n    return type.toLowerCase().split(\"(\")[0].trim();\n  }\n  if (fieldType === \"string[]\" || fieldType === \"number[]\") {\n    return columnDataType.toLowerCase().includes(\"json\");\n  }\n  const types = map[dbType];\n  const expected = Array.isArray(fieldType) ? types[\"string\"].map((t) => t.toLowerCase()) : types[fieldType].map((t) => t.toLowerCase());\n  return expected.includes(normalize(columnDataType));\n}\nasync function getMigrations(config) {\n  const betterAuthSchema = getSchema(config);\n  const logger = (0,_better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_10__.c)(config.logger);\n  let { kysely: db, databaseType: dbType } = await (0,_better_auth_BAk2ZmIN_mjs__WEBPACK_IMPORTED_MODULE_16__.c)(config);\n  if (!dbType) {\n    logger.warn(\n      \"Could not determine database type, defaulting to sqlite. Please provide a type in the database options to avoid this.\"\n    );\n    dbType = \"sqlite\";\n  }\n  if (!db) {\n    logger.error(\n      \"Only kysely adapter is supported for migrations. You can use `generate` command to generate the schema, if you're using a different adapter.\"\n    );\n    process.exit(1);\n  }\n  const tableMetadata = await db.introspection.getTables();\n  const toBeCreated = [];\n  const toBeAdded = [];\n  for (const [key, value] of Object.entries(betterAuthSchema)) {\n    const table = tableMetadata.find((t) => t.name === key);\n    if (!table) {\n      const tIndex = toBeCreated.findIndex((t) => t.table === key);\n      const tableData = {\n        table: key,\n        fields: value.fields,\n        order: value.order || Infinity\n      };\n      const insertIndex = toBeCreated.findIndex(\n        (t) => (t.order || Infinity) > tableData.order\n      );\n      if (insertIndex === -1) {\n        if (tIndex === -1) {\n          toBeCreated.push(tableData);\n        } else {\n          toBeCreated[tIndex].fields = {\n            ...toBeCreated[tIndex].fields,\n            ...value.fields\n          };\n        }\n      } else {\n        toBeCreated.splice(insertIndex, 0, tableData);\n      }\n      continue;\n    }\n    let toBeAddedFields = {};\n    for (const [fieldName, field] of Object.entries(value.fields)) {\n      const column = table.columns.find((c) => c.name === fieldName);\n      if (!column) {\n        toBeAddedFields[fieldName] = field;\n        continue;\n      }\n      if (matchType(column.dataType, field.type, dbType)) {\n        continue;\n      } else {\n        logger.warn(\n          `Field ${fieldName} in table ${key} has a different type in the database. Expected ${field.type} but got ${column.dataType}.`\n        );\n      }\n    }\n    if (Object.keys(toBeAddedFields).length > 0) {\n      toBeAdded.push({\n        table: key,\n        fields: toBeAddedFields,\n        order: value.order || Infinity\n      });\n    }\n  }\n  const migrations = [];\n  function getType(field, fieldName) {\n    const type = field.type;\n    const typeMap = {\n      string: {\n        sqlite: \"text\",\n        postgres: \"text\",\n        mysql: field.unique ? \"varchar(255)\" : field.references ? \"varchar(36)\" : \"text\",\n        mssql: field.unique || field.sortable ? \"varchar(255)\" : field.references ? \"varchar(36)\" : (\n          // mssql deprecated `text`, and the alternative is `varchar(max)`.\n          // Kysely type interface doesn't support `text`, so we set this to `varchar(8000)` as\n          // that's the max length for `varchar`\n          \"varchar(8000)\"\n        )\n      },\n      boolean: {\n        sqlite: \"integer\",\n        postgres: \"boolean\",\n        mysql: \"boolean\",\n        mssql: \"smallint\"\n      },\n      number: {\n        sqlite: field.bigint ? \"bigint\" : \"integer\",\n        postgres: field.bigint ? \"bigint\" : \"integer\",\n        mysql: field.bigint ? \"bigint\" : \"integer\",\n        mssql: field.bigint ? \"bigint\" : \"integer\"\n      },\n      date: {\n        sqlite: \"date\",\n        postgres: \"timestamptz\",\n        mysql: \"timestamp(3)\",\n        mssql: (0,kysely__WEBPACK_IMPORTED_MODULE_18__.sql)`datetime2(3)`\n      },\n      json: {\n        sqlite: \"text\",\n        postgres: \"jsonb\",\n        mysql: \"json\",\n        mssql: \"varchar(8000)\"\n      },\n      id: {\n        postgres: config.advanced?.database?.useNumberId ? \"serial\" : \"text\",\n        mysql: config.advanced?.database?.useNumberId ? \"integer\" : \"varchar(36)\",\n        mssql: config.advanced?.database?.useNumberId ? \"integer\" : \"varchar(36)\",\n        sqlite: config.advanced?.database?.useNumberId ? \"integer\" : \"text\"\n      },\n      foreignKeyId: {\n        postgres: config.advanced?.database?.useNumberId ? \"integer\" : \"text\",\n        mysql: config.advanced?.database?.useNumberId ? \"integer\" : \"varchar(36)\",\n        mssql: config.advanced?.database?.useNumberId ? \"integer\" : \"varchar(36)\",\n        sqlite: config.advanced?.database?.useNumberId ? \"integer\" : \"text\"\n      }\n    };\n    if (fieldName === \"id\" || field.references?.field === \"id\") {\n      if (fieldName === \"id\") {\n        return typeMap.id[dbType];\n      }\n      return typeMap.foreignKeyId[dbType];\n    }\n    if (dbType === \"sqlite\" && (type === \"string[]\" || type === \"number[]\")) {\n      return \"text\";\n    }\n    if (type === \"string[]\" || type === \"number[]\") {\n      return \"jsonb\";\n    }\n    if (Array.isArray(type)) {\n      return \"text\";\n    }\n    return typeMap[type][dbType || \"sqlite\"];\n  }\n  if (toBeAdded.length) {\n    for (const table of toBeAdded) {\n      for (const [fieldName, field] of Object.entries(table.fields)) {\n        const type = getType(field, fieldName);\n        const exec = db.schema.alterTable(table.table).addColumn(fieldName, type, (col) => {\n          col = field.required !== false ? col.notNull() : col;\n          if (field.references) {\n            col = col.references(\n              `${field.references.model}.${field.references.field}`\n            ).onDelete(field.references.onDelete || \"cascade\");\n          }\n          if (field.unique) {\n            col = col.unique();\n          }\n          if (field.type === \"date\" && typeof field.defaultValue === \"function\" && (dbType === \"postgres\" || dbType === \"mysql\" || dbType === \"mssql\")) {\n            if (dbType === \"mysql\") {\n              col = col.defaultTo((0,kysely__WEBPACK_IMPORTED_MODULE_18__.sql)`CURRENT_TIMESTAMP(3)`);\n            } else {\n              col = col.defaultTo((0,kysely__WEBPACK_IMPORTED_MODULE_18__.sql)`CURRENT_TIMESTAMP`);\n            }\n          }\n          return col;\n        });\n        migrations.push(exec);\n      }\n    }\n  }\n  if (toBeCreated.length) {\n    for (const table of toBeCreated) {\n      let dbT = db.schema.createTable(table.table).addColumn(\n        \"id\",\n        config.advanced?.database?.useNumberId ? dbType === \"postgres\" ? \"serial\" : \"integer\" : dbType === \"mysql\" || dbType === \"mssql\" ? \"varchar(36)\" : \"text\",\n        (col) => {\n          if (config.advanced?.database?.useNumberId) {\n            if (dbType === \"postgres\" || dbType === \"sqlite\") {\n              return col.primaryKey().notNull();\n            } else if (dbType === \"mssql\") {\n              return col.identity().primaryKey().notNull();\n            }\n            return col.autoIncrement().primaryKey().notNull();\n          }\n          return col.primaryKey().notNull();\n        }\n      );\n      for (const [fieldName, field] of Object.entries(table.fields)) {\n        const type = getType(field, fieldName);\n        dbT = dbT.addColumn(fieldName, type, (col) => {\n          col = field.required !== false ? col.notNull() : col;\n          if (field.references) {\n            col = col.references(`${field.references.model}.${field.references.field}`).onDelete(field.references.onDelete || \"cascade\");\n          }\n          if (field.unique) {\n            col = col.unique();\n          }\n          if (field.type === \"date\" && typeof field.defaultValue === \"function\" && (dbType === \"postgres\" || dbType === \"mysql\" || dbType === \"mssql\")) {\n            if (dbType === \"mysql\") {\n              col = col.defaultTo((0,kysely__WEBPACK_IMPORTED_MODULE_18__.sql)`CURRENT_TIMESTAMP(3)`);\n            } else {\n              col = col.defaultTo((0,kysely__WEBPACK_IMPORTED_MODULE_18__.sql)`CURRENT_TIMESTAMP`);\n            }\n          }\n          return col;\n        });\n      }\n      migrations.push(dbT);\n    }\n  }\n  async function runMigrations() {\n    for (const migration of migrations) {\n      await migration.execute();\n    }\n  }\n  async function compileMigrations() {\n    const compiled = migrations.map((m) => m.compile().sql);\n    return compiled.join(\";\\n\\n\") + \";\";\n  }\n  return { toBeCreated, toBeAdded, runMigrations, compileMigrations };\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.D-L3RQ6y.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.D2xndZ2p.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.D2xndZ2p.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   d: () => (/* binding */ defineErrorCodes)\n/* harmony export */ });\nfunction defineErrorCodes(codes) {\n  return codes;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguRDJ4bmRaMnAubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7O0FBRWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXV0b3BsYW5jYW0vLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguRDJ4bmRaMnAubWpzPzg0NWUiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gZGVmaW5lRXJyb3JDb2Rlcyhjb2Rlcykge1xuICByZXR1cm4gY29kZXM7XG59XG5cbmV4cG9ydCB7IGRlZmluZUVycm9yQ29kZXMgYXMgZCB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.D2xndZ2p.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.DQI8AD7d.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.DQI8AD7d.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   g: () => (/* binding */ getEndpointResponse)\n/* harmony export */ });\n/* harmony import */ var better_call__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! better-call */ \"(rsc)/./node_modules/better-call/dist/index.js\");\n\n\nconst getEndpointResponse = async (ctx) => {\n  const returned = ctx.context.returned;\n  if (!returned) {\n    return null;\n  }\n  if (returned instanceof Response) {\n    if (returned.status !== 200) {\n      return null;\n    }\n    return await returned.clone().json();\n  }\n  if (returned instanceof better_call__WEBPACK_IMPORTED_MODULE_0__.APIError) {\n    return null;\n  }\n  return returned;\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguRFFJOEFEN2QubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXVDOztBQUV2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLGlEQUFRO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBOztBQUVvQyIsInNvdXJjZXMiOlsid2VicGFjazovL2F1dG9wbGFuY2FtLy4vbm9kZV9tb2R1bGVzL2JldHRlci1hdXRoL2Rpc3Qvc2hhcmVkL2JldHRlci1hdXRoLkRRSThBRDdkLm1qcz9mZDViIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFQSUVycm9yIH0gZnJvbSAnYmV0dGVyLWNhbGwnO1xuXG5jb25zdCBnZXRFbmRwb2ludFJlc3BvbnNlID0gYXN5bmMgKGN0eCkgPT4ge1xuICBjb25zdCByZXR1cm5lZCA9IGN0eC5jb250ZXh0LnJldHVybmVkO1xuICBpZiAoIXJldHVybmVkKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgaWYgKHJldHVybmVkIGluc3RhbmNlb2YgUmVzcG9uc2UpIHtcbiAgICBpZiAocmV0dXJuZWQuc3RhdHVzICE9PSAyMDApIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gYXdhaXQgcmV0dXJuZWQuY2xvbmUoKS5qc29uKCk7XG4gIH1cbiAgaWYgKHJldHVybmVkIGluc3RhbmNlb2YgQVBJRXJyb3IpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gcmV0dXJuZWQ7XG59O1xuXG5leHBvcnQgeyBnZXRFbmRwb2ludFJlc3BvbnNlIGFzIGcgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.DQI8AD7d.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   B: () => (/* binding */ BetterAuthError),\n/* harmony export */   M: () => (/* binding */ MissingDependencyError)\n/* harmony export */ });\nclass BetterAuthError extends Error {\n  constructor(message, cause) {\n    super(message);\n    this.name = \"BetterAuthError\";\n    this.message = message;\n    this.cause = cause;\n    this.stack = \"\";\n  }\n}\nclass MissingDependencyError extends BetterAuthError {\n  constructor(pkgName) {\n    super(\n      `The package \"${pkgName}\" is required. Make sure it is installed.`,\n      pkgName\n    );\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguRGR6U0pmLW4ubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLFFBQVE7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7O0FBRTZEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXV0b3BsYW5jYW0vLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguRGR6U0pmLW4ubWpzPzY0MGYiXSwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgQmV0dGVyQXV0aEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBjYXVzZSkge1xuICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgIHRoaXMubmFtZSA9IFwiQmV0dGVyQXV0aEVycm9yXCI7XG4gICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgICB0aGlzLmNhdXNlID0gY2F1c2U7XG4gICAgdGhpcy5zdGFjayA9IFwiXCI7XG4gIH1cbn1cbmNsYXNzIE1pc3NpbmdEZXBlbmRlbmN5RXJyb3IgZXh0ZW5kcyBCZXR0ZXJBdXRoRXJyb3Ige1xuICBjb25zdHJ1Y3Rvcihwa2dOYW1lKSB7XG4gICAgc3VwZXIoXG4gICAgICBgVGhlIHBhY2thZ2UgXCIke3BrZ05hbWV9XCIgaXMgcmVxdWlyZWQuIE1ha2Ugc3VyZSBpdCBpcyBpbnN0YWxsZWQuYCxcbiAgICAgIHBrZ05hbWVcbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCB7IEJldHRlckF1dGhFcnJvciBhcyBCLCBNaXNzaW5nRGVwZW5kZW5jeUVycm9yIGFzIE0gfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.DgGir396.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.DgGir396.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ logger),\n/* harmony export */   b: () => (/* binding */ colors),\n/* harmony export */   c: () => (/* binding */ createLogger),\n/* harmony export */   l: () => (/* binding */ levels),\n/* harmony export */   s: () => (/* binding */ shouldPublishLog)\n/* harmony export */ });\n/* harmony import */ var _better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./better-auth.CiuwFiHM.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.CiuwFiHM.mjs\");\n\n\nconst COLORS_2 = 1;\nconst COLORS_16 = 4;\nconst COLORS_256 = 8;\nconst COLORS_16m = 24;\nconst TERM_ENVS = {\n  eterm: COLORS_16,\n  cons25: COLORS_16,\n  console: COLORS_16,\n  cygwin: COLORS_16,\n  dtterm: COLORS_16,\n  gnome: COLORS_16,\n  hurd: COLORS_16,\n  jfbterm: COLORS_16,\n  konsole: COLORS_16,\n  kterm: COLORS_16,\n  mlterm: COLORS_16,\n  mosh: COLORS_16m,\n  putty: COLORS_16,\n  st: COLORS_16,\n  // http://lists.schmorp.de/pipermail/rxvt-unicode/2016q2/002261.html\n  \"rxvt-unicode-24bit\": COLORS_16m,\n  // https://bugs.launchpad.net/terminator/+bug/1030562\n  terminator: COLORS_16m,\n  \"xterm-kitty\": COLORS_16m\n};\nconst CI_ENVS_MAP = new Map(\n  Object.entries({\n    APPVEYOR: COLORS_256,\n    BUILDKITE: COLORS_256,\n    CIRCLECI: COLORS_16m,\n    DRONE: COLORS_256,\n    GITEA_ACTIONS: COLORS_16m,\n    GITHUB_ACTIONS: COLORS_16m,\n    GITLAB_CI: COLORS_256,\n    TRAVIS: COLORS_256\n  })\n);\nconst TERM_ENVS_REG_EXP = [\n  /ansi/,\n  /color/,\n  /linux/,\n  /direct/,\n  /^con[0-9]*x[0-9]/,\n  /^rxvt/,\n  /^screen/,\n  /^xterm/,\n  /^vt100/,\n  /^vt220/\n];\nfunction getColorDepth() {\n  if ((0,_better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(\"FORCE_COLOR\") !== void 0) {\n    switch ((0,_better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(\"FORCE_COLOR\")) {\n      case \"\":\n      case \"1\":\n      case \"true\":\n        return COLORS_16;\n      case \"2\":\n        return COLORS_256;\n      case \"3\":\n        return COLORS_16m;\n      default:\n        return COLORS_2;\n    }\n  }\n  if ((0,_better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(\"NODE_DISABLE_COLORS\") !== void 0 && (0,_better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(\"NODE_DISABLE_COLORS\") !== \"\" || // See https://no-color.org/\n  (0,_better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(\"NO_COLOR\") !== void 0 && (0,_better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(\"NO_COLOR\") !== \"\" || // The \"dumb\" special terminal, as defined by terminfo, doesn't support\n  // ANSI color control codes.\n  // See https://invisible-island.net/ncurses/terminfo.ti.html#toc-_Specials\n  (0,_better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(\"TERM\") === \"dumb\") {\n    return COLORS_2;\n  }\n  if (typeof process !== \"undefined\" && process.platform === \"win32\") {\n    return COLORS_16m;\n  }\n  if ((0,_better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(\"TMUX\")) {\n    return COLORS_16m;\n  }\n  if (\"TF_BUILD\" in _better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_0__.e && \"AGENT_NAME\" in _better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_0__.e) {\n    return COLORS_16;\n  }\n  if (\"CI\" in _better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_0__.e) {\n    for (const { 0: envName, 1: colors } of CI_ENVS_MAP) {\n      if (envName in _better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_0__.e) {\n        return colors;\n      }\n    }\n    if ((0,_better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(\"CI_NAME\") === \"codeship\") {\n      return COLORS_256;\n    }\n    return COLORS_2;\n  }\n  if (\"TEAMCITY_VERSION\" in _better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_0__.e) {\n    return /^(9\\.(0*[1-9]\\d*)\\.|\\d{2,}\\.)/.exec(\n      (0,_better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(\"TEAMCITY_VERSION\")\n    ) !== null ? COLORS_16 : COLORS_2;\n  }\n  switch ((0,_better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(\"TERM_PROGRAM\")) {\n    case \"iTerm.app\":\n      if (!(0,_better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(\"TERM_PROGRAM_VERSION\") || /^[0-2]\\./.exec((0,_better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(\"TERM_PROGRAM_VERSION\")) !== null) {\n        return COLORS_256;\n      }\n      return COLORS_16m;\n    case \"HyperTerm\":\n    case \"MacTerm\":\n      return COLORS_16m;\n    case \"Apple_Terminal\":\n      return COLORS_256;\n  }\n  if ((0,_better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(\"COLORTERM\") === \"truecolor\" || (0,_better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(\"COLORTERM\") === \"24bit\") {\n    return COLORS_16m;\n  }\n  if ((0,_better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(\"TERM\")) {\n    if (/truecolor/.exec((0,_better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(\"TERM\")) !== null) {\n      return COLORS_16m;\n    }\n    if (/^xterm-256/.exec((0,_better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(\"TERM\")) !== null) {\n      return COLORS_256;\n    }\n    const termEnv = (0,_better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(\"TERM\").toLowerCase();\n    if (TERM_ENVS[termEnv]) {\n      return TERM_ENVS[termEnv];\n    }\n    if (TERM_ENVS_REG_EXP.some((term) => term.exec(termEnv) !== null)) {\n      return COLORS_16;\n    }\n  }\n  if ((0,_better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(\"COLORTERM\")) {\n    return COLORS_16;\n  }\n  return COLORS_2;\n}\n\nconst colors = {\n  reset: \"\\x1B[0m\",\n  bright: \"\\x1B[1m\",\n  dim: \"\\x1B[2m\",\n  fg: {\n    red: \"\\x1B[31m\",\n    green: \"\\x1B[32m\",\n    yellow: \"\\x1B[33m\",\n    blue: \"\\x1B[34m\",\n    magenta: \"\\x1B[35m\"},\n  bg: {\n    black: \"\\x1B[40m\"}\n};\n\nconst levels = [\"info\", \"success\", \"warn\", \"error\", \"debug\"];\nfunction shouldPublishLog(currentLogLevel, logLevel) {\n  return levels.indexOf(logLevel) <= levels.indexOf(currentLogLevel);\n}\nconst levelColors = {\n  info: colors.fg.blue,\n  success: colors.fg.green,\n  warn: colors.fg.yellow,\n  error: colors.fg.red,\n  debug: colors.fg.magenta\n};\nconst formatMessage = (level, message, colorsEnabled) => {\n  const timestamp = (/* @__PURE__ */ new Date()).toISOString();\n  if (colorsEnabled) {\n    return `${colors.dim}${timestamp}${colors.reset} ${levelColors[level]}${level.toUpperCase()}${colors.reset} ${colors.bright}[Better Auth]:${colors.reset} ${message}`;\n  }\n  return `${timestamp} ${level.toUpperCase()} [Better Auth]: ${message}`;\n};\nconst createLogger = (options) => {\n  const enabled = options?.disabled !== true;\n  const logLevel = options?.level ?? \"error\";\n  const isDisableColorsSpecified = options?.disableColors !== void 0;\n  const colorsEnabled = isDisableColorsSpecified ? !options.disableColors : getColorDepth() !== 1;\n  const LogFunc = (level, message, args = []) => {\n    if (!enabled || !shouldPublishLog(logLevel, level)) {\n      return;\n    }\n    const formattedMessage = formatMessage(level, message, colorsEnabled);\n    if (!options || typeof options.log !== \"function\") {\n      if (level === \"error\") {\n        console.error(formattedMessage, ...args);\n      } else if (level === \"warn\") {\n        console.warn(formattedMessage, ...args);\n      } else {\n        console.log(formattedMessage, ...args);\n      }\n      return;\n    }\n    options.log(level === \"success\" ? \"info\" : level, message, ...args);\n  };\n  const logger2 = Object.fromEntries(\n    levels.map((level) => [\n      level,\n      (...[message, ...args]) => LogFunc(level, message, args)\n    ])\n  );\n  return {\n    ...logger2,\n    get level() {\n      return logLevel;\n    }\n  };\n};\nconst logger = createLogger();\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.DgGir396.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.DhziC0ap.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.DhziC0ap.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   g: () => (/* binding */ getAuthTables)\n/* harmony export */ });\nconst getAuthTables = (options) => {\n  const pluginSchema = (options.plugins ?? []).reduce(\n    (acc, plugin) => {\n      const schema = plugin.schema;\n      if (!schema) return acc;\n      for (const [key, value] of Object.entries(schema)) {\n        acc[key] = {\n          fields: {\n            ...acc[key]?.fields,\n            ...value.fields\n          },\n          modelName: value.modelName || key\n        };\n      }\n      return acc;\n    },\n    {}\n  );\n  const shouldAddRateLimitTable = options.rateLimit?.storage === \"database\";\n  const rateLimitTable = {\n    rateLimit: {\n      modelName: options.rateLimit?.modelName || \"rateLimit\",\n      fields: {\n        key: {\n          type: \"string\",\n          fieldName: options.rateLimit?.fields?.key || \"key\"\n        },\n        count: {\n          type: \"number\",\n          fieldName: options.rateLimit?.fields?.count || \"count\"\n        },\n        lastRequest: {\n          type: \"number\",\n          bigint: true,\n          fieldName: options.rateLimit?.fields?.lastRequest || \"lastRequest\"\n        }\n      }\n    }\n  };\n  const { user, session, account, ...pluginTables } = pluginSchema;\n  const sessionTable = {\n    session: {\n      modelName: options.session?.modelName || \"session\",\n      fields: {\n        expiresAt: {\n          type: \"date\",\n          required: true,\n          fieldName: options.session?.fields?.expiresAt || \"expiresAt\"\n        },\n        token: {\n          type: \"string\",\n          required: true,\n          fieldName: options.session?.fields?.token || \"token\",\n          unique: true\n        },\n        createdAt: {\n          type: \"date\",\n          required: true,\n          fieldName: options.session?.fields?.createdAt || \"createdAt\",\n          defaultValue: () => /* @__PURE__ */ new Date()\n        },\n        updatedAt: {\n          type: \"date\",\n          required: true,\n          fieldName: options.session?.fields?.updatedAt || \"updatedAt\",\n          onUpdate: () => /* @__PURE__ */ new Date()\n        },\n        ipAddress: {\n          type: \"string\",\n          required: false,\n          fieldName: options.session?.fields?.ipAddress || \"ipAddress\"\n        },\n        userAgent: {\n          type: \"string\",\n          required: false,\n          fieldName: options.session?.fields?.userAgent || \"userAgent\"\n        },\n        userId: {\n          type: \"string\",\n          fieldName: options.session?.fields?.userId || \"userId\",\n          references: {\n            model: options.user?.modelName || \"user\",\n            field: \"id\",\n            onDelete: \"cascade\"\n          },\n          required: true\n        },\n        ...session?.fields,\n        ...options.session?.additionalFields\n      },\n      order: 2\n    }\n  };\n  return {\n    user: {\n      modelName: options.user?.modelName || \"user\",\n      fields: {\n        name: {\n          type: \"string\",\n          required: true,\n          fieldName: options.user?.fields?.name || \"name\",\n          sortable: true\n        },\n        email: {\n          type: \"string\",\n          unique: true,\n          required: true,\n          fieldName: options.user?.fields?.email || \"email\",\n          sortable: true\n        },\n        emailVerified: {\n          type: \"boolean\",\n          defaultValue: false,\n          required: true,\n          fieldName: options.user?.fields?.emailVerified || \"emailVerified\"\n        },\n        image: {\n          type: \"string\",\n          required: false,\n          fieldName: options.user?.fields?.image || \"image\"\n        },\n        createdAt: {\n          type: \"date\",\n          defaultValue: () => /* @__PURE__ */ new Date(),\n          required: true,\n          fieldName: options.user?.fields?.createdAt || \"createdAt\"\n        },\n        updatedAt: {\n          type: \"date\",\n          defaultValue: () => /* @__PURE__ */ new Date(),\n          onUpdate: () => /* @__PURE__ */ new Date(),\n          required: true,\n          fieldName: options.user?.fields?.updatedAt || \"updatedAt\"\n        },\n        ...user?.fields,\n        ...options.user?.additionalFields\n      },\n      order: 1\n    },\n    //only add session table if it's not stored in secondary storage\n    ...!options.secondaryStorage || options.session?.storeSessionInDatabase ? sessionTable : {},\n    account: {\n      modelName: options.account?.modelName || \"account\",\n      fields: {\n        accountId: {\n          type: \"string\",\n          required: true,\n          fieldName: options.account?.fields?.accountId || \"accountId\"\n        },\n        providerId: {\n          type: \"string\",\n          required: true,\n          fieldName: options.account?.fields?.providerId || \"providerId\"\n        },\n        userId: {\n          type: \"string\",\n          references: {\n            model: options.user?.modelName || \"user\",\n            field: \"id\",\n            onDelete: \"cascade\"\n          },\n          required: true,\n          fieldName: options.account?.fields?.userId || \"userId\"\n        },\n        accessToken: {\n          type: \"string\",\n          required: false,\n          fieldName: options.account?.fields?.accessToken || \"accessToken\"\n        },\n        refreshToken: {\n          type: \"string\",\n          required: false,\n          fieldName: options.account?.fields?.refreshToken || \"refreshToken\"\n        },\n        idToken: {\n          type: \"string\",\n          required: false,\n          fieldName: options.account?.fields?.idToken || \"idToken\"\n        },\n        accessTokenExpiresAt: {\n          type: \"date\",\n          required: false,\n          fieldName: options.account?.fields?.accessTokenExpiresAt || \"accessTokenExpiresAt\"\n        },\n        refreshTokenExpiresAt: {\n          type: \"date\",\n          required: false,\n          fieldName: options.account?.fields?.refreshTokenExpiresAt || \"refreshTokenExpiresAt\"\n        },\n        scope: {\n          type: \"string\",\n          required: false,\n          fieldName: options.account?.fields?.scope || \"scope\"\n        },\n        password: {\n          type: \"string\",\n          required: false,\n          fieldName: options.account?.fields?.password || \"password\"\n        },\n        createdAt: {\n          type: \"date\",\n          required: true,\n          fieldName: options.account?.fields?.createdAt || \"createdAt\",\n          defaultValue: () => /* @__PURE__ */ new Date()\n        },\n        updatedAt: {\n          type: \"date\",\n          required: true,\n          fieldName: options.account?.fields?.updatedAt || \"updatedAt\",\n          onUpdate: () => /* @__PURE__ */ new Date()\n        },\n        ...account?.fields,\n        ...options.account?.additionalFields\n      },\n      order: 3\n    },\n    verification: {\n      modelName: options.verification?.modelName || \"verification\",\n      fields: {\n        identifier: {\n          type: \"string\",\n          required: true,\n          fieldName: options.verification?.fields?.identifier || \"identifier\"\n        },\n        value: {\n          type: \"string\",\n          required: true,\n          fieldName: options.verification?.fields?.value || \"value\"\n        },\n        expiresAt: {\n          type: \"date\",\n          required: true,\n          fieldName: options.verification?.fields?.expiresAt || \"expiresAt\"\n        },\n        createdAt: {\n          type: \"date\",\n          required: true,\n          defaultValue: () => /* @__PURE__ */ new Date(),\n          fieldName: options.verification?.fields?.createdAt || \"createdAt\"\n        },\n        updatedAt: {\n          type: \"date\",\n          required: true,\n          defaultValue: () => /* @__PURE__ */ new Date(),\n          onUpdate: () => /* @__PURE__ */ new Date(),\n          fieldName: options.verification?.fields?.updatedAt || \"updatedAt\"\n        }\n      },\n      order: 4\n    },\n    ...pluginTables,\n    ...shouldAddRateLimitTable ? rateLimitTable : {}\n  };\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.DhziC0ap.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.DiMXeqeq.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.DiMXeqeq.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ parseCookies),\n/* harmony export */   b: () => (/* binding */ setCookieCache),\n/* harmony export */   c: () => (/* binding */ createCookieGetter),\n/* harmony export */   d: () => (/* binding */ deleteSessionCookie),\n/* harmony export */   e: () => (/* binding */ setCookieToHeader),\n/* harmony export */   f: () => (/* binding */ getSessionCookie),\n/* harmony export */   g: () => (/* binding */ getCookies),\n/* harmony export */   h: () => (/* binding */ getCookieCache),\n/* harmony export */   m: () => (/* binding */ ms),\n/* harmony export */   p: () => (/* binding */ parseSetCookieHeader),\n/* harmony export */   s: () => (/* binding */ setSessionCookie)\n/* harmony export */ });\n/* harmony import */ var _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./better-auth.DdzSJf-n.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs\");\n/* harmony import */ var _better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./better-auth.CW6D9eSx.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.CW6D9eSx.mjs\");\n/* harmony import */ var _better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./better-auth.CiuwFiHM.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.CiuwFiHM.mjs\");\n/* harmony import */ var _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @better-auth/utils/base64 */ \"(rsc)/./node_modules/@better-auth/utils/dist/base64.mjs\");\n/* harmony import */ var _better_auth_utils_hmac__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @better-auth/utils/hmac */ \"(rsc)/./node_modules/@better-auth/utils/dist/hmac.mjs\");\n/* harmony import */ var _better_auth_BTrSrKsi_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./better-auth.BTrSrKsi.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.BTrSrKsi.mjs\");\n/* harmony import */ var _better_auth_BRFtaovt_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./better-auth.BRFtaovt.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.BRFtaovt.mjs\");\n/* harmony import */ var _better_auth_utils_binary__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @better-auth/utils/binary */ \"(rsc)/./node_modules/@better-auth/utils/dist/binary.mjs\");\n\n\n\n\n\n\n\n\n\n//#region src/index.ts\nconst s = 1e3;\nconst m = s * 60;\nconst h = m * 60;\nconst d = h * 24;\nconst w = d * 7;\nconst y = d * 365.25;\nconst mo = y / 12;\nfunction ms(value, options) {\n\tif (typeof value === \"string\") return parse(value);\n\telse if (typeof value === \"number\") return format(value);\n\tthrow new Error(`Value provided to ms() must be a string or number. value=${JSON.stringify(value)}`);\n}\n/**\n* Parse the given string and return milliseconds.\n*\n* @param str - A string to parse to milliseconds\n* @returns The parsed value in milliseconds, or `NaN` if the string can't be\n* parsed\n*/\nfunction parse(str) {\n\tif (typeof str !== \"string\" || str.length === 0 || str.length > 100) throw new Error(`Value provided to ms.parse() must be a string with length between 1 and 99. value=${JSON.stringify(str)}`);\n\tconst match = /^(?<value>-?\\d*\\.?\\d+) *(?<unit>milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|months?|mo|years?|yrs?|y)?$/i.exec(str);\n\tif (!match?.groups) return NaN;\n\tconst { value, unit = \"ms\" } = match.groups;\n\tconst n = parseFloat(value);\n\tconst matchUnit = unit.toLowerCase();\n\t/* istanbul ignore next - istanbul doesn't understand, but thankfully the TypeScript the exhaustiveness check in the default case keeps us type safe here */\n\tswitch (matchUnit) {\n\t\tcase \"years\":\n\t\tcase \"year\":\n\t\tcase \"yrs\":\n\t\tcase \"yr\":\n\t\tcase \"y\": return n * y;\n\t\tcase \"months\":\n\t\tcase \"month\":\n\t\tcase \"mo\": return n * mo;\n\t\tcase \"weeks\":\n\t\tcase \"week\":\n\t\tcase \"w\": return n * w;\n\t\tcase \"days\":\n\t\tcase \"day\":\n\t\tcase \"d\": return n * d;\n\t\tcase \"hours\":\n\t\tcase \"hour\":\n\t\tcase \"hrs\":\n\t\tcase \"hr\":\n\t\tcase \"h\": return n * h;\n\t\tcase \"minutes\":\n\t\tcase \"minute\":\n\t\tcase \"mins\":\n\t\tcase \"min\":\n\t\tcase \"m\": return n * m;\n\t\tcase \"seconds\":\n\t\tcase \"second\":\n\t\tcase \"secs\":\n\t\tcase \"sec\":\n\t\tcase \"s\": return n * s;\n\t\tcase \"milliseconds\":\n\t\tcase \"millisecond\":\n\t\tcase \"msecs\":\n\t\tcase \"msec\":\n\t\tcase \"ms\": return n;\n\t\tdefault: throw new Error(`Unknown unit \"${matchUnit}\" provided to ms.parse(). value=${JSON.stringify(str)}`);\n\t}\n}\n/**\n* Short format for `ms`.\n*/\nfunction fmtShort(ms$1) {\n\tconst msAbs = Math.abs(ms$1);\n\tif (msAbs >= y) return `${Math.round(ms$1 / y)}y`;\n\tif (msAbs >= mo) return `${Math.round(ms$1 / mo)}mo`;\n\tif (msAbs >= w) return `${Math.round(ms$1 / w)}w`;\n\tif (msAbs >= d) return `${Math.round(ms$1 / d)}d`;\n\tif (msAbs >= h) return `${Math.round(ms$1 / h)}h`;\n\tif (msAbs >= m) return `${Math.round(ms$1 / m)}m`;\n\tif (msAbs >= s) return `${Math.round(ms$1 / s)}s`;\n\treturn `${ms$1}ms`;\n}\n/**\n* Format the given integer as a string.\n*\n* @param ms - milliseconds\n* @param options - Options for the conversion\n* @returns The formatted string\n*/\nfunction format(ms$1, options) {\n\tif (typeof ms$1 !== \"number\" || !Number.isFinite(ms$1)) throw new Error(\"Value provided to ms.format() must be of type number.\");\n\treturn fmtShort(ms$1);\n}\n\nfunction parseSetCookieHeader(setCookie) {\n  const cookies = /* @__PURE__ */ new Map();\n  const cookieArray = setCookie.split(\", \");\n  cookieArray.forEach((cookieString) => {\n    const parts = cookieString.split(\";\").map((part) => part.trim());\n    const [nameValue, ...attributes] = parts;\n    const [name, ...valueParts] = (nameValue || \"\").split(\"=\");\n    const value = valueParts.join(\"=\");\n    if (!name || value === void 0) {\n      return;\n    }\n    const attrObj = { value };\n    attributes.forEach((attribute) => {\n      const [attrName, ...attrValueParts] = attribute.split(\"=\");\n      const attrValue = attrValueParts.join(\"=\");\n      const normalizedAttrName = attrName.trim().toLowerCase();\n      switch (normalizedAttrName) {\n        case \"max-age\":\n          attrObj[\"max-age\"] = attrValue ? parseInt(attrValue.trim(), 10) : void 0;\n          break;\n        case \"expires\":\n          attrObj.expires = attrValue ? new Date(attrValue.trim()) : void 0;\n          break;\n        case \"domain\":\n          attrObj.domain = attrValue ? attrValue.trim() : void 0;\n          break;\n        case \"path\":\n          attrObj.path = attrValue ? attrValue.trim() : void 0;\n          break;\n        case \"secure\":\n          attrObj.secure = true;\n          break;\n        case \"httponly\":\n          attrObj.httponly = true;\n          break;\n        case \"samesite\":\n          attrObj.samesite = attrValue ? attrValue.trim().toLowerCase() : void 0;\n          break;\n        default:\n          attrObj[normalizedAttrName] = attrValue ? attrValue.trim() : true;\n          break;\n      }\n    });\n    cookies.set(name, attrObj);\n  });\n  return cookies;\n}\nfunction setCookieToHeader(headers) {\n  return (context) => {\n    const setCookieHeader = context.response.headers.get(\"set-cookie\");\n    if (!setCookieHeader) {\n      return;\n    }\n    const cookieMap = /* @__PURE__ */ new Map();\n    const existingCookiesHeader = headers.get(\"cookie\") || \"\";\n    existingCookiesHeader.split(\";\").forEach((cookie) => {\n      const [name, ...rest] = cookie.trim().split(\"=\");\n      if (name && rest.length > 0) {\n        cookieMap.set(name, rest.join(\"=\"));\n      }\n    });\n    const setCookieHeaders = setCookieHeader.split(\",\");\n    setCookieHeaders.forEach((header) => {\n      const cookies = parseSetCookieHeader(header);\n      cookies.forEach((value, name) => {\n        cookieMap.set(name, value.value);\n      });\n    });\n    const updatedCookies = Array.from(cookieMap.entries()).map(([name, value]) => `${name}=${value}`).join(\"; \");\n    headers.set(\"cookie\", updatedCookies);\n  };\n}\n\nfunction createCookieGetter(options) {\n  const secure = options.advanced?.useSecureCookies !== void 0 ? options.advanced?.useSecureCookies : options.baseURL !== void 0 ? options.baseURL.startsWith(\"https://\") ? true : false : _better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_2__.b;\n  const secureCookiePrefix = secure ? \"__Secure-\" : \"\";\n  const crossSubdomainEnabled = !!options.advanced?.crossSubDomainCookies?.enabled;\n  const domain = crossSubdomainEnabled ? options.advanced?.crossSubDomainCookies?.domain || (options.baseURL ? new URL(options.baseURL).hostname : void 0) : void 0;\n  if (crossSubdomainEnabled && !domain) {\n    throw new _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_0__.B(\n      \"baseURL is required when crossSubdomainCookies are enabled\"\n    );\n  }\n  function createCookie(cookieName, overrideAttributes = {}) {\n    const prefix = options.advanced?.cookiePrefix || \"better-auth\";\n    const name = options.advanced?.cookies?.[cookieName]?.name || `${prefix}.${cookieName}`;\n    const attributes = options.advanced?.cookies?.[cookieName]?.attributes;\n    return {\n      name: `${secureCookiePrefix}${name}`,\n      attributes: {\n        secure: !!secureCookiePrefix,\n        sameSite: \"lax\",\n        path: \"/\",\n        httpOnly: true,\n        ...crossSubdomainEnabled ? { domain } : {},\n        ...options.advanced?.defaultCookieAttributes,\n        ...overrideAttributes,\n        ...attributes\n      }\n    };\n  }\n  return createCookie;\n}\nfunction getCookies(options) {\n  const createCookie = createCookieGetter(options);\n  const sessionMaxAge = options.session?.expiresIn || ms(\"7d\") / 1e3;\n  const sessionToken = createCookie(\"session_token\", {\n    maxAge: sessionMaxAge\n  });\n  const sessionData = createCookie(\"session_data\", {\n    maxAge: options.session?.cookieCache?.maxAge || 60 * 5\n  });\n  const dontRememberToken = createCookie(\"dont_remember\");\n  return {\n    sessionToken: {\n      name: sessionToken.name,\n      options: sessionToken.attributes\n    },\n    /**\n     * This cookie is used to store the session data in the cookie\n     * This is useful for when you want to cache the session in the cookie\n     */\n    sessionData: {\n      name: sessionData.name,\n      options: sessionData.attributes\n    },\n    dontRememberToken: {\n      name: dontRememberToken.name,\n      options: dontRememberToken.attributes\n    }\n  };\n}\nasync function setCookieCache(ctx, session, dontRememberMe) {\n  const shouldStoreSessionDataInCookie = ctx.context.options.session?.cookieCache?.enabled;\n  if (shouldStoreSessionDataInCookie) {\n    const filteredSession = Object.entries(session.session).reduce(\n      (acc, [key, value]) => {\n        const fieldConfig = ctx.context.options.session?.additionalFields?.[key];\n        if (!fieldConfig || fieldConfig.returned !== false) {\n          acc[key] = value;\n        }\n        return acc;\n      },\n      {}\n    );\n    const sessionData = { session: filteredSession, user: session.user };\n    const options = {\n      ...ctx.context.authCookies.sessionData.options,\n      maxAge: dontRememberMe ? void 0 : ctx.context.authCookies.sessionData.options.maxAge\n    };\n    const expiresAtDate = (0,_better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(options.maxAge || 60, \"sec\").getTime();\n    const data = _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_3__.base64Url.encode(\n      JSON.stringify({\n        session: sessionData,\n        expiresAt: expiresAtDate,\n        signature: await (0,_better_auth_utils_hmac__WEBPACK_IMPORTED_MODULE_4__.createHMAC)(\"SHA-256\", \"base64urlnopad\").sign(\n          ctx.context.secret,\n          JSON.stringify({\n            ...sessionData,\n            expiresAt: expiresAtDate\n          })\n        )\n      }),\n      {\n        padding: false\n      }\n    );\n    if (data.length > 4093) {\n      ctx.context?.logger?.error(\n        `Session data exceeds cookie size limit (${data.length} bytes > 4093 bytes). Consider reducing session data size or disabling cookie cache. Session will not be cached in cookie.`\n      );\n      return;\n    }\n    ctx.setCookie(ctx.context.authCookies.sessionData.name, data, options);\n  }\n}\nasync function setSessionCookie(ctx, session, dontRememberMe, overrides) {\n  const dontRememberMeCookie = await ctx.getSignedCookie(\n    ctx.context.authCookies.dontRememberToken.name,\n    ctx.context.secret\n  );\n  dontRememberMe = dontRememberMe !== void 0 ? dontRememberMe : !!dontRememberMeCookie;\n  const options = ctx.context.authCookies.sessionToken.options;\n  const maxAge = dontRememberMe ? void 0 : ctx.context.sessionConfig.expiresIn;\n  await ctx.setSignedCookie(\n    ctx.context.authCookies.sessionToken.name,\n    session.session.token,\n    ctx.context.secret,\n    {\n      ...options,\n      maxAge,\n      ...overrides\n    }\n  );\n  if (dontRememberMe) {\n    await ctx.setSignedCookie(\n      ctx.context.authCookies.dontRememberToken.name,\n      \"true\",\n      ctx.context.secret,\n      ctx.context.authCookies.dontRememberToken.options\n    );\n  }\n  await setCookieCache(ctx, session, dontRememberMe);\n  ctx.context.setNewSession(session);\n  if (ctx.context.options.secondaryStorage) {\n    await ctx.context.secondaryStorage?.set(\n      session.session.token,\n      JSON.stringify({\n        user: session.user,\n        session: session.session\n      }),\n      Math.floor(\n        (new Date(session.session.expiresAt).getTime() - Date.now()) / 1e3\n      )\n    );\n  }\n}\nfunction deleteSessionCookie(ctx, skipDontRememberMe) {\n  ctx.setCookie(ctx.context.authCookies.sessionToken.name, \"\", {\n    ...ctx.context.authCookies.sessionToken.options,\n    maxAge: 0\n  });\n  ctx.setCookie(ctx.context.authCookies.sessionData.name, \"\", {\n    ...ctx.context.authCookies.sessionData.options,\n    maxAge: 0\n  });\n  if (!skipDontRememberMe) {\n    ctx.setCookie(ctx.context.authCookies.dontRememberToken.name, \"\", {\n      ...ctx.context.authCookies.dontRememberToken.options,\n      maxAge: 0\n    });\n  }\n}\nfunction parseCookies(cookieHeader) {\n  const cookies = cookieHeader.split(\"; \");\n  const cookieMap = /* @__PURE__ */ new Map();\n  cookies.forEach((cookie) => {\n    const [name, value] = cookie.split(\"=\");\n    cookieMap.set(name, value);\n  });\n  return cookieMap;\n}\nconst getSessionCookie = (request, config) => {\n  if (config?.cookiePrefix) {\n    if (config.cookieName) {\n      config.cookiePrefix = `${config.cookiePrefix}-`;\n    } else {\n      config.cookiePrefix = `${config.cookiePrefix}.`;\n    }\n  }\n  const headers = \"headers\" in request ? request.headers : request;\n  const req = request instanceof Request ? request : void 0;\n  (0,_better_auth_BRFtaovt_mjs__WEBPACK_IMPORTED_MODULE_6__.a)(req?.url, config?.path, req);\n  const cookies = headers.get(\"cookie\");\n  if (!cookies) {\n    return null;\n  }\n  const { cookieName = \"session_token\", cookiePrefix = \"better-auth.\" } = config || {};\n  const name = `${cookiePrefix}${cookieName}`;\n  const secureCookieName = `__Secure-${name}`;\n  const parsedCookie = parseCookies(cookies);\n  const sessionToken = parsedCookie.get(name) || parsedCookie.get(secureCookieName);\n  if (sessionToken) {\n    return sessionToken;\n  }\n  return null;\n};\nconst getCookieCache = async (request, config) => {\n  const headers = request instanceof Headers ? request : request.headers;\n  const cookies = headers.get(\"cookie\");\n  if (!cookies) {\n    return null;\n  }\n  const { cookieName = \"session_data\", cookiePrefix = \"better-auth\" } = config || {};\n  const name = config?.isSecure !== void 0 ? config.isSecure ? `__Secure-${cookiePrefix}.${cookieName}` : `${cookiePrefix}.${cookieName}` : _better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_2__.b ? `__Secure-${cookiePrefix}.${cookieName}` : `${cookiePrefix}.${cookieName}`;\n  const parsedCookie = parseCookies(cookies);\n  const sessionData = parsedCookie.get(name);\n  if (sessionData) {\n    const sessionDataPayload = (0,_better_auth_BTrSrKsi_mjs__WEBPACK_IMPORTED_MODULE_5__.s)(_better_auth_utils_binary__WEBPACK_IMPORTED_MODULE_7__.binary.decode(_better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_3__.base64Url.decode(sessionData)));\n    if (!sessionDataPayload) {\n      return null;\n    }\n    const secret = config?.secret || _better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_2__.e.BETTER_AUTH_SECRET;\n    if (!secret) {\n      throw new _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_0__.B(\n        \"getCookieCache requires a secret to be provided. Either pass it as an option or set the BETTER_AUTH_SECRET environment variable\"\n      );\n    }\n    const isValid = await (0,_better_auth_utils_hmac__WEBPACK_IMPORTED_MODULE_4__.createHMAC)(\"SHA-256\", \"base64urlnopad\").verify(\n      secret,\n      JSON.stringify({\n        ...sessionDataPayload.session,\n        expiresAt: sessionDataPayload.expiresAt\n      }),\n      sessionDataPayload.signature\n    );\n    if (!isValid) {\n      return null;\n    }\n    return sessionDataPayload.session;\n  }\n  return null;\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.DiMXeqeq.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.QSZgH9k6.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.QSZgH9k6.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   m: () => (/* binding */ memoryAdapter)\n/* harmony export */ });\n/* harmony import */ var _better_auth_utils_random__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @better-auth/utils/random */ \"(rsc)/./node_modules/@better-auth/utils/dist/random.mjs\");\n/* harmony import */ var better_call__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! better-call */ \"(rsc)/./node_modules/better-call/dist/index.js\");\n/* harmony import */ var _better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @better-auth/utils/hash */ \"(rsc)/./node_modules/@better-auth/utils/dist/hash.mjs\");\n/* harmony import */ var _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @better-auth/utils/base64 */ \"(rsc)/./node_modules/@better-auth/utils/dist/base64.mjs\");\n/* harmony import */ var _better_auth_utils_hex__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @better-auth/utils/hex */ \"(rsc)/./node_modules/@better-auth/utils/dist/hex.mjs\");\n/* harmony import */ var _better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./better-auth.B4Qoxdgc.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs\");\n/* harmony import */ var _better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./better-auth.DgGir396.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DgGir396.mjs\");\n/* harmony import */ var _better_auth_BvvYEWCP_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./better-auth.BvvYEWCP.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.BvvYEWCP.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst memoryAdapter = (db, config) => {\n  let lazyOptions = null;\n  let adapterCreator = (0,_better_auth_BvvYEWCP_mjs__WEBPACK_IMPORTED_MODULE_7__.c)({\n    config: {\n      adapterId: \"memory\",\n      adapterName: \"Memory Adapter\",\n      usePlural: false,\n      debugLogs: config?.debugLogs || false,\n      customTransformInput(props) {\n        if (props.options.advanced?.database?.useNumberId && props.field === \"id\" && props.action === \"create\") {\n          return db[props.model].length + 1;\n        }\n        return props.data;\n      },\n      transaction: async (cb) => {\n        let clone = structuredClone(db);\n        try {\n          const r = await cb(adapterCreator(lazyOptions));\n          return r;\n        } catch (error) {\n          Object.keys(db).forEach((key) => {\n            db[key] = clone[key];\n          });\n          throw error;\n        }\n      }\n    },\n    adapter: ({ getFieldName, options, debugLog }) => {\n      function convertWhereClause(where, model) {\n        const table = db[model];\n        if (!table) {\n          _better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_6__.a.error(\n            `[MemoryAdapter] Model ${model} not found in the DB`,\n            Object.keys(db)\n          );\n          throw new Error(`Model ${model} not found`);\n        }\n        const evalClause = (record, clause) => {\n          const { field, value, operator } = clause;\n          switch (operator) {\n            case \"in\":\n              if (!Array.isArray(value)) {\n                throw new Error(\"Value must be an array\");\n              }\n              return value.includes(record[field]);\n            case \"not_in\":\n              if (!Array.isArray(value)) {\n                throw new Error(\"Value must be an array\");\n              }\n              return !value.includes(record[field]);\n            case \"contains\":\n              return record[field].includes(value);\n            case \"starts_with\":\n              return record[field].startsWith(value);\n            case \"ends_with\":\n              return record[field].endsWith(value);\n            case \"ne\":\n              return record[field] !== value;\n            case \"gt\":\n              return value != null && Boolean(record[field] > value);\n            case \"gte\":\n              return value != null && Boolean(record[field] >= value);\n            case \"lt\":\n              return value != null && Boolean(record[field] < value);\n            case \"lte\":\n              return value != null && Boolean(record[field] <= value);\n            default:\n              return record[field] === value;\n          }\n        };\n        return table.filter((record) => {\n          if (!where.length || where.length === 0) {\n            return true;\n          }\n          let result = evalClause(record, where[0]);\n          for (const clause of where) {\n            const clauseResult = evalClause(record, clause);\n            if (clause.connector === \"OR\") {\n              result = result || clauseResult;\n            } else {\n              result = result && clauseResult;\n            }\n          }\n          return result;\n        });\n      }\n      return {\n        create: async ({ model, data }) => {\n          if (options.advanced?.database?.useNumberId) {\n            data.id = db[model].length + 1;\n          }\n          if (!db[model]) {\n            db[model] = [];\n          }\n          db[model].push(data);\n          return data;\n        },\n        findOne: async ({ model, where }) => {\n          const res = convertWhereClause(where, model);\n          const record = res[0] || null;\n          return record;\n        },\n        findMany: async ({ model, where, sortBy, limit, offset }) => {\n          let table = db[model];\n          if (where) {\n            table = convertWhereClause(where, model);\n          }\n          if (sortBy) {\n            table = table.sort((a, b) => {\n              const field = getFieldName({ model, field: sortBy.field });\n              const aValue = a[field];\n              const bValue = b[field];\n              let comparison = 0;\n              if (aValue == null && bValue == null) {\n                comparison = 0;\n              } else if (aValue == null) {\n                comparison = -1;\n              } else if (bValue == null) {\n                comparison = 1;\n              } else if (typeof aValue === \"string\" && typeof bValue === \"string\") {\n                comparison = aValue.localeCompare(bValue);\n              } else if (aValue instanceof Date && bValue instanceof Date) {\n                comparison = aValue.getTime() - bValue.getTime();\n              } else if (typeof aValue === \"number\" && typeof bValue === \"number\") {\n                comparison = aValue - bValue;\n              } else if (typeof aValue === \"boolean\" && typeof bValue === \"boolean\") {\n                comparison = aValue === bValue ? 0 : aValue ? 1 : -1;\n              } else {\n                comparison = String(aValue).localeCompare(String(bValue));\n              }\n              return sortBy.direction === \"asc\" ? comparison : -comparison;\n            });\n          }\n          if (offset !== void 0) {\n            table = table.slice(offset);\n          }\n          if (limit !== void 0) {\n            table = table.slice(0, limit);\n          }\n          return table || [];\n        },\n        count: async ({ model, where }) => {\n          if (where) {\n            const filteredRecords = convertWhereClause(where, model);\n            return filteredRecords.length;\n          }\n          return db[model].length;\n        },\n        update: async ({ model, where, update }) => {\n          const res = convertWhereClause(where, model);\n          res.forEach((record) => {\n            Object.assign(record, update);\n          });\n          return res[0] || null;\n        },\n        delete: async ({ model, where }) => {\n          const table = db[model];\n          const res = convertWhereClause(where, model);\n          db[model] = table.filter((record) => !res.includes(record));\n        },\n        deleteMany: async ({ model, where }) => {\n          const table = db[model];\n          const res = convertWhereClause(where, model);\n          let count = 0;\n          db[model] = table.filter((record) => {\n            if (res.includes(record)) {\n              count++;\n              return false;\n            }\n            return !res.includes(record);\n          });\n          return count;\n        },\n        updateMany({ model, where, update }) {\n          const res = convertWhereClause(where, model);\n          res.forEach((record) => {\n            Object.assign(record, update);\n          });\n          return res[0] || null;\n        }\n      };\n    }\n  });\n  return (options) => {\n    lazyOptions = options;\n    return adapterCreator(options);\n  };\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguUVNaZ0g5azYubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFtQztBQUN0QjtBQUNRO0FBQ1k7QUFDQztBQUNEO0FBQ0U7QUFDckI7QUFDbUI7QUFDRDtBQUNBO0FBQ0k7QUFDcUI7QUFDYzs7QUFFdkU7QUFDQTtBQUNBLHVCQUF1Qiw0REFBb0I7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxnQkFBZ0IsaUNBQWlDO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBLFVBQVUsd0RBQU07QUFDaEIscUNBQXFDLE9BQU87QUFDNUM7QUFDQTtBQUNBLG1DQUFtQyxPQUFPO0FBQzFDO0FBQ0E7QUFDQSxrQkFBa0IseUJBQXlCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSx5QkFBeUIsYUFBYTtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULDBCQUEwQixjQUFjO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCwyQkFBMkIscUNBQXFDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyw0QkFBNEI7QUFDdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCx3QkFBd0IsY0FBYztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULHlCQUF5QixzQkFBc0I7QUFDL0M7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0EsU0FBUztBQUNULHlCQUF5QixjQUFjO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCw2QkFBNkIsY0FBYztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSxTQUFTO0FBQ1QscUJBQXFCLHNCQUFzQjtBQUMzQztBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFOEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hdXRvcGxhbmNhbS8uL25vZGVfbW9kdWxlcy9iZXR0ZXItYXV0aC9kaXN0L3NoYXJlZC9iZXR0ZXItYXV0aC5RU1pnSDlrNi5tanM/MGQxMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ0BiZXR0ZXItYXV0aC91dGlscy9yYW5kb20nO1xuaW1wb3J0ICd6b2QnO1xuaW1wb3J0ICdiZXR0ZXItY2FsbCc7XG5pbXBvcnQgJ0BiZXR0ZXItYXV0aC91dGlscy9oYXNoJztcbmltcG9ydCAnQG5vYmxlL2NpcGhlcnMvY2hhY2hhLmpzJztcbmltcG9ydCAnQG5vYmxlL2NpcGhlcnMvdXRpbHMuanMnO1xuaW1wb3J0ICdAYmV0dGVyLWF1dGgvdXRpbHMvYmFzZTY0JztcbmltcG9ydCAnam9zZSc7XG5pbXBvcnQgJ0Bub2JsZS9oYXNoZXMvc2NyeXB0LmpzJztcbmltcG9ydCAnQGJldHRlci1hdXRoL3V0aWxzL2hleCc7XG5pbXBvcnQgJ0Bub2JsZS9oYXNoZXMvdXRpbHMuanMnO1xuaW1wb3J0ICcuL2JldHRlci1hdXRoLkI0UW94ZGdjLm1qcyc7XG5pbXBvcnQgeyBhIGFzIGxvZ2dlciB9IGZyb20gJy4vYmV0dGVyLWF1dGguRGdHaXIzOTYubWpzJztcbmltcG9ydCB7IGMgYXMgY3JlYXRlQWRhcHRlckZhY3RvcnkgfSBmcm9tICcuL2JldHRlci1hdXRoLkJ2dllFV0NQLm1qcyc7XG5cbmNvbnN0IG1lbW9yeUFkYXB0ZXIgPSAoZGIsIGNvbmZpZykgPT4ge1xuICBsZXQgbGF6eU9wdGlvbnMgPSBudWxsO1xuICBsZXQgYWRhcHRlckNyZWF0b3IgPSBjcmVhdGVBZGFwdGVyRmFjdG9yeSh7XG4gICAgY29uZmlnOiB7XG4gICAgICBhZGFwdGVySWQ6IFwibWVtb3J5XCIsXG4gICAgICBhZGFwdGVyTmFtZTogXCJNZW1vcnkgQWRhcHRlclwiLFxuICAgICAgdXNlUGx1cmFsOiBmYWxzZSxcbiAgICAgIGRlYnVnTG9nczogY29uZmlnPy5kZWJ1Z0xvZ3MgfHwgZmFsc2UsXG4gICAgICBjdXN0b21UcmFuc2Zvcm1JbnB1dChwcm9wcykge1xuICAgICAgICBpZiAocHJvcHMub3B0aW9ucy5hZHZhbmNlZD8uZGF0YWJhc2U/LnVzZU51bWJlcklkICYmIHByb3BzLmZpZWxkID09PSBcImlkXCIgJiYgcHJvcHMuYWN0aW9uID09PSBcImNyZWF0ZVwiKSB7XG4gICAgICAgICAgcmV0dXJuIGRiW3Byb3BzLm1vZGVsXS5sZW5ndGggKyAxO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwcm9wcy5kYXRhO1xuICAgICAgfSxcbiAgICAgIHRyYW5zYWN0aW9uOiBhc3luYyAoY2IpID0+IHtcbiAgICAgICAgbGV0IGNsb25lID0gc3RydWN0dXJlZENsb25lKGRiKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCByID0gYXdhaXQgY2IoYWRhcHRlckNyZWF0b3IobGF6eU9wdGlvbnMpKTtcbiAgICAgICAgICByZXR1cm4gcjtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBPYmplY3Qua2V5cyhkYikuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgICAgICBkYltrZXldID0gY2xvbmVba2V5XTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgYWRhcHRlcjogKHsgZ2V0RmllbGROYW1lLCBvcHRpb25zLCBkZWJ1Z0xvZyB9KSA9PiB7XG4gICAgICBmdW5jdGlvbiBjb252ZXJ0V2hlcmVDbGF1c2Uod2hlcmUsIG1vZGVsKSB7XG4gICAgICAgIGNvbnN0IHRhYmxlID0gZGJbbW9kZWxdO1xuICAgICAgICBpZiAoIXRhYmxlKSB7XG4gICAgICAgICAgbG9nZ2VyLmVycm9yKFxuICAgICAgICAgICAgYFtNZW1vcnlBZGFwdGVyXSBNb2RlbCAke21vZGVsfSBub3QgZm91bmQgaW4gdGhlIERCYCxcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKGRiKVxuICAgICAgICAgICk7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBNb2RlbCAke21vZGVsfSBub3QgZm91bmRgKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBldmFsQ2xhdXNlID0gKHJlY29yZCwgY2xhdXNlKSA9PiB7XG4gICAgICAgICAgY29uc3QgeyBmaWVsZCwgdmFsdWUsIG9wZXJhdG9yIH0gPSBjbGF1c2U7XG4gICAgICAgICAgc3dpdGNoIChvcGVyYXRvcikge1xuICAgICAgICAgICAgY2FzZSBcImluXCI6XG4gICAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJWYWx1ZSBtdXN0IGJlIGFuIGFycmF5XCIpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiB2YWx1ZS5pbmNsdWRlcyhyZWNvcmRbZmllbGRdKTtcbiAgICAgICAgICAgIGNhc2UgXCJub3RfaW5cIjpcbiAgICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlZhbHVlIG11c3QgYmUgYW4gYXJyYXlcIik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuICF2YWx1ZS5pbmNsdWRlcyhyZWNvcmRbZmllbGRdKTtcbiAgICAgICAgICAgIGNhc2UgXCJjb250YWluc1wiOlxuICAgICAgICAgICAgICByZXR1cm4gcmVjb3JkW2ZpZWxkXS5pbmNsdWRlcyh2YWx1ZSk7XG4gICAgICAgICAgICBjYXNlIFwic3RhcnRzX3dpdGhcIjpcbiAgICAgICAgICAgICAgcmV0dXJuIHJlY29yZFtmaWVsZF0uc3RhcnRzV2l0aCh2YWx1ZSk7XG4gICAgICAgICAgICBjYXNlIFwiZW5kc193aXRoXCI6XG4gICAgICAgICAgICAgIHJldHVybiByZWNvcmRbZmllbGRdLmVuZHNXaXRoKHZhbHVlKTtcbiAgICAgICAgICAgIGNhc2UgXCJuZVwiOlxuICAgICAgICAgICAgICByZXR1cm4gcmVjb3JkW2ZpZWxkXSAhPT0gdmFsdWU7XG4gICAgICAgICAgICBjYXNlIFwiZ3RcIjpcbiAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgQm9vbGVhbihyZWNvcmRbZmllbGRdID4gdmFsdWUpO1xuICAgICAgICAgICAgY2FzZSBcImd0ZVwiOlxuICAgICAgICAgICAgICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiBCb29sZWFuKHJlY29yZFtmaWVsZF0gPj0gdmFsdWUpO1xuICAgICAgICAgICAgY2FzZSBcImx0XCI6XG4gICAgICAgICAgICAgIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIEJvb2xlYW4ocmVjb3JkW2ZpZWxkXSA8IHZhbHVlKTtcbiAgICAgICAgICAgIGNhc2UgXCJsdGVcIjpcbiAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgQm9vbGVhbihyZWNvcmRbZmllbGRdIDw9IHZhbHVlKTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHJldHVybiByZWNvcmRbZmllbGRdID09PSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB0YWJsZS5maWx0ZXIoKHJlY29yZCkgPT4ge1xuICAgICAgICAgIGlmICghd2hlcmUubGVuZ3RoIHx8IHdoZXJlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxldCByZXN1bHQgPSBldmFsQ2xhdXNlKHJlY29yZCwgd2hlcmVbMF0pO1xuICAgICAgICAgIGZvciAoY29uc3QgY2xhdXNlIG9mIHdoZXJlKSB7XG4gICAgICAgICAgICBjb25zdCBjbGF1c2VSZXN1bHQgPSBldmFsQ2xhdXNlKHJlY29yZCwgY2xhdXNlKTtcbiAgICAgICAgICAgIGlmIChjbGF1c2UuY29ubmVjdG9yID09PSBcIk9SXCIpIHtcbiAgICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0IHx8IGNsYXVzZVJlc3VsdDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdCAmJiBjbGF1c2VSZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY3JlYXRlOiBhc3luYyAoeyBtb2RlbCwgZGF0YSB9KSA9PiB7XG4gICAgICAgICAgaWYgKG9wdGlvbnMuYWR2YW5jZWQ/LmRhdGFiYXNlPy51c2VOdW1iZXJJZCkge1xuICAgICAgICAgICAgZGF0YS5pZCA9IGRiW21vZGVsXS5sZW5ndGggKyAxO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIWRiW21vZGVsXSkge1xuICAgICAgICAgICAgZGJbbW9kZWxdID0gW107XG4gICAgICAgICAgfVxuICAgICAgICAgIGRiW21vZGVsXS5wdXNoKGRhdGEpO1xuICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICB9LFxuICAgICAgICBmaW5kT25lOiBhc3luYyAoeyBtb2RlbCwgd2hlcmUgfSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHJlcyA9IGNvbnZlcnRXaGVyZUNsYXVzZSh3aGVyZSwgbW9kZWwpO1xuICAgICAgICAgIGNvbnN0IHJlY29yZCA9IHJlc1swXSB8fCBudWxsO1xuICAgICAgICAgIHJldHVybiByZWNvcmQ7XG4gICAgICAgIH0sXG4gICAgICAgIGZpbmRNYW55OiBhc3luYyAoeyBtb2RlbCwgd2hlcmUsIHNvcnRCeSwgbGltaXQsIG9mZnNldCB9KSA9PiB7XG4gICAgICAgICAgbGV0IHRhYmxlID0gZGJbbW9kZWxdO1xuICAgICAgICAgIGlmICh3aGVyZSkge1xuICAgICAgICAgICAgdGFibGUgPSBjb252ZXJ0V2hlcmVDbGF1c2Uod2hlcmUsIG1vZGVsKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHNvcnRCeSkge1xuICAgICAgICAgICAgdGFibGUgPSB0YWJsZS5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IGZpZWxkID0gZ2V0RmllbGROYW1lKHsgbW9kZWwsIGZpZWxkOiBzb3J0QnkuZmllbGQgfSk7XG4gICAgICAgICAgICAgIGNvbnN0IGFWYWx1ZSA9IGFbZmllbGRdO1xuICAgICAgICAgICAgICBjb25zdCBiVmFsdWUgPSBiW2ZpZWxkXTtcbiAgICAgICAgICAgICAgbGV0IGNvbXBhcmlzb24gPSAwO1xuICAgICAgICAgICAgICBpZiAoYVZhbHVlID09IG51bGwgJiYgYlZhbHVlID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjb21wYXJpc29uID0gMDtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChhVmFsdWUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbXBhcmlzb24gPSAtMTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChiVmFsdWUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbXBhcmlzb24gPSAxO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBhVmFsdWUgPT09IFwic3RyaW5nXCIgJiYgdHlwZW9mIGJWYWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIGNvbXBhcmlzb24gPSBhVmFsdWUubG9jYWxlQ29tcGFyZShiVmFsdWUpO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGFWYWx1ZSBpbnN0YW5jZW9mIERhdGUgJiYgYlZhbHVlIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICAgICAgICAgIGNvbXBhcmlzb24gPSBhVmFsdWUuZ2V0VGltZSgpIC0gYlZhbHVlLmdldFRpbWUoKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYVZhbHVlID09PSBcIm51bWJlclwiICYmIHR5cGVvZiBiVmFsdWUgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgICAgICBjb21wYXJpc29uID0gYVZhbHVlIC0gYlZhbHVlO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBhVmFsdWUgPT09IFwiYm9vbGVhblwiICYmIHR5cGVvZiBiVmFsdWUgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgICAgICAgICAgICAgY29tcGFyaXNvbiA9IGFWYWx1ZSA9PT0gYlZhbHVlID8gMCA6IGFWYWx1ZSA/IDEgOiAtMTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb21wYXJpc29uID0gU3RyaW5nKGFWYWx1ZSkubG9jYWxlQ29tcGFyZShTdHJpbmcoYlZhbHVlKSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIHNvcnRCeS5kaXJlY3Rpb24gPT09IFwiYXNjXCIgPyBjb21wYXJpc29uIDogLWNvbXBhcmlzb247XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG9mZnNldCAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgICB0YWJsZSA9IHRhYmxlLnNsaWNlKG9mZnNldCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChsaW1pdCAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgICB0YWJsZSA9IHRhYmxlLnNsaWNlKDAsIGxpbWl0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRhYmxlIHx8IFtdO1xuICAgICAgICB9LFxuICAgICAgICBjb3VudDogYXN5bmMgKHsgbW9kZWwsIHdoZXJlIH0pID0+IHtcbiAgICAgICAgICBpZiAod2hlcmUpIHtcbiAgICAgICAgICAgIGNvbnN0IGZpbHRlcmVkUmVjb3JkcyA9IGNvbnZlcnRXaGVyZUNsYXVzZSh3aGVyZSwgbW9kZWwpO1xuICAgICAgICAgICAgcmV0dXJuIGZpbHRlcmVkUmVjb3Jkcy5sZW5ndGg7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBkYlttb2RlbF0ubGVuZ3RoO1xuICAgICAgICB9LFxuICAgICAgICB1cGRhdGU6IGFzeW5jICh7IG1vZGVsLCB3aGVyZSwgdXBkYXRlIH0pID0+IHtcbiAgICAgICAgICBjb25zdCByZXMgPSBjb252ZXJ0V2hlcmVDbGF1c2Uod2hlcmUsIG1vZGVsKTtcbiAgICAgICAgICByZXMuZm9yRWFjaCgocmVjb3JkKSA9PiB7XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKHJlY29yZCwgdXBkYXRlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gcmVzWzBdIHx8IG51bGw7XG4gICAgICAgIH0sXG4gICAgICAgIGRlbGV0ZTogYXN5bmMgKHsgbW9kZWwsIHdoZXJlIH0pID0+IHtcbiAgICAgICAgICBjb25zdCB0YWJsZSA9IGRiW21vZGVsXTtcbiAgICAgICAgICBjb25zdCByZXMgPSBjb252ZXJ0V2hlcmVDbGF1c2Uod2hlcmUsIG1vZGVsKTtcbiAgICAgICAgICBkYlttb2RlbF0gPSB0YWJsZS5maWx0ZXIoKHJlY29yZCkgPT4gIXJlcy5pbmNsdWRlcyhyZWNvcmQpKTtcbiAgICAgICAgfSxcbiAgICAgICAgZGVsZXRlTWFueTogYXN5bmMgKHsgbW9kZWwsIHdoZXJlIH0pID0+IHtcbiAgICAgICAgICBjb25zdCB0YWJsZSA9IGRiW21vZGVsXTtcbiAgICAgICAgICBjb25zdCByZXMgPSBjb252ZXJ0V2hlcmVDbGF1c2Uod2hlcmUsIG1vZGVsKTtcbiAgICAgICAgICBsZXQgY291bnQgPSAwO1xuICAgICAgICAgIGRiW21vZGVsXSA9IHRhYmxlLmZpbHRlcigocmVjb3JkKSA9PiB7XG4gICAgICAgICAgICBpZiAocmVzLmluY2x1ZGVzKHJlY29yZCkpIHtcbiAgICAgICAgICAgICAgY291bnQrKztcbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICFyZXMuaW5jbHVkZXMocmVjb3JkKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gY291bnQ7XG4gICAgICAgIH0sXG4gICAgICAgIHVwZGF0ZU1hbnkoeyBtb2RlbCwgd2hlcmUsIHVwZGF0ZSB9KSB7XG4gICAgICAgICAgY29uc3QgcmVzID0gY29udmVydFdoZXJlQ2xhdXNlKHdoZXJlLCBtb2RlbCk7XG4gICAgICAgICAgcmVzLmZvckVhY2goKHJlY29yZCkgPT4ge1xuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihyZWNvcmQsIHVwZGF0ZSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIHJlc1swXSB8fCBudWxsO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiAob3B0aW9ucykgPT4ge1xuICAgIGxhenlPcHRpb25zID0gb3B0aW9ucztcbiAgICByZXR1cm4gYWRhcHRlckNyZWF0b3Iob3B0aW9ucyk7XG4gIH07XG59O1xuXG5leHBvcnQgeyBtZW1vcnlBZGFwdGVyIGFzIG0gfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.QSZgH9k6.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.YwDQhoPc.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.YwDQhoPc.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   c: () => (/* binding */ checkPassword),\n/* harmony export */   v: () => (/* binding */ validatePassword)\n/* harmony export */ });\n/* harmony import */ var better_call__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! better-call */ \"(rsc)/./node_modules/better-call/dist/index.js\");\n\n\nasync function validatePassword(ctx, data) {\n  const accounts = await ctx.context.internalAdapter.findAccounts(data.userId);\n  const credentialAccount = accounts?.find(\n    (account) => account.providerId === \"credential\"\n  );\n  const currentPassword = credentialAccount?.password;\n  if (!credentialAccount || !currentPassword) {\n    return false;\n  }\n  const compare = await ctx.context.password.verify({\n    hash: currentPassword,\n    password: data.password\n  });\n  return compare;\n}\nasync function checkPassword(userId, c) {\n  const accounts = await c.context.internalAdapter.findAccounts(userId);\n  const credentialAccount = accounts?.find(\n    (account) => account.providerId === \"credential\"\n  );\n  const currentPassword = credentialAccount?.password;\n  if (!credentialAccount || !currentPassword || !c.body.password) {\n    throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n      message: \"No password credential found\"\n    });\n  }\n  const compare = await c.context.password.verify({\n    hash: currentPassword,\n    password: c.body.password\n  });\n  if (!compare) {\n    throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n      message: \"Invalid password\"\n    });\n  }\n  return true;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguWXdEUWhvUGMubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUF1Qzs7QUFFdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsaURBQVE7QUFDdEI7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxjQUFjLGlEQUFRO0FBQ3RCO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFcUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hdXRvcGxhbmNhbS8uL25vZGVfbW9kdWxlcy9iZXR0ZXItYXV0aC9kaXN0L3NoYXJlZC9iZXR0ZXItYXV0aC5Zd0RRaG9QYy5tanM/MzAxMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBUElFcnJvciB9IGZyb20gJ2JldHRlci1jYWxsJztcblxuYXN5bmMgZnVuY3Rpb24gdmFsaWRhdGVQYXNzd29yZChjdHgsIGRhdGEpIHtcbiAgY29uc3QgYWNjb3VudHMgPSBhd2FpdCBjdHguY29udGV4dC5pbnRlcm5hbEFkYXB0ZXIuZmluZEFjY291bnRzKGRhdGEudXNlcklkKTtcbiAgY29uc3QgY3JlZGVudGlhbEFjY291bnQgPSBhY2NvdW50cz8uZmluZChcbiAgICAoYWNjb3VudCkgPT4gYWNjb3VudC5wcm92aWRlcklkID09PSBcImNyZWRlbnRpYWxcIlxuICApO1xuICBjb25zdCBjdXJyZW50UGFzc3dvcmQgPSBjcmVkZW50aWFsQWNjb3VudD8ucGFzc3dvcmQ7XG4gIGlmICghY3JlZGVudGlhbEFjY291bnQgfHwgIWN1cnJlbnRQYXNzd29yZCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBjb25zdCBjb21wYXJlID0gYXdhaXQgY3R4LmNvbnRleHQucGFzc3dvcmQudmVyaWZ5KHtcbiAgICBoYXNoOiBjdXJyZW50UGFzc3dvcmQsXG4gICAgcGFzc3dvcmQ6IGRhdGEucGFzc3dvcmRcbiAgfSk7XG4gIHJldHVybiBjb21wYXJlO1xufVxuYXN5bmMgZnVuY3Rpb24gY2hlY2tQYXNzd29yZCh1c2VySWQsIGMpIHtcbiAgY29uc3QgYWNjb3VudHMgPSBhd2FpdCBjLmNvbnRleHQuaW50ZXJuYWxBZGFwdGVyLmZpbmRBY2NvdW50cyh1c2VySWQpO1xuICBjb25zdCBjcmVkZW50aWFsQWNjb3VudCA9IGFjY291bnRzPy5maW5kKFxuICAgIChhY2NvdW50KSA9PiBhY2NvdW50LnByb3ZpZGVySWQgPT09IFwiY3JlZGVudGlhbFwiXG4gICk7XG4gIGNvbnN0IGN1cnJlbnRQYXNzd29yZCA9IGNyZWRlbnRpYWxBY2NvdW50Py5wYXNzd29yZDtcbiAgaWYgKCFjcmVkZW50aWFsQWNjb3VudCB8fCAhY3VycmVudFBhc3N3b3JkIHx8ICFjLmJvZHkucGFzc3dvcmQpIHtcbiAgICB0aHJvdyBuZXcgQVBJRXJyb3IoXCJCQURfUkVRVUVTVFwiLCB7XG4gICAgICBtZXNzYWdlOiBcIk5vIHBhc3N3b3JkIGNyZWRlbnRpYWwgZm91bmRcIlxuICAgIH0pO1xuICB9XG4gIGNvbnN0IGNvbXBhcmUgPSBhd2FpdCBjLmNvbnRleHQucGFzc3dvcmQudmVyaWZ5KHtcbiAgICBoYXNoOiBjdXJyZW50UGFzc3dvcmQsXG4gICAgcGFzc3dvcmQ6IGMuYm9keS5wYXNzd29yZFxuICB9KTtcbiAgaWYgKCFjb21wYXJlKSB7XG4gICAgdGhyb3cgbmV3IEFQSUVycm9yKFwiQkFEX1JFUVVFU1RcIiwge1xuICAgICAgbWVzc2FnZTogXCJJbnZhbGlkIHBhc3N3b3JkXCJcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZXhwb3J0IHsgY2hlY2tQYXNzd29yZCBhcyBjLCB2YWxpZGF0ZVBhc3N3b3JkIGFzIHYgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.YwDQhoPc.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.mPTDVpKF.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.mPTDVpKF.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   b: () => (/* binding */ betterAuth),\n/* harmony export */   c: () => (/* binding */ createTelemetry),\n/* harmony export */   g: () => (/* binding */ getTelemetryAuthConfig)\n/* harmony export */ });\n/* harmony import */ var _api_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../api/index.mjs */ \"(rsc)/./node_modules/better-auth/dist/api/index.mjs\");\n/* harmony import */ var defu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! defu */ \"(rsc)/./node_modules/defu/dist/defu.mjs\");\n/* harmony import */ var _crypto_index_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../crypto/index.mjs */ \"(rsc)/./node_modules/better-auth/dist/crypto/index.mjs\");\n/* harmony import */ var _better_auth_core_db__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @better-auth/core/db */ \"(rsc)/./node_modules/@better-auth/core/dist/db/index.mjs\");\n/* harmony import */ var _better_auth_D_L3RQ6y_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./better-auth.D-L3RQ6y.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.D-L3RQ6y.mjs\");\n/* harmony import */ var _better_auth_DhziC0ap_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./better-auth.DhziC0ap.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DhziC0ap.mjs\");\n/* harmony import */ var better_call__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! better-call */ \"(rsc)/./node_modules/better-call/dist/index.js\");\n/* harmony import */ var _better_auth_DiMXeqeq_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./better-auth.DiMXeqeq.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DiMXeqeq.mjs\");\n/* harmony import */ var _better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./better-auth.DgGir396.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DgGir396.mjs\");\n/* harmony import */ var _better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./better-auth.C3-_8m-g.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.C3-_8m-g.mjs\");\n/* harmony import */ var _better_auth_BUPPRXfK_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./better-auth.BUPPRXfK.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.BUPPRXfK.mjs\");\n/* harmony import */ var _better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @better-auth/utils/hash */ \"(rsc)/./node_modules/@better-auth/utils/dist/hash.mjs\");\n/* harmony import */ var _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @better-auth/utils/base64 */ \"(rsc)/./node_modules/@better-auth/utils/dist/base64.mjs\");\n/* harmony import */ var _better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./better-auth.B4Qoxdgc.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs\");\n/* harmony import */ var _better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./better-auth.CiuwFiHM.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.CiuwFiHM.mjs\");\n/* harmony import */ var _better_auth_YwDQhoPc_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./better-auth.YwDQhoPc.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.YwDQhoPc.mjs\");\n/* harmony import */ var _better_auth_BRFtaovt_mjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./better-auth.BRFtaovt.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.BRFtaovt.mjs\");\n/* harmony import */ var _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./better-auth.DdzSJf-n.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs\");\n/* harmony import */ var _better_auth_utils_hex__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @better-auth/utils/hex */ \"(rsc)/./node_modules/@better-auth/utils/dist/hex.mjs\");\n/* harmony import */ var _better_fetch_fetch__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @better-fetch/fetch */ \"(rsc)/./node_modules/@better-fetch/fetch/dist/index.js\");\n/* harmony import */ var _better_auth_utils_random__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @better-auth/utils/random */ \"(rsc)/./node_modules/@better-auth/utils/dist/random.mjs\");\n/* harmony import */ var _better_auth_BAk2ZmIN_mjs__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./better-auth.BAk2ZmIN.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.BAk2ZmIN.mjs\");\n/* harmony import */ var _better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./better-auth.C5vDERgF.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.C5vDERgF.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst DEFAULT_SECRET = \"better-auth-secret-123456789\";\n\nlet packageJSONCache;\nasync function readRootPackageJson() {\n  if (packageJSONCache) return packageJSONCache;\n  try {\n    const cwd = typeof process !== \"undefined\" && typeof process.cwd === \"function\" ? process.cwd() : \"\";\n    if (!cwd) return void 0;\n    const importRuntime = (m) => Function(\"mm\", \"return import(mm)\")(m);\n    const [{ default: fs }, { default: path }] = await Promise.all([\n      importRuntime(\"fs/promises\"),\n      importRuntime(\"path\")\n    ]);\n    const raw = await fs.readFile(path.join(cwd, \"package.json\"), \"utf-8\");\n    packageJSONCache = JSON.parse(raw);\n    return packageJSONCache;\n  } catch {\n  }\n  return void 0;\n}\nasync function getPackageVersion(pkg) {\n  if (packageJSONCache) {\n    return packageJSONCache.dependencies?.[pkg] || packageJSONCache.devDependencies?.[pkg] || packageJSONCache.peerDependencies?.[pkg];\n  }\n  try {\n    const cwd = typeof process !== \"undefined\" && typeof process.cwd === \"function\" ? process.cwd() : \"\";\n    if (!cwd) throw new Error(\"no-cwd\");\n    const importRuntime = (m) => Function(\"mm\", \"return import(mm)\")(m);\n    const [{ default: fs }, { default: path }] = await Promise.all([\n      importRuntime(\"fs/promises\"),\n      importRuntime(\"path\")\n    ]);\n    const pkgJsonPath = path.join(cwd, \"node_modules\", pkg, \"package.json\");\n    const raw = await fs.readFile(pkgJsonPath, \"utf-8\");\n    const json = JSON.parse(raw);\n    const resolved = json.version || await getVersionFromLocalPackageJson(pkg) || void 0;\n    return resolved;\n  } catch {\n  }\n  const fromRoot = await getVersionFromLocalPackageJson(pkg);\n  return fromRoot;\n}\nasync function getVersionFromLocalPackageJson(pkg) {\n  const json = await readRootPackageJson();\n  if (!json) return void 0;\n  const allDeps = {\n    ...json.dependencies,\n    ...json.devDependencies,\n    ...json.peerDependencies\n  };\n  return allDeps[pkg];\n}\nasync function getNameFromLocalPackageJson() {\n  const json = await readRootPackageJson();\n  return json?.name;\n}\n\nlet projectIdCached = null;\nasync function getProjectId(baseUrl) {\n  if (projectIdCached) return projectIdCached;\n  const projectName = await getNameFromLocalPackageJson();\n  if (projectName) {\n    projectIdCached = await (0,_crypto_index_mjs__WEBPACK_IMPORTED_MODULE_2__.hashToBase64)(\n      baseUrl ? baseUrl + projectName : projectName\n    );\n    return projectIdCached;\n  }\n  if (baseUrl) {\n    projectIdCached = await (0,_crypto_index_mjs__WEBPACK_IMPORTED_MODULE_2__.hashToBase64)(baseUrl);\n    return projectIdCached;\n  }\n  projectIdCached = (0,_better_auth_BUPPRXfK_mjs__WEBPACK_IMPORTED_MODULE_10__.g)(32);\n  return projectIdCached;\n}\n\nconst importRuntime = (m) => {\n  return Function(\"mm\", \"return import(mm)\")(m);\n};\n\nfunction getVendor() {\n  const hasAny = (...keys) => keys.some((k) => Boolean(_better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_14__.e[k]));\n  if (hasAny(\"CF_PAGES\", \"CF_PAGES_URL\", \"CF_ACCOUNT_ID\") || typeof navigator !== \"undefined\" && navigator.userAgent === \"Cloudflare-Workers\") {\n    return \"cloudflare\";\n  }\n  if (hasAny(\"VERCEL\", \"VERCEL_URL\", \"VERCEL_ENV\")) return \"vercel\";\n  if (hasAny(\"NETLIFY\", \"NETLIFY_URL\")) return \"netlify\";\n  if (hasAny(\n    \"RENDER\",\n    \"RENDER_URL\",\n    \"RENDER_INTERNAL_HOSTNAME\",\n    \"RENDER_SERVICE_ID\"\n  )) {\n    return \"render\";\n  }\n  if (hasAny(\"AWS_LAMBDA_FUNCTION_NAME\", \"AWS_EXECUTION_ENV\", \"LAMBDA_TASK_ROOT\")) {\n    return \"aws\";\n  }\n  if (hasAny(\n    \"GOOGLE_CLOUD_FUNCTION_NAME\",\n    \"GOOGLE_CLOUD_PROJECT\",\n    \"GCP_PROJECT\",\n    \"K_SERVICE\"\n  )) {\n    return \"gcp\";\n  }\n  if (hasAny(\n    \"AZURE_FUNCTION_NAME\",\n    \"FUNCTIONS_WORKER_RUNTIME\",\n    \"WEBSITE_INSTANCE_ID\",\n    \"WEBSITE_SITE_NAME\"\n  )) {\n    return \"azure\";\n  }\n  if (hasAny(\"DENO_DEPLOYMENT_ID\", \"DENO_REGION\")) return \"deno-deploy\";\n  if (hasAny(\"FLY_APP_NAME\", \"FLY_REGION\", \"FLY_ALLOC_ID\")) return \"fly-io\";\n  if (hasAny(\"RAILWAY_STATIC_URL\", \"RAILWAY_ENVIRONMENT_NAME\"))\n    return \"railway\";\n  if (hasAny(\"DYNO\", \"HEROKU_APP_NAME\")) return \"heroku\";\n  if (hasAny(\"DO_DEPLOYMENT_ID\", \"DO_APP_NAME\", \"DIGITALOCEAN\"))\n    return \"digitalocean\";\n  if (hasAny(\"KOYEB\", \"KOYEB_DEPLOYMENT_ID\", \"KOYEB_APP_NAME\")) return \"koyeb\";\n  return null;\n}\nasync function detectSystemInfo() {\n  try {\n    if (getVendor() === \"cloudflare\") return \"cloudflare\";\n    const os = await importRuntime(\"os\");\n    const cpus = os.cpus();\n    return {\n      deploymentVendor: getVendor(),\n      systemPlatform: os.platform(),\n      systemRelease: os.release(),\n      systemArchitecture: os.arch(),\n      cpuCount: cpus.length,\n      cpuModel: cpus.length ? cpus[0].model : null,\n      cpuSpeed: cpus.length ? cpus[0].speed : null,\n      memory: os.totalmem(),\n      isWSL: await isWsl(),\n      isDocker: await isDocker(),\n      isTTY: typeof process !== \"undefined\" && process.stdout ? process.stdout.isTTY : null\n    };\n  } catch (e) {\n    return {\n      systemPlatform: null,\n      systemRelease: null,\n      systemArchitecture: null,\n      cpuCount: null,\n      cpuModel: null,\n      cpuSpeed: null,\n      memory: null,\n      isWSL: null,\n      isDocker: null,\n      isTTY: null\n    };\n  }\n}\nlet isDockerCached;\nasync function hasDockerEnv() {\n  if (getVendor() === \"cloudflare\") return false;\n  try {\n    const fs = await importRuntime(\"fs\");\n    fs.statSync(\"/.dockerenv\");\n    return true;\n  } catch {\n    return false;\n  }\n}\nasync function hasDockerCGroup() {\n  if (getVendor() === \"cloudflare\") return false;\n  try {\n    const fs = await importRuntime(\"fs\");\n    return fs.readFileSync(\"/proc/self/cgroup\", \"utf8\").includes(\"docker\");\n  } catch {\n    return false;\n  }\n}\nasync function isDocker() {\n  if (getVendor() === \"cloudflare\") return false;\n  if (isDockerCached === void 0) {\n    isDockerCached = await hasDockerEnv() || await hasDockerCGroup();\n  }\n  return isDockerCached;\n}\nasync function isWsl() {\n  try {\n    if (getVendor() === \"cloudflare\") return false;\n    if (typeof process === \"undefined\" || process?.platform !== \"linux\") {\n      return false;\n    }\n    const fs = await importRuntime(\"fs\");\n    const os = await importRuntime(\"os\");\n    if (os.release().toLowerCase().includes(\"microsoft\")) {\n      if (await isInsideContainer()) {\n        return false;\n      }\n      return true;\n    }\n    return fs.readFileSync(\"/proc/version\", \"utf8\").toLowerCase().includes(\"microsoft\") ? !await isInsideContainer() : false;\n  } catch {\n    return false;\n  }\n}\nlet isInsideContainerCached;\nconst hasContainerEnv = async () => {\n  if (getVendor() === \"cloudflare\") return false;\n  try {\n    const fs = await importRuntime(\"fs\");\n    fs.statSync(\"/run/.containerenv\");\n    return true;\n  } catch {\n    return false;\n  }\n};\nasync function isInsideContainer() {\n  if (isInsideContainerCached === void 0) {\n    isInsideContainerCached = await hasContainerEnv() || await isDocker();\n  }\n  return isInsideContainerCached;\n}\nfunction isCI() {\n  return _better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_14__.e.CI !== \"false\" && (\"BUILD_ID\" in _better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_14__.e || // Jenkins, Cloudbees\n  \"BUILD_NUMBER\" in _better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_14__.e || // Jenkins, TeamCity (fixed typo: extra space removed)\n  \"CI\" in _better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_14__.e || // Travis CI, CircleCI, Cirrus CI, Gitlab CI, Appveyor, CodeShip, dsari, Cloudflare\n  \"CI_APP_ID\" in _better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_14__.e || // Appflow\n  \"CI_BUILD_ID\" in _better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_14__.e || // Appflow\n  \"CI_BUILD_NUMBER\" in _better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_14__.e || // Appflow\n  \"CI_NAME\" in _better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_14__.e || // Codeship and others\n  \"CONTINUOUS_INTEGRATION\" in _better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_14__.e || // Travis CI, Cirrus CI\n  \"RUN_ID\" in _better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_14__.e);\n}\n\nfunction detectRuntime() {\n  if (typeof Deno !== \"undefined\") {\n    const denoVersion = Deno?.version?.deno ?? null;\n    return { name: \"deno\", version: denoVersion };\n  }\n  if (typeof Bun !== \"undefined\") {\n    const bunVersion = Bun?.version ?? null;\n    return { name: \"bun\", version: bunVersion };\n  }\n  if (typeof process !== \"undefined\" && process?.versions?.node) {\n    return { name: \"node\", version: process.versions.node ?? null };\n  }\n  return { name: \"edge\", version: null };\n}\nfunction detectEnvironment() {\n  return (0,_better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_14__.g)(\"NODE_ENV\") === \"production\" ? \"production\" : isCI() ? \"ci\" : (0,_better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_14__.i)() ? \"test\" : \"development\";\n}\n\nconst DATABASES = {\n  pg: \"postgresql\",\n  mysql: \"mysql\",\n  mariadb: \"mariadb\",\n  sqlite3: \"sqlite\",\n  \"better-sqlite3\": \"sqlite\",\n  \"@prisma/client\": \"prisma\",\n  mongoose: \"mongodb\",\n  mongodb: \"mongodb\",\n  \"drizzle-orm\": \"drizzle\"\n};\nasync function detectDatabase() {\n  for (const [pkg, name] of Object.entries(DATABASES)) {\n    const version = await getPackageVersion(pkg);\n    if (version) return { name, version };\n  }\n  return void 0;\n}\n\nconst FRAMEWORKS = {\n  next: \"next\",\n  nuxt: \"nuxt\",\n  \"@remix-run/server-runtime\": \"remix\",\n  astro: \"astro\",\n  \"@sveltejs/kit\": \"sveltekit\",\n  \"solid-start\": \"solid-start\",\n  \"tanstack-start\": \"tanstack-start\",\n  hono: \"hono\",\n  express: \"express\",\n  elysia: \"elysia\",\n  expo: \"expo\"\n};\nasync function detectFramework() {\n  for (const [pkg, name] of Object.entries(FRAMEWORKS)) {\n    const version = await getPackageVersion(pkg);\n    if (version) return { name, version };\n  }\n  return void 0;\n}\n\nfunction detectPackageManager() {\n  const userAgent = _better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_14__.e.npm_config_user_agent;\n  if (!userAgent) {\n    return void 0;\n  }\n  const pmSpec = userAgent.split(\" \")[0];\n  const separatorPos = pmSpec.lastIndexOf(\"/\");\n  const name = pmSpec.substring(0, separatorPos);\n  return {\n    name: name === \"npminstall\" ? \"cnpm\" : name,\n    version: pmSpec.substring(separatorPos + 1)\n  };\n}\n\nfunction getTelemetryAuthConfig(options, context) {\n  return {\n    database: context?.database,\n    adapter: context?.adapter,\n    emailVerification: {\n      sendVerificationEmail: !!options.emailVerification?.sendVerificationEmail,\n      sendOnSignUp: !!options.emailVerification?.sendOnSignUp,\n      sendOnSignIn: !!options.emailVerification?.sendOnSignIn,\n      autoSignInAfterVerification: !!options.emailVerification?.autoSignInAfterVerification,\n      expiresIn: options.emailVerification?.expiresIn,\n      onEmailVerification: !!options.emailVerification?.onEmailVerification,\n      afterEmailVerification: !!options.emailVerification?.afterEmailVerification\n    },\n    emailAndPassword: {\n      enabled: !!options.emailAndPassword?.enabled,\n      disableSignUp: !!options.emailAndPassword?.disableSignUp,\n      requireEmailVerification: !!options.emailAndPassword?.requireEmailVerification,\n      maxPasswordLength: options.emailAndPassword?.maxPasswordLength,\n      minPasswordLength: options.emailAndPassword?.minPasswordLength,\n      sendResetPassword: !!options.emailAndPassword?.sendResetPassword,\n      resetPasswordTokenExpiresIn: options.emailAndPassword?.resetPasswordTokenExpiresIn,\n      onPasswordReset: !!options.emailAndPassword?.onPasswordReset,\n      password: {\n        hash: !!options.emailAndPassword?.password?.hash,\n        verify: !!options.emailAndPassword?.password?.verify\n      },\n      autoSignIn: !!options.emailAndPassword?.autoSignIn,\n      revokeSessionsOnPasswordReset: !!options.emailAndPassword?.revokeSessionsOnPasswordReset\n    },\n    socialProviders: Object.keys(options.socialProviders || {}).map((p) => {\n      const provider = options.socialProviders?.[p];\n      if (!provider) return {};\n      return {\n        id: p,\n        mapProfileToUser: !!provider.mapProfileToUser,\n        disableDefaultScope: !!provider.disableDefaultScope,\n        disableIdTokenSignIn: !!provider.disableIdTokenSignIn,\n        disableImplicitSignUp: provider.disableImplicitSignUp,\n        disableSignUp: provider.disableSignUp,\n        getUserInfo: !!provider.getUserInfo,\n        overrideUserInfoOnSignIn: !!provider.overrideUserInfoOnSignIn,\n        prompt: provider.prompt,\n        verifyIdToken: !!provider.verifyIdToken,\n        scope: provider.scope,\n        refreshAccessToken: !!provider.refreshAccessToken\n      };\n    }),\n    plugins: options.plugins?.map((p) => p.id.toString()),\n    user: {\n      modelName: options.user?.modelName,\n      fields: options.user?.fields,\n      additionalFields: options.user?.additionalFields,\n      changeEmail: {\n        enabled: options.user?.changeEmail?.enabled,\n        sendChangeEmailVerification: !!options.user?.changeEmail?.sendChangeEmailVerification\n      }\n    },\n    verification: {\n      modelName: options.verification?.modelName,\n      disableCleanup: options.verification?.disableCleanup,\n      fields: options.verification?.fields\n    },\n    session: {\n      modelName: options.session?.modelName,\n      additionalFields: options.session?.additionalFields,\n      cookieCache: {\n        enabled: options.session?.cookieCache?.enabled,\n        maxAge: options.session?.cookieCache?.maxAge\n      },\n      disableSessionRefresh: options.session?.disableSessionRefresh,\n      expiresIn: options.session?.expiresIn,\n      fields: options.session?.fields,\n      freshAge: options.session?.freshAge,\n      preserveSessionInDatabase: options.session?.preserveSessionInDatabase,\n      storeSessionInDatabase: options.session?.storeSessionInDatabase,\n      updateAge: options.session?.updateAge\n    },\n    account: {\n      modelName: options.account?.modelName,\n      fields: options.account?.fields,\n      encryptOAuthTokens: options.account?.encryptOAuthTokens,\n      updateAccountOnSignIn: options.account?.updateAccountOnSignIn,\n      accountLinking: {\n        enabled: options.account?.accountLinking?.enabled,\n        trustedProviders: options.account?.accountLinking?.trustedProviders,\n        updateUserInfoOnLink: options.account?.accountLinking?.updateUserInfoOnLink,\n        allowUnlinkingAll: options.account?.accountLinking?.allowUnlinkingAll\n      }\n    },\n    hooks: {\n      after: !!options.hooks?.after,\n      before: !!options.hooks?.before\n    },\n    secondaryStorage: !!options.secondaryStorage,\n    advanced: {\n      cookiePrefix: !!options.advanced?.cookiePrefix,\n      //this shouldn't be tracked\n      cookies: !!options.advanced?.cookies,\n      crossSubDomainCookies: {\n        domain: !!options.advanced?.crossSubDomainCookies?.domain,\n        enabled: options.advanced?.crossSubDomainCookies?.enabled,\n        additionalCookies: options.advanced?.crossSubDomainCookies?.additionalCookies\n      },\n      database: {\n        useNumberId: !!options.advanced?.database?.useNumberId,\n        generateId: options.advanced?.database?.generateId,\n        defaultFindManyLimit: options.advanced?.database?.defaultFindManyLimit\n      },\n      useSecureCookies: options.advanced?.useSecureCookies,\n      ipAddress: {\n        disableIpTracking: options.advanced?.ipAddress?.disableIpTracking,\n        ipAddressHeaders: options.advanced?.ipAddress?.ipAddressHeaders\n      },\n      disableCSRFCheck: options.advanced?.disableCSRFCheck,\n      cookieAttributes: {\n        expires: options.advanced?.defaultCookieAttributes?.expires,\n        secure: options.advanced?.defaultCookieAttributes?.secure,\n        sameSite: options.advanced?.defaultCookieAttributes?.sameSite,\n        domain: !!options.advanced?.defaultCookieAttributes?.domain,\n        path: options.advanced?.defaultCookieAttributes?.path,\n        httpOnly: options.advanced?.defaultCookieAttributes?.httpOnly\n      }\n    },\n    trustedOrigins: options.trustedOrigins?.length,\n    rateLimit: {\n      storage: options.rateLimit?.storage,\n      modelName: options.rateLimit?.modelName,\n      window: options.rateLimit?.window,\n      customStorage: !!options.rateLimit?.customStorage,\n      enabled: options.rateLimit?.enabled,\n      max: options.rateLimit?.max\n    },\n    onAPIError: {\n      errorURL: options.onAPIError?.errorURL,\n      onError: !!options.onAPIError?.onError,\n      throw: options.onAPIError?.throw\n    },\n    logger: {\n      disabled: options.logger?.disabled,\n      level: options.logger?.level,\n      log: !!options.logger?.log\n    },\n    databaseHooks: {\n      user: {\n        create: {\n          after: !!options.databaseHooks?.user?.create?.after,\n          before: !!options.databaseHooks?.user?.create?.before\n        },\n        update: {\n          after: !!options.databaseHooks?.user?.update?.after,\n          before: !!options.databaseHooks?.user?.update?.before\n        }\n      },\n      session: {\n        create: {\n          after: !!options.databaseHooks?.session?.create?.after,\n          before: !!options.databaseHooks?.session?.create?.before\n        },\n        update: {\n          after: !!options.databaseHooks?.session?.update?.after,\n          before: !!options.databaseHooks?.session?.update?.before\n        }\n      },\n      account: {\n        create: {\n          after: !!options.databaseHooks?.account?.create?.after,\n          before: !!options.databaseHooks?.account?.create?.before\n        },\n        update: {\n          after: !!options.databaseHooks?.account?.update?.after,\n          before: !!options.databaseHooks?.account?.update?.before\n        }\n      },\n      verification: {\n        create: {\n          after: !!options.databaseHooks?.verification?.create?.after,\n          before: !!options.databaseHooks?.verification?.create?.before\n        },\n        update: {\n          after: !!options.databaseHooks?.verification?.update?.after,\n          before: !!options.databaseHooks?.verification?.update?.before\n        }\n      }\n    }\n  };\n}\n\nasync function createTelemetry(options, context) {\n  const debugEnabled = options.telemetry?.debug || (0,_better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_14__.c)(\"BETTER_AUTH_TELEMETRY_DEBUG\", false);\n  const TELEMETRY_ENDPOINT = _better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_14__.E.BETTER_AUTH_TELEMETRY_ENDPOINT;\n  const track = async (event) => {\n    try {\n      if (context?.customTrack) {\n        await context.customTrack(event);\n      } else {\n        if (debugEnabled) {\n          await Promise.resolve(\n            _better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_8__.a.info(\"telemetry event\", JSON.stringify(event, null, 2))\n          );\n        } else {\n          await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_19__.betterFetch)(TELEMETRY_ENDPOINT, {\n            method: \"POST\",\n            body: event\n          });\n        }\n      }\n    } catch {\n    }\n  };\n  const isEnabled = async () => {\n    const telemetryEnabled = options.telemetry?.enabled !== void 0 ? options.telemetry.enabled : false;\n    const envEnabled = (0,_better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_14__.c)(\"BETTER_AUTH_TELEMETRY\", false);\n    return (envEnabled || telemetryEnabled) && (context?.skipTestCheck || !(0,_better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_14__.i)());\n  };\n  const enabled = await isEnabled();\n  let anonymousId;\n  if (enabled) {\n    anonymousId = await getProjectId(options.baseURL);\n    const payload = {\n      config: getTelemetryAuthConfig(options),\n      runtime: detectRuntime(),\n      database: await detectDatabase(),\n      framework: await detectFramework(),\n      environment: detectEnvironment(),\n      systemInfo: await detectSystemInfo(),\n      packageManager: detectPackageManager()\n    };\n    void track({ type: \"init\", payload, anonymousId });\n  }\n  return {\n    publish: async (event) => {\n      if (!enabled) return;\n      if (!anonymousId) {\n        anonymousId = await getProjectId(options.baseURL);\n      }\n      await track({\n        type: event.type,\n        payload: event.payload,\n        anonymousId\n      });\n    }\n  };\n}\n\nfunction isPromise(obj) {\n  return !!obj && (typeof obj === \"object\" || typeof obj === \"function\") && typeof obj.then === \"function\";\n}\n\nconst init = async (options) => {\n  const adapter = await (0,_better_auth_D_L3RQ6y_mjs__WEBPACK_IMPORTED_MODULE_4__.a)(options);\n  const plugins = options.plugins || [];\n  const internalPlugins = getInternalPlugins(options);\n  const logger = (0,_better_auth_DgGir396_mjs__WEBPACK_IMPORTED_MODULE_8__.c)(options.logger);\n  const baseURL = (0,_better_auth_BRFtaovt_mjs__WEBPACK_IMPORTED_MODULE_16__.a)(options.baseURL, options.basePath);\n  const secret = options.secret || _better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_14__.e.BETTER_AUTH_SECRET || _better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_14__.e.AUTH_SECRET || DEFAULT_SECRET;\n  if (secret === DEFAULT_SECRET) {\n    if (_better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_14__.b) {\n      logger.error(\n        \"You are using the default secret. Please set `BETTER_AUTH_SECRET` in your environment variables or pass `secret` in your auth config.\"\n      );\n    }\n  }\n  options = {\n    ...options,\n    secret,\n    baseURL: baseURL ? new URL(baseURL).origin : \"\",\n    basePath: options.basePath || \"/api/auth\",\n    plugins: plugins.concat(internalPlugins)\n  };\n  (0,_api_index_mjs__WEBPACK_IMPORTED_MODULE_0__.checkEndpointConflicts)(options, logger);\n  const cookies = (0,_better_auth_DiMXeqeq_mjs__WEBPACK_IMPORTED_MODULE_7__.g)(options);\n  const tables = (0,_better_auth_DhziC0ap_mjs__WEBPACK_IMPORTED_MODULE_5__.g)(options);\n  const providers = Object.entries(\n    options.socialProviders || {}\n  ).map(([key, config]) => {\n    if (config == null) {\n      return null;\n    }\n    if (config.enabled === false) {\n      return null;\n    }\n    if (!config.clientId) {\n      logger.warn(\n        `Social provider ${key} is missing clientId or clientSecret`\n      );\n    }\n    const provider = _better_auth_C3_8m_g_mjs__WEBPACK_IMPORTED_MODULE_9__.U[key](config);\n    provider.disableImplicitSignUp = config.disableImplicitSignUp;\n    return provider;\n  }).filter((x) => x !== null);\n  const generateIdFunc = ({ model, size }) => {\n    if (typeof options.advanced?.generateId === \"function\") {\n      return options.advanced.generateId({ model, size });\n    }\n    if (typeof options?.advanced?.database?.generateId === \"function\") {\n      return options.advanced.database.generateId({ model, size });\n    }\n    return (0,_better_auth_BUPPRXfK_mjs__WEBPACK_IMPORTED_MODULE_10__.g)(size);\n  };\n  const { publish } = await createTelemetry(options, {\n    adapter: adapter.id,\n    database: typeof options.database === \"function\" ? \"adapter\" : (0,_better_auth_BAk2ZmIN_mjs__WEBPACK_IMPORTED_MODULE_21__.g)(options.database) || \"unknown\"\n  });\n  let ctx = {\n    appName: options.appName || \"Better Auth\",\n    socialProviders: providers,\n    options,\n    tables,\n    trustedOrigins: getTrustedOrigins(options),\n    baseURL: baseURL || \"\",\n    sessionConfig: {\n      updateAge: options.session?.updateAge !== void 0 ? options.session.updateAge : 24 * 60 * 60,\n      // 24 hours\n      expiresIn: options.session?.expiresIn || 60 * 60 * 24 * 7,\n      // 7 days\n      freshAge: options.session?.freshAge === void 0 ? 60 * 60 * 24 : options.session.freshAge\n    },\n    secret,\n    rateLimit: {\n      ...options.rateLimit,\n      enabled: options.rateLimit?.enabled ?? _better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_14__.b,\n      window: options.rateLimit?.window || 10,\n      max: options.rateLimit?.max || 100,\n      storage: options.rateLimit?.storage || (options.secondaryStorage ? \"secondary-storage\" : \"memory\")\n    },\n    authCookies: cookies,\n    logger,\n    generateId: generateIdFunc,\n    session: null,\n    secondaryStorage: options.secondaryStorage,\n    password: {\n      hash: options.emailAndPassword?.password?.hash || _crypto_index_mjs__WEBPACK_IMPORTED_MODULE_2__.hashPassword,\n      verify: options.emailAndPassword?.password?.verify || _crypto_index_mjs__WEBPACK_IMPORTED_MODULE_2__.verifyPassword,\n      config: {\n        minPasswordLength: options.emailAndPassword?.minPasswordLength || 8,\n        maxPasswordLength: options.emailAndPassword?.maxPasswordLength || 128\n      },\n      checkPassword: _better_auth_YwDQhoPc_mjs__WEBPACK_IMPORTED_MODULE_15__.c\n    },\n    setNewSession(session) {\n      this.newSession = session;\n    },\n    newSession: null,\n    adapter,\n    internalAdapter: (0,_better_auth_D_L3RQ6y_mjs__WEBPACK_IMPORTED_MODULE_4__.c)(adapter, {\n      options,\n      logger,\n      hooks: options.databaseHooks ? [options.databaseHooks] : []}),\n    createAuthCookie: (0,_better_auth_DiMXeqeq_mjs__WEBPACK_IMPORTED_MODULE_7__.c)(options),\n    async runMigrations() {\n      if (!options.database || \"updateMany\" in options.database) {\n        throw new _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_17__.B(\n          \"Database is not provided or it's an adapter. Migrations are only supported with a database instance.\"\n        );\n      }\n      const { runMigrations } = await (0,_better_auth_D_L3RQ6y_mjs__WEBPACK_IMPORTED_MODULE_4__.e)(options);\n      await runMigrations();\n    },\n    publishTelemetry: publish\n  };\n  const initOrPromise = runPluginInit(ctx);\n  let context;\n  if (isPromise(initOrPromise)) {\n    ({ context } = await initOrPromise);\n  } else {\n    ({ context } = initOrPromise);\n  }\n  return context;\n};\nasync function runPluginInit(ctx) {\n  let options = ctx.options;\n  const plugins = options.plugins || [];\n  let context = ctx;\n  const dbHooks = [];\n  for (const plugin of plugins) {\n    if (plugin.init) {\n      let initPromise = plugin.init(context);\n      let result;\n      if (isPromise(initPromise)) {\n        result = await initPromise;\n      } else {\n        result = initPromise;\n      }\n      if (typeof result === \"object\") {\n        if (result.options) {\n          const { databaseHooks, ...restOpts } = result.options;\n          if (databaseHooks) {\n            dbHooks.push(databaseHooks);\n          }\n          options = (0,defu__WEBPACK_IMPORTED_MODULE_1__.defu)(options, restOpts);\n        }\n        if (result.context) {\n          context = {\n            ...context,\n            ...result.context\n          };\n        }\n      }\n    }\n  }\n  dbHooks.push(options.databaseHooks);\n  context.internalAdapter = (0,_better_auth_D_L3RQ6y_mjs__WEBPACK_IMPORTED_MODULE_4__.c)(ctx.adapter, {\n    options,\n    logger: ctx.logger,\n    hooks: dbHooks.filter((u) => u !== void 0),\n    generateId: ctx.generateId\n  });\n  context.options = options;\n  return { context };\n}\nfunction getInternalPlugins(options) {\n  const plugins = [];\n  if (options.advanced?.crossSubDomainCookies?.enabled) ;\n  return plugins;\n}\nfunction getTrustedOrigins(options) {\n  const baseURL = (0,_better_auth_BRFtaovt_mjs__WEBPACK_IMPORTED_MODULE_16__.a)(options.baseURL, options.basePath);\n  if (!baseURL) {\n    return [];\n  }\n  const trustedOrigins = [new URL(baseURL).origin];\n  if (options.trustedOrigins && Array.isArray(options.trustedOrigins)) {\n    trustedOrigins.push(...options.trustedOrigins);\n  }\n  const envTrustedOrigins = _better_auth_CiuwFiHM_mjs__WEBPACK_IMPORTED_MODULE_14__.e.BETTER_AUTH_TRUSTED_ORIGINS;\n  if (envTrustedOrigins) {\n    trustedOrigins.push(...envTrustedOrigins.split(\",\"));\n  }\n  if (trustedOrigins.filter((x) => !x).length) {\n    throw new _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_17__.B(\n      \"A provided trusted origin is invalid, make sure your trusted origins list is properly defined.\"\n    );\n  }\n  return trustedOrigins;\n}\n\nconst betterAuth = (options) => {\n  const authContext = init(options);\n  const { api } = (0,_api_index_mjs__WEBPACK_IMPORTED_MODULE_0__.getEndpoints)(authContext, options);\n  const errorCodes = options.plugins?.reduce((acc, plugin) => {\n    if (plugin.$ERROR_CODES) {\n      return {\n        ...acc,\n        ...plugin.$ERROR_CODES\n      };\n    }\n    return acc;\n  }, {});\n  return {\n    handler: async (request) => {\n      const ctx = await authContext;\n      const basePath = ctx.options.basePath || \"/api/auth\";\n      if (!ctx.options.baseURL) {\n        const baseURL = (0,_better_auth_BRFtaovt_mjs__WEBPACK_IMPORTED_MODULE_16__.a)(void 0, basePath, request);\n        if (baseURL) {\n          ctx.baseURL = baseURL;\n          ctx.options.baseURL = (0,_better_auth_BRFtaovt_mjs__WEBPACK_IMPORTED_MODULE_16__.g)(ctx.baseURL) || void 0;\n        } else {\n          throw new _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_17__.B(\n            \"Could not get base URL from request. Please provide a valid base URL.\"\n          );\n        }\n      }\n      ctx.trustedOrigins = [\n        ...options.trustedOrigins ? Array.isArray(options.trustedOrigins) ? options.trustedOrigins : await options.trustedOrigins(request) : [],\n        ctx.options.baseURL\n      ];\n      const { handler } = (0,_api_index_mjs__WEBPACK_IMPORTED_MODULE_0__.router)(ctx, options);\n      return handler(request);\n    },\n    api,\n    options,\n    $context: authContext,\n    $Infer: {},\n    $ERROR_CODES: {\n      ...errorCodes,\n      ..._better_auth_C5vDERgF_mjs__WEBPACK_IMPORTED_MODULE_22__.B\n    }\n  };\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.mPTDVpKF.mjs\n");

/***/ })

};
;